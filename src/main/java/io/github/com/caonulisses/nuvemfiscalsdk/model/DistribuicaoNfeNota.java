/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * DistribuicaoNfeNota
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class DistribuicaoNfeNota {
  public static final String SERIALIZED_NAME_CHAVE_ACESSO = "chave_acesso";
  @SerializedName(SERIALIZED_NAME_CHAVE_ACESSO)
  @javax.annotation.Nullable
  private String chaveAcesso;

  public static final String SERIALIZED_NAME_NUMERO_PROTOCOLO = "numero_protocolo";
  @SerializedName(SERIALIZED_NAME_NUMERO_PROTOCOLO)
  @javax.annotation.Nullable
  private String numeroProtocolo;

  public static final String SERIALIZED_NAME_TIPO_NFE = "tipo_nfe";
  @SerializedName(SERIALIZED_NAME_TIPO_NFE)
  @javax.annotation.Nullable
  private Integer tipoNfe;

  public static final String SERIALIZED_NAME_VALOR_NFE = "valor_nfe";
  @SerializedName(SERIALIZED_NAME_VALOR_NFE)
  @javax.annotation.Nullable
  private BigDecimal valorNfe;

  public static final String SERIALIZED_NAME_DIGEST_VALUE = "digest_value";
  @SerializedName(SERIALIZED_NAME_DIGEST_VALUE)
  @javax.annotation.Nullable
  private String digestValue;

  public static final String SERIALIZED_NAME_EMITENTE_CPF_CNPJ = "emitente_cpf_cnpj";
  @SerializedName(SERIALIZED_NAME_EMITENTE_CPF_CNPJ)
  @javax.annotation.Nullable
  private String emitenteCpfCnpj;

  public static final String SERIALIZED_NAME_EMITENTE_NOME_RAZAO_SOCIAL = "emitente_nome_razao_social";
  @SerializedName(SERIALIZED_NAME_EMITENTE_NOME_RAZAO_SOCIAL)
  @javax.annotation.Nullable
  private String emitenteNomeRazaoSocial;

  public static final String SERIALIZED_NAME_EMITENTE_INSCRICAO_ESTADUAL = "emitente_inscricao_estadual";
  @SerializedName(SERIALIZED_NAME_EMITENTE_INSCRICAO_ESTADUAL)
  @javax.annotation.Nullable
  private String emitenteInscricaoEstadual;

  public DistribuicaoNfeNota() {
  }

  public DistribuicaoNfeNota chaveAcesso(@javax.annotation.Nullable String chaveAcesso) {
    this.chaveAcesso = chaveAcesso;
    return this;
  }

  /**
   * Chave de Acesso da NF-e.
   * @return chaveAcesso
   */
  @javax.annotation.Nullable
  public String getChaveAcesso() {
    return chaveAcesso;
  }

  public void setChaveAcesso(@javax.annotation.Nullable String chaveAcesso) {
    this.chaveAcesso = chaveAcesso;
  }


  public DistribuicaoNfeNota numeroProtocolo(@javax.annotation.Nullable String numeroProtocolo) {
    this.numeroProtocolo = numeroProtocolo;
    return this;
  }

  /**
   * Número do protocolo de autorização.
   * @return numeroProtocolo
   */
  @javax.annotation.Nullable
  public String getNumeroProtocolo() {
    return numeroProtocolo;
  }

  public void setNumeroProtocolo(@javax.annotation.Nullable String numeroProtocolo) {
    this.numeroProtocolo = numeroProtocolo;
  }


  public DistribuicaoNfeNota tipoNfe(@javax.annotation.Nullable Integer tipoNfe) {
    this.tipoNfe = tipoNfe;
    return this;
  }

  /**
   * Tipo da NF-e (0 - entrada; 1 - saída).
   * @return tipoNfe
   */
  @javax.annotation.Nullable
  public Integer getTipoNfe() {
    return tipoNfe;
  }

  public void setTipoNfe(@javax.annotation.Nullable Integer tipoNfe) {
    this.tipoNfe = tipoNfe;
  }


  public DistribuicaoNfeNota valorNfe(@javax.annotation.Nullable BigDecimal valorNfe) {
    this.valorNfe = valorNfe;
    return this;
  }

  /**
   * Valor total da NF-e.
   * @return valorNfe
   */
  @javax.annotation.Nullable
  public BigDecimal getValorNfe() {
    return valorNfe;
  }

  public void setValorNfe(@javax.annotation.Nullable BigDecimal valorNfe) {
    this.valorNfe = valorNfe;
  }


  public DistribuicaoNfeNota digestValue(@javax.annotation.Nullable String digestValue) {
    this.digestValue = digestValue;
    return this;
  }

  /**
   * Digest Value da NF-e processada. Utilizado para conferir a integridade da NF-e original.
   * @return digestValue
   */
  @javax.annotation.Nullable
  public String getDigestValue() {
    return digestValue;
  }

  public void setDigestValue(@javax.annotation.Nullable String digestValue) {
    this.digestValue = digestValue;
  }


  public DistribuicaoNfeNota emitenteCpfCnpj(@javax.annotation.Nullable String emitenteCpfCnpj) {
    this.emitenteCpfCnpj = emitenteCpfCnpj;
    return this;
  }

  /**
   * CPF/CNPJ do emitente.
   * @return emitenteCpfCnpj
   */
  @javax.annotation.Nullable
  public String getEmitenteCpfCnpj() {
    return emitenteCpfCnpj;
  }

  public void setEmitenteCpfCnpj(@javax.annotation.Nullable String emitenteCpfCnpj) {
    this.emitenteCpfCnpj = emitenteCpfCnpj;
  }


  public DistribuicaoNfeNota emitenteNomeRazaoSocial(@javax.annotation.Nullable String emitenteNomeRazaoSocial) {
    this.emitenteNomeRazaoSocial = emitenteNomeRazaoSocial;
    return this;
  }

  /**
   * Nome ou Razão Social do emitente.
   * @return emitenteNomeRazaoSocial
   */
  @javax.annotation.Nullable
  public String getEmitenteNomeRazaoSocial() {
    return emitenteNomeRazaoSocial;
  }

  public void setEmitenteNomeRazaoSocial(@javax.annotation.Nullable String emitenteNomeRazaoSocial) {
    this.emitenteNomeRazaoSocial = emitenteNomeRazaoSocial;
  }


  public DistribuicaoNfeNota emitenteInscricaoEstadual(@javax.annotation.Nullable String emitenteInscricaoEstadual) {
    this.emitenteInscricaoEstadual = emitenteInscricaoEstadual;
    return this;
  }

  /**
   * Inscrição Estadual do emitente.
   * @return emitenteInscricaoEstadual
   */
  @javax.annotation.Nullable
  public String getEmitenteInscricaoEstadual() {
    return emitenteInscricaoEstadual;
  }

  public void setEmitenteInscricaoEstadual(@javax.annotation.Nullable String emitenteInscricaoEstadual) {
    this.emitenteInscricaoEstadual = emitenteInscricaoEstadual;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DistribuicaoNfeNota distribuicaoNfeNota = (DistribuicaoNfeNota) o;
    return Objects.equals(this.chaveAcesso, distribuicaoNfeNota.chaveAcesso) &&
        Objects.equals(this.numeroProtocolo, distribuicaoNfeNota.numeroProtocolo) &&
        Objects.equals(this.tipoNfe, distribuicaoNfeNota.tipoNfe) &&
        Objects.equals(this.valorNfe, distribuicaoNfeNota.valorNfe) &&
        Objects.equals(this.digestValue, distribuicaoNfeNota.digestValue) &&
        Objects.equals(this.emitenteCpfCnpj, distribuicaoNfeNota.emitenteCpfCnpj) &&
        Objects.equals(this.emitenteNomeRazaoSocial, distribuicaoNfeNota.emitenteNomeRazaoSocial) &&
        Objects.equals(this.emitenteInscricaoEstadual, distribuicaoNfeNota.emitenteInscricaoEstadual);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(chaveAcesso, numeroProtocolo, tipoNfe, valorNfe, digestValue, emitenteCpfCnpj, emitenteNomeRazaoSocial, emitenteInscricaoEstadual);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DistribuicaoNfeNota {\n");
    sb.append("    chaveAcesso: ").append(toIndentedString(chaveAcesso)).append("\n");
    sb.append("    numeroProtocolo: ").append(toIndentedString(numeroProtocolo)).append("\n");
    sb.append("    tipoNfe: ").append(toIndentedString(tipoNfe)).append("\n");
    sb.append("    valorNfe: ").append(toIndentedString(valorNfe)).append("\n");
    sb.append("    digestValue: ").append(toIndentedString(digestValue)).append("\n");
    sb.append("    emitenteCpfCnpj: ").append(toIndentedString(emitenteCpfCnpj)).append("\n");
    sb.append("    emitenteNomeRazaoSocial: ").append(toIndentedString(emitenteNomeRazaoSocial)).append("\n");
    sb.append("    emitenteInscricaoEstadual: ").append(toIndentedString(emitenteInscricaoEstadual)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chave_acesso");
    openapiFields.add("numero_protocolo");
    openapiFields.add("tipo_nfe");
    openapiFields.add("valor_nfe");
    openapiFields.add("digest_value");
    openapiFields.add("emitente_cpf_cnpj");
    openapiFields.add("emitente_nome_razao_social");
    openapiFields.add("emitente_inscricao_estadual");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DistribuicaoNfeNota
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DistribuicaoNfeNota.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DistribuicaoNfeNota is not found in the empty JSON string", DistribuicaoNfeNota.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DistribuicaoNfeNota.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DistribuicaoNfeNota` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chave_acesso") != null && !jsonObj.get("chave_acesso").isJsonNull()) && !jsonObj.get("chave_acesso").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chave_acesso` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chave_acesso").toString()));
      }
      if ((jsonObj.get("numero_protocolo") != null && !jsonObj.get("numero_protocolo").isJsonNull()) && !jsonObj.get("numero_protocolo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numero_protocolo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numero_protocolo").toString()));
      }
      if ((jsonObj.get("digest_value") != null && !jsonObj.get("digest_value").isJsonNull()) && !jsonObj.get("digest_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digest_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digest_value").toString()));
      }
      if ((jsonObj.get("emitente_cpf_cnpj") != null && !jsonObj.get("emitente_cpf_cnpj").isJsonNull()) && !jsonObj.get("emitente_cpf_cnpj").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emitente_cpf_cnpj` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emitente_cpf_cnpj").toString()));
      }
      if ((jsonObj.get("emitente_nome_razao_social") != null && !jsonObj.get("emitente_nome_razao_social").isJsonNull()) && !jsonObj.get("emitente_nome_razao_social").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emitente_nome_razao_social` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emitente_nome_razao_social").toString()));
      }
      if ((jsonObj.get("emitente_inscricao_estadual") != null && !jsonObj.get("emitente_inscricao_estadual").isJsonNull()) && !jsonObj.get("emitente_inscricao_estadual").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emitente_inscricao_estadual` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emitente_inscricao_estadual").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DistribuicaoNfeNota.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DistribuicaoNfeNota' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DistribuicaoNfeNota> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DistribuicaoNfeNota.class));

       return (TypeAdapter<T>) new TypeAdapter<DistribuicaoNfeNota>() {
           @Override
           public void write(JsonWriter out, DistribuicaoNfeNota value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DistribuicaoNfeNota read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DistribuicaoNfeNota given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DistribuicaoNfeNota
   * @throws IOException if the JSON string is invalid with respect to DistribuicaoNfeNota
   */
  public static DistribuicaoNfeNota fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DistribuicaoNfeNota.class);
  }

  /**
   * Convert an instance of DistribuicaoNfeNota to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

