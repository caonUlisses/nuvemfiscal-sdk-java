/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Documentos de transporte anterior em papel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazIdDocAntPap {
  public static final String SERIALIZED_NAME_TP_DOC = "tpDoc";
  @SerializedName(SERIALIZED_NAME_TP_DOC)
  @javax.annotation.Nullable
  private String tpDoc;

  public static final String SERIALIZED_NAME_SERIE = "serie";
  @SerializedName(SERIALIZED_NAME_SERIE)
  @javax.annotation.Nullable
  private String serie;

  public static final String SERIALIZED_NAME_SUBSER = "subser";
  @SerializedName(SERIALIZED_NAME_SUBSER)
  @javax.annotation.Nullable
  private String subser;

  public static final String SERIALIZED_NAME_N_DOC = "nDoc";
  @SerializedName(SERIALIZED_NAME_N_DOC)
  @javax.annotation.Nullable
  private String nDoc;

  public static final String SERIALIZED_NAME_D_EMI = "dEmi";
  @SerializedName(SERIALIZED_NAME_D_EMI)
  @javax.annotation.Nullable
  private LocalDate dEmi;

  public CteSefazIdDocAntPap() {
  }

  public CteSefazIdDocAntPap tpDoc(@javax.annotation.Nullable String tpDoc) {
    this.tpDoc = tpDoc;
    return this;
  }

  /**
   * Tipo do Documento de Transporte Anterior.  Preencher com:  * 07 - ATRE  * 08 - DTA (Despacho de Transito Aduaneiro)  * 09 - Conhecimento Aéreo Internacional  * 10 - Conhecimento - Carta de Porte Internacional  * 11 - Conhecimento Avulso  * 12 - TIF (Transporte Internacional Ferroviário)  * 13 - BL (Bill of Lading)
   * @return tpDoc
   */
  @javax.annotation.Nullable
  public String getTpDoc() {
    return tpDoc;
  }

  public void setTpDoc(@javax.annotation.Nullable String tpDoc) {
    this.tpDoc = tpDoc;
  }


  public CteSefazIdDocAntPap serie(@javax.annotation.Nullable String serie) {
    this.serie = serie;
    return this;
  }

  /**
   * Série do Documento Fiscal.
   * @return serie
   */
  @javax.annotation.Nullable
  public String getSerie() {
    return serie;
  }

  public void setSerie(@javax.annotation.Nullable String serie) {
    this.serie = serie;
  }


  public CteSefazIdDocAntPap subser(@javax.annotation.Nullable String subser) {
    this.subser = subser;
    return this;
  }

  /**
   * Série do Documento Fiscal.
   * @return subser
   */
  @javax.annotation.Nullable
  public String getSubser() {
    return subser;
  }

  public void setSubser(@javax.annotation.Nullable String subser) {
    this.subser = subser;
  }


  public CteSefazIdDocAntPap nDoc(@javax.annotation.Nullable String nDoc) {
    this.nDoc = nDoc;
    return this;
  }

  /**
   * Número do Documento Fiscal.
   * @return nDoc
   */
  @javax.annotation.Nullable
  public String getnDoc() {
    return nDoc;
  }

  public void setnDoc(@javax.annotation.Nullable String nDoc) {
    this.nDoc = nDoc;
  }


  public CteSefazIdDocAntPap dEmi(@javax.annotation.Nullable LocalDate dEmi) {
    this.dEmi = dEmi;
    return this;
  }

  /**
   * Data de emissão (AAAA-MM-DD).
   * @return dEmi
   */
  @javax.annotation.Nullable
  public LocalDate getdEmi() {
    return dEmi;
  }

  public void setdEmi(@javax.annotation.Nullable LocalDate dEmi) {
    this.dEmi = dEmi;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazIdDocAntPap cteSefazIdDocAntPap = (CteSefazIdDocAntPap) o;
    return Objects.equals(this.tpDoc, cteSefazIdDocAntPap.tpDoc) &&
        Objects.equals(this.serie, cteSefazIdDocAntPap.serie) &&
        Objects.equals(this.subser, cteSefazIdDocAntPap.subser) &&
        Objects.equals(this.nDoc, cteSefazIdDocAntPap.nDoc) &&
        Objects.equals(this.dEmi, cteSefazIdDocAntPap.dEmi);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tpDoc, serie, subser, nDoc, dEmi);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazIdDocAntPap {\n");
    sb.append("    tpDoc: ").append(toIndentedString(tpDoc)).append("\n");
    sb.append("    serie: ").append(toIndentedString(serie)).append("\n");
    sb.append("    subser: ").append(toIndentedString(subser)).append("\n");
    sb.append("    nDoc: ").append(toIndentedString(nDoc)).append("\n");
    sb.append("    dEmi: ").append(toIndentedString(dEmi)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tpDoc");
    openapiFields.add("serie");
    openapiFields.add("subser");
    openapiFields.add("nDoc");
    openapiFields.add("dEmi");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tpDoc");
    openapiRequiredFields.add("serie");
    openapiRequiredFields.add("nDoc");
    openapiRequiredFields.add("dEmi");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazIdDocAntPap
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazIdDocAntPap.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazIdDocAntPap is not found in the empty JSON string", CteSefazIdDocAntPap.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazIdDocAntPap.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazIdDocAntPap` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CteSefazIdDocAntPap.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tpDoc") != null && !jsonObj.get("tpDoc").isJsonNull()) && !jsonObj.get("tpDoc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tpDoc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tpDoc").toString()));
      }
      if ((jsonObj.get("serie") != null && !jsonObj.get("serie").isJsonNull()) && !jsonObj.get("serie").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serie` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serie").toString()));
      }
      if ((jsonObj.get("subser") != null && !jsonObj.get("subser").isJsonNull()) && !jsonObj.get("subser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subser").toString()));
      }
      if ((jsonObj.get("nDoc") != null && !jsonObj.get("nDoc").isJsonNull()) && !jsonObj.get("nDoc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nDoc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nDoc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazIdDocAntPap.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazIdDocAntPap' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazIdDocAntPap> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazIdDocAntPap.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazIdDocAntPap>() {
           @Override
           public void write(JsonWriter out, CteSefazIdDocAntPap value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazIdDocAntPap read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazIdDocAntPap given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazIdDocAntPap
   * @throws IOException if the JSON string is invalid with respect to CteSefazIdDocAntPap
   */
  public static CteSefazIdDocAntPap fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazIdDocAntPap.class);
  }

  /**
   * Convert an instance of CteSefazIdDocAntPap to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

