/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Veículos novos.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazVeicProd {
  public static final String SERIALIZED_NAME_TP_OP = "tpOp";
  @SerializedName(SERIALIZED_NAME_TP_OP)
  @javax.annotation.Nullable
  private Integer tpOp;

  public static final String SERIALIZED_NAME_CHASSI = "chassi";
  @SerializedName(SERIALIZED_NAME_CHASSI)
  @javax.annotation.Nullable
  private String chassi;

  public static final String SERIALIZED_NAME_C_COR = "cCor";
  @SerializedName(SERIALIZED_NAME_C_COR)
  @javax.annotation.Nullable
  private String cCor;

  public static final String SERIALIZED_NAME_X_COR = "xCor";
  @SerializedName(SERIALIZED_NAME_X_COR)
  @javax.annotation.Nullable
  private String xCor;

  public static final String SERIALIZED_NAME_POT = "pot";
  @SerializedName(SERIALIZED_NAME_POT)
  @javax.annotation.Nullable
  private String pot;

  public static final String SERIALIZED_NAME_CILIN = "cilin";
  @SerializedName(SERIALIZED_NAME_CILIN)
  @javax.annotation.Nullable
  private String cilin;

  public static final String SERIALIZED_NAME_PESO_L = "pesoL";
  @SerializedName(SERIALIZED_NAME_PESO_L)
  @javax.annotation.Nullable
  private String pesoL;

  public static final String SERIALIZED_NAME_PESO_B = "pesoB";
  @SerializedName(SERIALIZED_NAME_PESO_B)
  @javax.annotation.Nullable
  private String pesoB;

  public static final String SERIALIZED_NAME_N_SERIE = "nSerie";
  @SerializedName(SERIALIZED_NAME_N_SERIE)
  @javax.annotation.Nullable
  private String nSerie;

  public static final String SERIALIZED_NAME_TP_COMB = "tpComb";
  @SerializedName(SERIALIZED_NAME_TP_COMB)
  @javax.annotation.Nullable
  private String tpComb;

  public static final String SERIALIZED_NAME_N_MOTOR = "nMotor";
  @SerializedName(SERIALIZED_NAME_N_MOTOR)
  @javax.annotation.Nullable
  private String nMotor;

  public static final String SERIALIZED_NAME_C_M_T = "CMT";
  @SerializedName(SERIALIZED_NAME_C_M_T)
  @javax.annotation.Nullable
  private String CMT;

  public static final String SERIALIZED_NAME_DIST = "dist";
  @SerializedName(SERIALIZED_NAME_DIST)
  @javax.annotation.Nullable
  private String dist;

  public static final String SERIALIZED_NAME_ANO_MOD = "anoMod";
  @SerializedName(SERIALIZED_NAME_ANO_MOD)
  @javax.annotation.Nullable
  private Integer anoMod;

  public static final String SERIALIZED_NAME_ANO_FAB = "anoFab";
  @SerializedName(SERIALIZED_NAME_ANO_FAB)
  @javax.annotation.Nullable
  private Integer anoFab;

  public static final String SERIALIZED_NAME_TP_PINT = "tpPint";
  @SerializedName(SERIALIZED_NAME_TP_PINT)
  @javax.annotation.Nullable
  private String tpPint;

  public static final String SERIALIZED_NAME_TP_VEIC = "tpVeic";
  @SerializedName(SERIALIZED_NAME_TP_VEIC)
  @javax.annotation.Nullable
  private Integer tpVeic;

  public static final String SERIALIZED_NAME_ESP_VEIC = "espVeic";
  @SerializedName(SERIALIZED_NAME_ESP_VEIC)
  @javax.annotation.Nullable
  private Integer espVeic;

  public static final String SERIALIZED_NAME_V_I_N = "VIN";
  @SerializedName(SERIALIZED_NAME_V_I_N)
  @javax.annotation.Nullable
  private String VIN;

  public static final String SERIALIZED_NAME_COND_VEIC = "condVeic";
  @SerializedName(SERIALIZED_NAME_COND_VEIC)
  @javax.annotation.Nullable
  private Integer condVeic;

  public static final String SERIALIZED_NAME_C_MOD = "cMod";
  @SerializedName(SERIALIZED_NAME_C_MOD)
  @javax.annotation.Nullable
  private String cMod;

  public static final String SERIALIZED_NAME_C_COR_D_E_N_A_T_R_A_N = "cCorDENATRAN";
  @SerializedName(SERIALIZED_NAME_C_COR_D_E_N_A_T_R_A_N)
  @javax.annotation.Nullable
  private String cCorDENATRAN;

  public static final String SERIALIZED_NAME_LOTA = "lota";
  @SerializedName(SERIALIZED_NAME_LOTA)
  @javax.annotation.Nullable
  private Integer lota;

  public static final String SERIALIZED_NAME_TP_REST = "tpRest";
  @SerializedName(SERIALIZED_NAME_TP_REST)
  @javax.annotation.Nullable
  private Integer tpRest;

  public NfeSefazVeicProd() {
  }

  public NfeSefazVeicProd tpOp(@javax.annotation.Nullable Integer tpOp) {
    this.tpOp = tpOp;
    return this;
  }

  /**
   * Tipo da Operação (1 - Venda concessionária; 2 - Faturamento direto; 3 - Venda direta; 0 - Outros).
   * @return tpOp
   */
  @javax.annotation.Nullable
  public Integer getTpOp() {
    return tpOp;
  }

  public void setTpOp(@javax.annotation.Nullable Integer tpOp) {
    this.tpOp = tpOp;
  }


  public NfeSefazVeicProd chassi(@javax.annotation.Nullable String chassi) {
    this.chassi = chassi;
    return this;
  }

  /**
   * Chassi do veículo - VIN (código-identificação-veículo).
   * @return chassi
   */
  @javax.annotation.Nullable
  public String getChassi() {
    return chassi;
  }

  public void setChassi(@javax.annotation.Nullable String chassi) {
    this.chassi = chassi;
  }


  public NfeSefazVeicProd cCor(@javax.annotation.Nullable String cCor) {
    this.cCor = cCor;
    return this;
  }

  /**
   * Cor do veículo (código de cada montadora).
   * @return cCor
   */
  @javax.annotation.Nullable
  public String getcCor() {
    return cCor;
  }

  public void setcCor(@javax.annotation.Nullable String cCor) {
    this.cCor = cCor;
  }


  public NfeSefazVeicProd xCor(@javax.annotation.Nullable String xCor) {
    this.xCor = xCor;
    return this;
  }

  /**
   * Descrição da cor.
   * @return xCor
   */
  @javax.annotation.Nullable
  public String getxCor() {
    return xCor;
  }

  public void setxCor(@javax.annotation.Nullable String xCor) {
    this.xCor = xCor;
  }


  public NfeSefazVeicProd pot(@javax.annotation.Nullable String pot) {
    this.pot = pot;
    return this;
  }

  /**
   * Potência máxima do motor do veículo em cavalo vapor (CV). (potência-veículo).
   * @return pot
   */
  @javax.annotation.Nullable
  public String getPot() {
    return pot;
  }

  public void setPot(@javax.annotation.Nullable String pot) {
    this.pot = pot;
  }


  public NfeSefazVeicProd cilin(@javax.annotation.Nullable String cilin) {
    this.cilin = cilin;
    return this;
  }

  /**
   * Capacidade voluntária do motor expressa em centímetros cúbicos (CC). (cilindradas).
   * @return cilin
   */
  @javax.annotation.Nullable
  public String getCilin() {
    return cilin;
  }

  public void setCilin(@javax.annotation.Nullable String cilin) {
    this.cilin = cilin;
  }


  public NfeSefazVeicProd pesoL(@javax.annotation.Nullable String pesoL) {
    this.pesoL = pesoL;
    return this;
  }

  /**
   * Peso líquido.
   * @return pesoL
   */
  @javax.annotation.Nullable
  public String getPesoL() {
    return pesoL;
  }

  public void setPesoL(@javax.annotation.Nullable String pesoL) {
    this.pesoL = pesoL;
  }


  public NfeSefazVeicProd pesoB(@javax.annotation.Nullable String pesoB) {
    this.pesoB = pesoB;
    return this;
  }

  /**
   * Peso bruto.
   * @return pesoB
   */
  @javax.annotation.Nullable
  public String getPesoB() {
    return pesoB;
  }

  public void setPesoB(@javax.annotation.Nullable String pesoB) {
    this.pesoB = pesoB;
  }


  public NfeSefazVeicProd nSerie(@javax.annotation.Nullable String nSerie) {
    this.nSerie = nSerie;
    return this;
  }

  /**
   * Serial (série).
   * @return nSerie
   */
  @javax.annotation.Nullable
  public String getnSerie() {
    return nSerie;
  }

  public void setnSerie(@javax.annotation.Nullable String nSerie) {
    this.nSerie = nSerie;
  }


  public NfeSefazVeicProd tpComb(@javax.annotation.Nullable String tpComb) {
    this.tpComb = tpComb;
    return this;
  }

  /**
   * Tipo de combustível-Tabela RENAVAM: 01-Álcool  * 02 - Gasolina  * 03 - Diesel  * 16 - Álcool/Gas  * 17 - Gas./Álcool/GNV  * 18 - Gasolina/Elétrico
   * @return tpComb
   */
  @javax.annotation.Nullable
  public String getTpComb() {
    return tpComb;
  }

  public void setTpComb(@javax.annotation.Nullable String tpComb) {
    this.tpComb = tpComb;
  }


  public NfeSefazVeicProd nMotor(@javax.annotation.Nullable String nMotor) {
    this.nMotor = nMotor;
    return this;
  }

  /**
   * Número do motor.
   * @return nMotor
   */
  @javax.annotation.Nullable
  public String getnMotor() {
    return nMotor;
  }

  public void setnMotor(@javax.annotation.Nullable String nMotor) {
    this.nMotor = nMotor;
  }


  public NfeSefazVeicProd CMT(@javax.annotation.Nullable String CMT) {
    this.CMT = CMT;
    return this;
  }

  /**
   * CMT-Capacidade Máxima de Tração - em Toneladas 4 casas decimais.
   * @return CMT
   */
  @javax.annotation.Nullable
  public String getCMT() {
    return CMT;
  }

  public void setCMT(@javax.annotation.Nullable String CMT) {
    this.CMT = CMT;
  }


  public NfeSefazVeicProd dist(@javax.annotation.Nullable String dist) {
    this.dist = dist;
    return this;
  }

  /**
   * Distância entre eixos.
   * @return dist
   */
  @javax.annotation.Nullable
  public String getDist() {
    return dist;
  }

  public void setDist(@javax.annotation.Nullable String dist) {
    this.dist = dist;
  }


  public NfeSefazVeicProd anoMod(@javax.annotation.Nullable Integer anoMod) {
    this.anoMod = anoMod;
    return this;
  }

  /**
   * Ano Modelo de Fabricação.
   * minimum: 0
   * maximum: 9999
   * @return anoMod
   */
  @javax.annotation.Nullable
  public Integer getAnoMod() {
    return anoMod;
  }

  public void setAnoMod(@javax.annotation.Nullable Integer anoMod) {
    this.anoMod = anoMod;
  }


  public NfeSefazVeicProd anoFab(@javax.annotation.Nullable Integer anoFab) {
    this.anoFab = anoFab;
    return this;
  }

  /**
   * Ano de Fabricação.
   * minimum: 0
   * maximum: 9999
   * @return anoFab
   */
  @javax.annotation.Nullable
  public Integer getAnoFab() {
    return anoFab;
  }

  public void setAnoFab(@javax.annotation.Nullable Integer anoFab) {
    this.anoFab = anoFab;
  }


  public NfeSefazVeicProd tpPint(@javax.annotation.Nullable String tpPint) {
    this.tpPint = tpPint;
    return this;
  }

  /**
   * Tipo de pintura.
   * @return tpPint
   */
  @javax.annotation.Nullable
  public String getTpPint() {
    return tpPint;
  }

  public void setTpPint(@javax.annotation.Nullable String tpPint) {
    this.tpPint = tpPint;
  }


  public NfeSefazVeicProd tpVeic(@javax.annotation.Nullable Integer tpVeic) {
    this.tpVeic = tpVeic;
    return this;
  }

  /**
   * Tipo de veículo (utilizar tabela RENAVAM).
   * minimum: 0
   * maximum: 99
   * @return tpVeic
   */
  @javax.annotation.Nullable
  public Integer getTpVeic() {
    return tpVeic;
  }

  public void setTpVeic(@javax.annotation.Nullable Integer tpVeic) {
    this.tpVeic = tpVeic;
  }


  public NfeSefazVeicProd espVeic(@javax.annotation.Nullable Integer espVeic) {
    this.espVeic = espVeic;
    return this;
  }

  /**
   * Espécie de veículo (utilizar tabela RENAVAM).
   * minimum: 0
   * maximum: 9
   * @return espVeic
   */
  @javax.annotation.Nullable
  public Integer getEspVeic() {
    return espVeic;
  }

  public void setEspVeic(@javax.annotation.Nullable Integer espVeic) {
    this.espVeic = espVeic;
  }


  public NfeSefazVeicProd VIN(@javax.annotation.Nullable String VIN) {
    this.VIN = VIN;
    return this;
  }

  /**
   * Informa-se o veículo tem VIN (chassi) remarcado.  * R-Remarcado  * N-NormalVIN
   * @return VIN
   */
  @javax.annotation.Nullable
  public String getVIN() {
    return VIN;
  }

  public void setVIN(@javax.annotation.Nullable String VIN) {
    this.VIN = VIN;
  }


  public NfeSefazVeicProd condVeic(@javax.annotation.Nullable Integer condVeic) {
    this.condVeic = condVeic;
    return this;
  }

  /**
   * Condição do veículo (1 - acabado; 2 - inacabado; 3 - semi-acabado).
   * @return condVeic
   */
  @javax.annotation.Nullable
  public Integer getCondVeic() {
    return condVeic;
  }

  public void setCondVeic(@javax.annotation.Nullable Integer condVeic) {
    this.condVeic = condVeic;
  }


  public NfeSefazVeicProd cMod(@javax.annotation.Nullable String cMod) {
    this.cMod = cMod;
    return this;
  }

  /**
   * Código Marca Modelo (utilizar tabela RENAVAM).
   * @return cMod
   */
  @javax.annotation.Nullable
  public String getcMod() {
    return cMod;
  }

  public void setcMod(@javax.annotation.Nullable String cMod) {
    this.cMod = cMod;
  }


  public NfeSefazVeicProd cCorDENATRAN(@javax.annotation.Nullable String cCorDENATRAN) {
    this.cCorDENATRAN = cCorDENATRAN;
    return this;
  }

  /**
   * Código da Cor Segundo as regras de pré-cadastro do DENATRAN: 01-AMARELO  * 02 - AZUL  * 03 - BEGE  * 04 - BRANCA  * 05 - CINZA  * 06 - DOURADA  * 07 - GRENA  * 08 - LARANJA  * 09 - MARROM  * 10 - PRATA  * 11 - PRETA  * 12 - ROSA  * 13 - ROXA  * 14 - VERDE  * 15 - VERMELHA  * 16 - FANTASIA
   * @return cCorDENATRAN
   */
  @javax.annotation.Nullable
  public String getcCorDENATRAN() {
    return cCorDENATRAN;
  }

  public void setcCorDENATRAN(@javax.annotation.Nullable String cCorDENATRAN) {
    this.cCorDENATRAN = cCorDENATRAN;
  }


  public NfeSefazVeicProd lota(@javax.annotation.Nullable Integer lota) {
    this.lota = lota;
    return this;
  }

  /**
   * Quantidade máxima de permitida de passageiros sentados, inclusive motorista.
   * minimum: 0
   * maximum: 999
   * @return lota
   */
  @javax.annotation.Nullable
  public Integer getLota() {
    return lota;
  }

  public void setLota(@javax.annotation.Nullable Integer lota) {
    this.lota = lota;
  }


  public NfeSefazVeicProd tpRest(@javax.annotation.Nullable Integer tpRest) {
    this.tpRest = tpRest;
    return this;
  }

  /**
   * Restrição  * 0 - Não há  * 1 - Alienação Fiduciária  * 2 - Arrendamento Mercantil  * 3 - Reserva de Domínio  * 4 - Penhor de Veículos  * 9 - outras
   * @return tpRest
   */
  @javax.annotation.Nullable
  public Integer getTpRest() {
    return tpRest;
  }

  public void setTpRest(@javax.annotation.Nullable Integer tpRest) {
    this.tpRest = tpRest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazVeicProd nfeSefazVeicProd = (NfeSefazVeicProd) o;
    return Objects.equals(this.tpOp, nfeSefazVeicProd.tpOp) &&
        Objects.equals(this.chassi, nfeSefazVeicProd.chassi) &&
        Objects.equals(this.cCor, nfeSefazVeicProd.cCor) &&
        Objects.equals(this.xCor, nfeSefazVeicProd.xCor) &&
        Objects.equals(this.pot, nfeSefazVeicProd.pot) &&
        Objects.equals(this.cilin, nfeSefazVeicProd.cilin) &&
        Objects.equals(this.pesoL, nfeSefazVeicProd.pesoL) &&
        Objects.equals(this.pesoB, nfeSefazVeicProd.pesoB) &&
        Objects.equals(this.nSerie, nfeSefazVeicProd.nSerie) &&
        Objects.equals(this.tpComb, nfeSefazVeicProd.tpComb) &&
        Objects.equals(this.nMotor, nfeSefazVeicProd.nMotor) &&
        Objects.equals(this.CMT, nfeSefazVeicProd.CMT) &&
        Objects.equals(this.dist, nfeSefazVeicProd.dist) &&
        Objects.equals(this.anoMod, nfeSefazVeicProd.anoMod) &&
        Objects.equals(this.anoFab, nfeSefazVeicProd.anoFab) &&
        Objects.equals(this.tpPint, nfeSefazVeicProd.tpPint) &&
        Objects.equals(this.tpVeic, nfeSefazVeicProd.tpVeic) &&
        Objects.equals(this.espVeic, nfeSefazVeicProd.espVeic) &&
        Objects.equals(this.VIN, nfeSefazVeicProd.VIN) &&
        Objects.equals(this.condVeic, nfeSefazVeicProd.condVeic) &&
        Objects.equals(this.cMod, nfeSefazVeicProd.cMod) &&
        Objects.equals(this.cCorDENATRAN, nfeSefazVeicProd.cCorDENATRAN) &&
        Objects.equals(this.lota, nfeSefazVeicProd.lota) &&
        Objects.equals(this.tpRest, nfeSefazVeicProd.tpRest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tpOp, chassi, cCor, xCor, pot, cilin, pesoL, pesoB, nSerie, tpComb, nMotor, CMT, dist, anoMod, anoFab, tpPint, tpVeic, espVeic, VIN, condVeic, cMod, cCorDENATRAN, lota, tpRest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazVeicProd {\n");
    sb.append("    tpOp: ").append(toIndentedString(tpOp)).append("\n");
    sb.append("    chassi: ").append(toIndentedString(chassi)).append("\n");
    sb.append("    cCor: ").append(toIndentedString(cCor)).append("\n");
    sb.append("    xCor: ").append(toIndentedString(xCor)).append("\n");
    sb.append("    pot: ").append(toIndentedString(pot)).append("\n");
    sb.append("    cilin: ").append(toIndentedString(cilin)).append("\n");
    sb.append("    pesoL: ").append(toIndentedString(pesoL)).append("\n");
    sb.append("    pesoB: ").append(toIndentedString(pesoB)).append("\n");
    sb.append("    nSerie: ").append(toIndentedString(nSerie)).append("\n");
    sb.append("    tpComb: ").append(toIndentedString(tpComb)).append("\n");
    sb.append("    nMotor: ").append(toIndentedString(nMotor)).append("\n");
    sb.append("    CMT: ").append(toIndentedString(CMT)).append("\n");
    sb.append("    dist: ").append(toIndentedString(dist)).append("\n");
    sb.append("    anoMod: ").append(toIndentedString(anoMod)).append("\n");
    sb.append("    anoFab: ").append(toIndentedString(anoFab)).append("\n");
    sb.append("    tpPint: ").append(toIndentedString(tpPint)).append("\n");
    sb.append("    tpVeic: ").append(toIndentedString(tpVeic)).append("\n");
    sb.append("    espVeic: ").append(toIndentedString(espVeic)).append("\n");
    sb.append("    VIN: ").append(toIndentedString(VIN)).append("\n");
    sb.append("    condVeic: ").append(toIndentedString(condVeic)).append("\n");
    sb.append("    cMod: ").append(toIndentedString(cMod)).append("\n");
    sb.append("    cCorDENATRAN: ").append(toIndentedString(cCorDENATRAN)).append("\n");
    sb.append("    lota: ").append(toIndentedString(lota)).append("\n");
    sb.append("    tpRest: ").append(toIndentedString(tpRest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tpOp");
    openapiFields.add("chassi");
    openapiFields.add("cCor");
    openapiFields.add("xCor");
    openapiFields.add("pot");
    openapiFields.add("cilin");
    openapiFields.add("pesoL");
    openapiFields.add("pesoB");
    openapiFields.add("nSerie");
    openapiFields.add("tpComb");
    openapiFields.add("nMotor");
    openapiFields.add("CMT");
    openapiFields.add("dist");
    openapiFields.add("anoMod");
    openapiFields.add("anoFab");
    openapiFields.add("tpPint");
    openapiFields.add("tpVeic");
    openapiFields.add("espVeic");
    openapiFields.add("VIN");
    openapiFields.add("condVeic");
    openapiFields.add("cMod");
    openapiFields.add("cCorDENATRAN");
    openapiFields.add("lota");
    openapiFields.add("tpRest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tpOp");
    openapiRequiredFields.add("chassi");
    openapiRequiredFields.add("cCor");
    openapiRequiredFields.add("xCor");
    openapiRequiredFields.add("pot");
    openapiRequiredFields.add("cilin");
    openapiRequiredFields.add("pesoL");
    openapiRequiredFields.add("pesoB");
    openapiRequiredFields.add("nSerie");
    openapiRequiredFields.add("tpComb");
    openapiRequiredFields.add("nMotor");
    openapiRequiredFields.add("CMT");
    openapiRequiredFields.add("dist");
    openapiRequiredFields.add("anoMod");
    openapiRequiredFields.add("anoFab");
    openapiRequiredFields.add("tpPint");
    openapiRequiredFields.add("tpVeic");
    openapiRequiredFields.add("espVeic");
    openapiRequiredFields.add("VIN");
    openapiRequiredFields.add("condVeic");
    openapiRequiredFields.add("cMod");
    openapiRequiredFields.add("cCorDENATRAN");
    openapiRequiredFields.add("lota");
    openapiRequiredFields.add("tpRest");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazVeicProd
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazVeicProd.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazVeicProd is not found in the empty JSON string", NfeSefazVeicProd.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazVeicProd.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazVeicProd` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfeSefazVeicProd.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chassi") != null && !jsonObj.get("chassi").isJsonNull()) && !jsonObj.get("chassi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chassi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chassi").toString()));
      }
      if ((jsonObj.get("cCor") != null && !jsonObj.get("cCor").isJsonNull()) && !jsonObj.get("cCor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cCor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cCor").toString()));
      }
      if ((jsonObj.get("xCor") != null && !jsonObj.get("xCor").isJsonNull()) && !jsonObj.get("xCor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xCor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xCor").toString()));
      }
      if ((jsonObj.get("pot") != null && !jsonObj.get("pot").isJsonNull()) && !jsonObj.get("pot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pot").toString()));
      }
      if ((jsonObj.get("cilin") != null && !jsonObj.get("cilin").isJsonNull()) && !jsonObj.get("cilin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cilin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cilin").toString()));
      }
      if ((jsonObj.get("pesoL") != null && !jsonObj.get("pesoL").isJsonNull()) && !jsonObj.get("pesoL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pesoL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pesoL").toString()));
      }
      if ((jsonObj.get("pesoB") != null && !jsonObj.get("pesoB").isJsonNull()) && !jsonObj.get("pesoB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pesoB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pesoB").toString()));
      }
      if ((jsonObj.get("nSerie") != null && !jsonObj.get("nSerie").isJsonNull()) && !jsonObj.get("nSerie").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nSerie` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nSerie").toString()));
      }
      if ((jsonObj.get("tpComb") != null && !jsonObj.get("tpComb").isJsonNull()) && !jsonObj.get("tpComb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tpComb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tpComb").toString()));
      }
      if ((jsonObj.get("nMotor") != null && !jsonObj.get("nMotor").isJsonNull()) && !jsonObj.get("nMotor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nMotor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nMotor").toString()));
      }
      if ((jsonObj.get("CMT") != null && !jsonObj.get("CMT").isJsonNull()) && !jsonObj.get("CMT").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CMT` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CMT").toString()));
      }
      if ((jsonObj.get("dist") != null && !jsonObj.get("dist").isJsonNull()) && !jsonObj.get("dist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dist").toString()));
      }
      if ((jsonObj.get("tpPint") != null && !jsonObj.get("tpPint").isJsonNull()) && !jsonObj.get("tpPint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tpPint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tpPint").toString()));
      }
      if ((jsonObj.get("VIN") != null && !jsonObj.get("VIN").isJsonNull()) && !jsonObj.get("VIN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VIN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VIN").toString()));
      }
      if ((jsonObj.get("cMod") != null && !jsonObj.get("cMod").isJsonNull()) && !jsonObj.get("cMod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cMod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cMod").toString()));
      }
      if ((jsonObj.get("cCorDENATRAN") != null && !jsonObj.get("cCorDENATRAN").isJsonNull()) && !jsonObj.get("cCorDENATRAN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cCorDENATRAN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cCorDENATRAN").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazVeicProd.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazVeicProd' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazVeicProd> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazVeicProd.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazVeicProd>() {
           @Override
           public void write(JsonWriter out, NfeSefazVeicProd value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazVeicProd read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazVeicProd given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazVeicProd
   * @throws IOException if the JSON string is invalid with respect to NfeSefazVeicProd
   */
  public static NfeSefazVeicProd fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazVeicProd.class);
  }

  /**
   * Convert an instance of NfeSefazVeicProd to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

