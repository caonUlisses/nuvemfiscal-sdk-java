/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CteSefazEntrega;
import org.openapitools.client.model.CteSefazFluxo;
import org.openapitools.client.model.CteSefazObsCont;
import org.openapitools.client.model.CteSefazObsFisco;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dados complementares do CT-e para fins operacionais ou comerciais.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazCompl {
  public static final String SERIALIZED_NAME_X_CARAC_AD = "xCaracAd";
  @SerializedName(SERIALIZED_NAME_X_CARAC_AD)
  @javax.annotation.Nullable
  private String xCaracAd;

  public static final String SERIALIZED_NAME_X_CARAC_SER = "xCaracSer";
  @SerializedName(SERIALIZED_NAME_X_CARAC_SER)
  @javax.annotation.Nullable
  private String xCaracSer;

  public static final String SERIALIZED_NAME_X_EMI = "xEmi";
  @SerializedName(SERIALIZED_NAME_X_EMI)
  @javax.annotation.Nullable
  private String xEmi;

  public static final String SERIALIZED_NAME_FLUXO = "fluxo";
  @SerializedName(SERIALIZED_NAME_FLUXO)
  @javax.annotation.Nullable
  private CteSefazFluxo fluxo;

  public static final String SERIALIZED_NAME_ENTREGA = "Entrega";
  @SerializedName(SERIALIZED_NAME_ENTREGA)
  @javax.annotation.Nullable
  private CteSefazEntrega entrega;

  public static final String SERIALIZED_NAME_ORIG_CALC = "origCalc";
  @SerializedName(SERIALIZED_NAME_ORIG_CALC)
  @javax.annotation.Nullable
  private String origCalc;

  public static final String SERIALIZED_NAME_DEST_CALC = "destCalc";
  @SerializedName(SERIALIZED_NAME_DEST_CALC)
  @javax.annotation.Nullable
  private String destCalc;

  public static final String SERIALIZED_NAME_X_OBS = "xObs";
  @SerializedName(SERIALIZED_NAME_X_OBS)
  @javax.annotation.Nullable
  private String xObs;

  public static final String SERIALIZED_NAME_OBS_CONT = "ObsCont";
  @SerializedName(SERIALIZED_NAME_OBS_CONT)
  @javax.annotation.Nullable
  private List<CteSefazObsCont> obsCont = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBS_FISCO = "ObsFisco";
  @SerializedName(SERIALIZED_NAME_OBS_FISCO)
  @javax.annotation.Nullable
  private List<CteSefazObsFisco> obsFisco = new ArrayList<>();

  public CteSefazCompl() {
  }

  public CteSefazCompl xCaracAd(@javax.annotation.Nullable String xCaracAd) {
    this.xCaracAd = xCaracAd;
    return this;
  }

  /**
   * Característica adicional do transporte.  Texto livre:  REENTREGA  DEVOLUÇÃO  REFATURAMENTO  etc.
   * @return xCaracAd
   */
  @javax.annotation.Nullable
  public String getxCaracAd() {
    return xCaracAd;
  }

  public void setxCaracAd(@javax.annotation.Nullable String xCaracAd) {
    this.xCaracAd = xCaracAd;
  }


  public CteSefazCompl xCaracSer(@javax.annotation.Nullable String xCaracSer) {
    this.xCaracSer = xCaracSer;
    return this;
  }

  /**
   * Característica adicional do serviço.  Texto livre:  ENTREGA EXPRESSA  LOGÍSTICA REVERSA  CONVENCIONAL  EMERGENCIAL  etc.
   * @return xCaracSer
   */
  @javax.annotation.Nullable
  public String getxCaracSer() {
    return xCaracSer;
  }

  public void setxCaracSer(@javax.annotation.Nullable String xCaracSer) {
    this.xCaracSer = xCaracSer;
  }


  public CteSefazCompl xEmi(@javax.annotation.Nullable String xEmi) {
    this.xEmi = xEmi;
    return this;
  }

  /**
   * Funcionário emissor do CTe.
   * @return xEmi
   */
  @javax.annotation.Nullable
  public String getxEmi() {
    return xEmi;
  }

  public void setxEmi(@javax.annotation.Nullable String xEmi) {
    this.xEmi = xEmi;
  }


  public CteSefazCompl fluxo(@javax.annotation.Nullable CteSefazFluxo fluxo) {
    this.fluxo = fluxo;
    return this;
  }

  /**
   * Get fluxo
   * @return fluxo
   */
  @javax.annotation.Nullable
  public CteSefazFluxo getFluxo() {
    return fluxo;
  }

  public void setFluxo(@javax.annotation.Nullable CteSefazFluxo fluxo) {
    this.fluxo = fluxo;
  }


  public CteSefazCompl entrega(@javax.annotation.Nullable CteSefazEntrega entrega) {
    this.entrega = entrega;
    return this;
  }

  /**
   * Get entrega
   * @return entrega
   */
  @javax.annotation.Nullable
  public CteSefazEntrega getEntrega() {
    return entrega;
  }

  public void setEntrega(@javax.annotation.Nullable CteSefazEntrega entrega) {
    this.entrega = entrega;
  }


  public CteSefazCompl origCalc(@javax.annotation.Nullable String origCalc) {
    this.origCalc = origCalc;
    return this;
  }

  /**
   * Município de origem para efeito de cálculo do frete.
   * @return origCalc
   */
  @javax.annotation.Nullable
  public String getOrigCalc() {
    return origCalc;
  }

  public void setOrigCalc(@javax.annotation.Nullable String origCalc) {
    this.origCalc = origCalc;
  }


  public CteSefazCompl destCalc(@javax.annotation.Nullable String destCalc) {
    this.destCalc = destCalc;
    return this;
  }

  /**
   * Município de destino para efeito de cálculo do frete.
   * @return destCalc
   */
  @javax.annotation.Nullable
  public String getDestCalc() {
    return destCalc;
  }

  public void setDestCalc(@javax.annotation.Nullable String destCalc) {
    this.destCalc = destCalc;
  }


  public CteSefazCompl xObs(@javax.annotation.Nullable String xObs) {
    this.xObs = xObs;
    return this;
  }

  /**
   * Observações Gerais.
   * @return xObs
   */
  @javax.annotation.Nullable
  public String getxObs() {
    return xObs;
  }

  public void setxObs(@javax.annotation.Nullable String xObs) {
    this.xObs = xObs;
  }


  public CteSefazCompl obsCont(@javax.annotation.Nullable List<CteSefazObsCont> obsCont) {
    this.obsCont = obsCont;
    return this;
  }

  public CteSefazCompl addObsContItem(CteSefazObsCont obsContItem) {
    if (this.obsCont == null) {
      this.obsCont = new ArrayList<>();
    }
    this.obsCont.add(obsContItem);
    return this;
  }

  /**
   * Get obsCont
   * @return obsCont
   */
  @javax.annotation.Nullable
  public List<CteSefazObsCont> getObsCont() {
    return obsCont;
  }

  public void setObsCont(@javax.annotation.Nullable List<CteSefazObsCont> obsCont) {
    this.obsCont = obsCont;
  }


  public CteSefazCompl obsFisco(@javax.annotation.Nullable List<CteSefazObsFisco> obsFisco) {
    this.obsFisco = obsFisco;
    return this;
  }

  public CteSefazCompl addObsFiscoItem(CteSefazObsFisco obsFiscoItem) {
    if (this.obsFisco == null) {
      this.obsFisco = new ArrayList<>();
    }
    this.obsFisco.add(obsFiscoItem);
    return this;
  }

  /**
   * Get obsFisco
   * @return obsFisco
   */
  @javax.annotation.Nullable
  public List<CteSefazObsFisco> getObsFisco() {
    return obsFisco;
  }

  public void setObsFisco(@javax.annotation.Nullable List<CteSefazObsFisco> obsFisco) {
    this.obsFisco = obsFisco;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazCompl cteSefazCompl = (CteSefazCompl) o;
    return Objects.equals(this.xCaracAd, cteSefazCompl.xCaracAd) &&
        Objects.equals(this.xCaracSer, cteSefazCompl.xCaracSer) &&
        Objects.equals(this.xEmi, cteSefazCompl.xEmi) &&
        Objects.equals(this.fluxo, cteSefazCompl.fluxo) &&
        Objects.equals(this.entrega, cteSefazCompl.entrega) &&
        Objects.equals(this.origCalc, cteSefazCompl.origCalc) &&
        Objects.equals(this.destCalc, cteSefazCompl.destCalc) &&
        Objects.equals(this.xObs, cteSefazCompl.xObs) &&
        Objects.equals(this.obsCont, cteSefazCompl.obsCont) &&
        Objects.equals(this.obsFisco, cteSefazCompl.obsFisco);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(xCaracAd, xCaracSer, xEmi, fluxo, entrega, origCalc, destCalc, xObs, obsCont, obsFisco);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazCompl {\n");
    sb.append("    xCaracAd: ").append(toIndentedString(xCaracAd)).append("\n");
    sb.append("    xCaracSer: ").append(toIndentedString(xCaracSer)).append("\n");
    sb.append("    xEmi: ").append(toIndentedString(xEmi)).append("\n");
    sb.append("    fluxo: ").append(toIndentedString(fluxo)).append("\n");
    sb.append("    entrega: ").append(toIndentedString(entrega)).append("\n");
    sb.append("    origCalc: ").append(toIndentedString(origCalc)).append("\n");
    sb.append("    destCalc: ").append(toIndentedString(destCalc)).append("\n");
    sb.append("    xObs: ").append(toIndentedString(xObs)).append("\n");
    sb.append("    obsCont: ").append(toIndentedString(obsCont)).append("\n");
    sb.append("    obsFisco: ").append(toIndentedString(obsFisco)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("xCaracAd");
    openapiFields.add("xCaracSer");
    openapiFields.add("xEmi");
    openapiFields.add("fluxo");
    openapiFields.add("Entrega");
    openapiFields.add("origCalc");
    openapiFields.add("destCalc");
    openapiFields.add("xObs");
    openapiFields.add("ObsCont");
    openapiFields.add("ObsFisco");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazCompl
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazCompl.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazCompl is not found in the empty JSON string", CteSefazCompl.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazCompl.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazCompl` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("xCaracAd") != null && !jsonObj.get("xCaracAd").isJsonNull()) && !jsonObj.get("xCaracAd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xCaracAd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xCaracAd").toString()));
      }
      if ((jsonObj.get("xCaracSer") != null && !jsonObj.get("xCaracSer").isJsonNull()) && !jsonObj.get("xCaracSer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xCaracSer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xCaracSer").toString()));
      }
      if ((jsonObj.get("xEmi") != null && !jsonObj.get("xEmi").isJsonNull()) && !jsonObj.get("xEmi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xEmi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xEmi").toString()));
      }
      // validate the optional field `fluxo`
      if (jsonObj.get("fluxo") != null && !jsonObj.get("fluxo").isJsonNull()) {
        CteSefazFluxo.validateJsonElement(jsonObj.get("fluxo"));
      }
      // validate the optional field `Entrega`
      if (jsonObj.get("Entrega") != null && !jsonObj.get("Entrega").isJsonNull()) {
        CteSefazEntrega.validateJsonElement(jsonObj.get("Entrega"));
      }
      if ((jsonObj.get("origCalc") != null && !jsonObj.get("origCalc").isJsonNull()) && !jsonObj.get("origCalc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origCalc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origCalc").toString()));
      }
      if ((jsonObj.get("destCalc") != null && !jsonObj.get("destCalc").isJsonNull()) && !jsonObj.get("destCalc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destCalc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destCalc").toString()));
      }
      if ((jsonObj.get("xObs") != null && !jsonObj.get("xObs").isJsonNull()) && !jsonObj.get("xObs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xObs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xObs").toString()));
      }
      if (jsonObj.get("ObsCont") != null && !jsonObj.get("ObsCont").isJsonNull()) {
        JsonArray jsonArrayobsCont = jsonObj.getAsJsonArray("ObsCont");
        if (jsonArrayobsCont != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ObsCont").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ObsCont` to be an array in the JSON string but got `%s`", jsonObj.get("ObsCont").toString()));
          }

          // validate the optional field `ObsCont` (array)
          for (int i = 0; i < jsonArrayobsCont.size(); i++) {
            CteSefazObsCont.validateJsonElement(jsonArrayobsCont.get(i));
          };
        }
      }
      if (jsonObj.get("ObsFisco") != null && !jsonObj.get("ObsFisco").isJsonNull()) {
        JsonArray jsonArrayobsFisco = jsonObj.getAsJsonArray("ObsFisco");
        if (jsonArrayobsFisco != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ObsFisco").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ObsFisco` to be an array in the JSON string but got `%s`", jsonObj.get("ObsFisco").toString()));
          }

          // validate the optional field `ObsFisco` (array)
          for (int i = 0; i < jsonArrayobsFisco.size(); i++) {
            CteSefazObsFisco.validateJsonElement(jsonArrayobsFisco.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazCompl.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazCompl' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazCompl> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazCompl.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazCompl>() {
           @Override
           public void write(JsonWriter out, CteSefazCompl value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazCompl read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazCompl given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazCompl
   * @throws IOException if the JSON string is invalid with respect to CteSefazCompl
   */
  public static CteSefazCompl fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazCompl.class);
  }

  /**
   * Convert an instance of CteSefazCompl to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

