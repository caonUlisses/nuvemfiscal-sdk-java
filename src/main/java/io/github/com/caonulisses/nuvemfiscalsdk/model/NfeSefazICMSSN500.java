/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Tributação do ICMS pelo SIMPLES NACIONAL,CRT&#x3D;1 - Simples Nacional e CSOSN&#x3D;500 (v.2.0).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazICMSSN500 {
  public static final String SERIALIZED_NAME_ORIG = "orig";
  @SerializedName(SERIALIZED_NAME_ORIG)
  @javax.annotation.Nullable
  private Integer orig;

  public static final String SERIALIZED_NAME_C_S_O_S_N = "CSOSN";
  @SerializedName(SERIALIZED_NAME_C_S_O_S_N)
  @javax.annotation.Nullable
  private String CSOSN;

  public static final String SERIALIZED_NAME_V_B_C_S_T_RET = "vBCSTRet";
  @SerializedName(SERIALIZED_NAME_V_B_C_S_T_RET)
  @javax.annotation.Nullable
  private BigDecimal vBCSTRet;

  public static final String SERIALIZED_NAME_P_S_T = "pST";
  @SerializedName(SERIALIZED_NAME_P_S_T)
  @javax.annotation.Nullable
  private BigDecimal pST;

  public static final String SERIALIZED_NAME_V_I_C_M_S_SUBSTITUTO = "vICMSSubstituto";
  @SerializedName(SERIALIZED_NAME_V_I_C_M_S_SUBSTITUTO)
  @javax.annotation.Nullable
  private BigDecimal vICMSSubstituto;

  public static final String SERIALIZED_NAME_V_I_C_M_S_S_T_RET = "vICMSSTRet";
  @SerializedName(SERIALIZED_NAME_V_I_C_M_S_S_T_RET)
  @javax.annotation.Nullable
  private BigDecimal vICMSSTRet;

  public static final String SERIALIZED_NAME_V_B_C_F_C_P_S_T_RET = "vBCFCPSTRet";
  @SerializedName(SERIALIZED_NAME_V_B_C_F_C_P_S_T_RET)
  @javax.annotation.Nullable
  private BigDecimal vBCFCPSTRet;

  public static final String SERIALIZED_NAME_P_F_C_P_S_T_RET = "pFCPSTRet";
  @SerializedName(SERIALIZED_NAME_P_F_C_P_S_T_RET)
  @javax.annotation.Nullable
  private BigDecimal pFCPSTRet;

  public static final String SERIALIZED_NAME_V_F_C_P_S_T_RET = "vFCPSTRet";
  @SerializedName(SERIALIZED_NAME_V_F_C_P_S_T_RET)
  @javax.annotation.Nullable
  private BigDecimal vFCPSTRet;

  public static final String SERIALIZED_NAME_P_RED_B_C_EFET = "pRedBCEfet";
  @SerializedName(SERIALIZED_NAME_P_RED_B_C_EFET)
  @javax.annotation.Nullable
  private BigDecimal pRedBCEfet;

  public static final String SERIALIZED_NAME_V_B_C_EFET = "vBCEfet";
  @SerializedName(SERIALIZED_NAME_V_B_C_EFET)
  @javax.annotation.Nullable
  private BigDecimal vBCEfet;

  public static final String SERIALIZED_NAME_P_I_C_M_S_EFET = "pICMSEfet";
  @SerializedName(SERIALIZED_NAME_P_I_C_M_S_EFET)
  @javax.annotation.Nullable
  private BigDecimal pICMSEfet;

  public static final String SERIALIZED_NAME_V_I_C_M_S_EFET = "vICMSEfet";
  @SerializedName(SERIALIZED_NAME_V_I_C_M_S_EFET)
  @javax.annotation.Nullable
  private BigDecimal vICMSEfet;

  public NfeSefazICMSSN500() {
  }

  public NfeSefazICMSSN500 orig(@javax.annotation.Nullable Integer orig) {
    this.orig = orig;
    return this;
  }

  /**
   * Origem da mercadoria:  * 0 - Nacional, exceto as indicadas nos códigos 3, 4, 5 e 8;  * 1 - Estrangeira - Importação direta, exceto a indicada no código 6;  * 2 - Estrangeira - Adquirida no mercado interno, exceto a indicada no código 7;  * 3 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 40%% e inferior ou igual a 70%%;  * 4 - Nacional, cuja produção tenha sido feita em conformidade com os processos produtivos básicos de que tratam as legislações citadas nos Ajustes;  * 5 - Nacional, mercadoria ou bem com Conteúdo de Importação inferior ou igual a 40%%;  * 6 - Estrangeira - Importação direta, sem similar nacional, constante em lista da CAMEX e gás natural;  * 7 - Estrangeira - Adquirida no mercado interno, sem similar nacional, constante lista CAMEX e gás natural;  * 8 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 70%%.
   * @return orig
   */
  @javax.annotation.Nullable
  public Integer getOrig() {
    return orig;
  }

  public void setOrig(@javax.annotation.Nullable Integer orig) {
    this.orig = orig;
  }


  public NfeSefazICMSSN500 CSOSN(@javax.annotation.Nullable String CSOSN) {
    this.CSOSN = CSOSN;
    return this;
  }

  /**
   * * 500 - ICMS cobrado anterirmente por substituição tributária (substituído) ou por antecipação  (v.2.0).
   * @return CSOSN
   */
  @javax.annotation.Nullable
  public String getCSOSN() {
    return CSOSN;
  }

  public void setCSOSN(@javax.annotation.Nullable String CSOSN) {
    this.CSOSN = CSOSN;
  }


  public NfeSefazICMSSN500 vBCSTRet(@javax.annotation.Nullable BigDecimal vBCSTRet) {
    this.vBCSTRet = vBCSTRet;
    return this;
  }

  /**
   * Valor da BC do ICMS ST retido anteriormente (v2.0).
   * minimum: 0
   * @return vBCSTRet
   */
  @javax.annotation.Nullable
  public BigDecimal getvBCSTRet() {
    return vBCSTRet;
  }

  public void setvBCSTRet(@javax.annotation.Nullable BigDecimal vBCSTRet) {
    this.vBCSTRet = vBCSTRet;
  }


  public NfeSefazICMSSN500 pST(@javax.annotation.Nullable BigDecimal pST) {
    this.pST = pST;
    return this;
  }

  /**
   * Aliquota suportada pelo consumidor final.
   * minimum: 0
   * @return pST
   */
  @javax.annotation.Nullable
  public BigDecimal getpST() {
    return pST;
  }

  public void setpST(@javax.annotation.Nullable BigDecimal pST) {
    this.pST = pST;
  }


  public NfeSefazICMSSN500 vICMSSubstituto(@javax.annotation.Nullable BigDecimal vICMSSubstituto) {
    this.vICMSSubstituto = vICMSSubstituto;
    return this;
  }

  /**
   * Valor do ICMS próprio do substituto.
   * minimum: 0
   * @return vICMSSubstituto
   */
  @javax.annotation.Nullable
  public BigDecimal getvICMSSubstituto() {
    return vICMSSubstituto;
  }

  public void setvICMSSubstituto(@javax.annotation.Nullable BigDecimal vICMSSubstituto) {
    this.vICMSSubstituto = vICMSSubstituto;
  }


  public NfeSefazICMSSN500 vICMSSTRet(@javax.annotation.Nullable BigDecimal vICMSSTRet) {
    this.vICMSSTRet = vICMSSTRet;
    return this;
  }

  /**
   * Valor do ICMS ST retido anteriormente  (v2.0).
   * minimum: 0
   * @return vICMSSTRet
   */
  @javax.annotation.Nullable
  public BigDecimal getvICMSSTRet() {
    return vICMSSTRet;
  }

  public void setvICMSSTRet(@javax.annotation.Nullable BigDecimal vICMSSTRet) {
    this.vICMSSTRet = vICMSSTRet;
  }


  public NfeSefazICMSSN500 vBCFCPSTRet(@javax.annotation.Nullable BigDecimal vBCFCPSTRet) {
    this.vBCFCPSTRet = vBCFCPSTRet;
    return this;
  }

  /**
   * Valor da Base de cálculo do FCP retido anteriormente.
   * minimum: 0
   * @return vBCFCPSTRet
   */
  @javax.annotation.Nullable
  public BigDecimal getvBCFCPSTRet() {
    return vBCFCPSTRet;
  }

  public void setvBCFCPSTRet(@javax.annotation.Nullable BigDecimal vBCFCPSTRet) {
    this.vBCFCPSTRet = vBCFCPSTRet;
  }


  public NfeSefazICMSSN500 pFCPSTRet(@javax.annotation.Nullable BigDecimal pFCPSTRet) {
    this.pFCPSTRet = pFCPSTRet;
    return this;
  }

  /**
   * Percentual de FCP retido anteriormente por substituição tributária.
   * minimum: 0
   * @return pFCPSTRet
   */
  @javax.annotation.Nullable
  public BigDecimal getpFCPSTRet() {
    return pFCPSTRet;
  }

  public void setpFCPSTRet(@javax.annotation.Nullable BigDecimal pFCPSTRet) {
    this.pFCPSTRet = pFCPSTRet;
  }


  public NfeSefazICMSSN500 vFCPSTRet(@javax.annotation.Nullable BigDecimal vFCPSTRet) {
    this.vFCPSTRet = vFCPSTRet;
    return this;
  }

  /**
   * Valor do FCP retido por substituição tributária.
   * minimum: 0
   * @return vFCPSTRet
   */
  @javax.annotation.Nullable
  public BigDecimal getvFCPSTRet() {
    return vFCPSTRet;
  }

  public void setvFCPSTRet(@javax.annotation.Nullable BigDecimal vFCPSTRet) {
    this.vFCPSTRet = vFCPSTRet;
  }


  public NfeSefazICMSSN500 pRedBCEfet(@javax.annotation.Nullable BigDecimal pRedBCEfet) {
    this.pRedBCEfet = pRedBCEfet;
    return this;
  }

  /**
   * Percentual de redução da base de cálculo efetiva.
   * minimum: 0
   * @return pRedBCEfet
   */
  @javax.annotation.Nullable
  public BigDecimal getpRedBCEfet() {
    return pRedBCEfet;
  }

  public void setpRedBCEfet(@javax.annotation.Nullable BigDecimal pRedBCEfet) {
    this.pRedBCEfet = pRedBCEfet;
  }


  public NfeSefazICMSSN500 vBCEfet(@javax.annotation.Nullable BigDecimal vBCEfet) {
    this.vBCEfet = vBCEfet;
    return this;
  }

  /**
   * Valor da base de cálculo efetiva.
   * minimum: 0
   * @return vBCEfet
   */
  @javax.annotation.Nullable
  public BigDecimal getvBCEfet() {
    return vBCEfet;
  }

  public void setvBCEfet(@javax.annotation.Nullable BigDecimal vBCEfet) {
    this.vBCEfet = vBCEfet;
  }


  public NfeSefazICMSSN500 pICMSEfet(@javax.annotation.Nullable BigDecimal pICMSEfet) {
    this.pICMSEfet = pICMSEfet;
    return this;
  }

  /**
   * Alíquota do ICMS efetiva.
   * minimum: 0
   * @return pICMSEfet
   */
  @javax.annotation.Nullable
  public BigDecimal getpICMSEfet() {
    return pICMSEfet;
  }

  public void setpICMSEfet(@javax.annotation.Nullable BigDecimal pICMSEfet) {
    this.pICMSEfet = pICMSEfet;
  }


  public NfeSefazICMSSN500 vICMSEfet(@javax.annotation.Nullable BigDecimal vICMSEfet) {
    this.vICMSEfet = vICMSEfet;
    return this;
  }

  /**
   * Valor do ICMS efetivo.
   * minimum: 0
   * @return vICMSEfet
   */
  @javax.annotation.Nullable
  public BigDecimal getvICMSEfet() {
    return vICMSEfet;
  }

  public void setvICMSEfet(@javax.annotation.Nullable BigDecimal vICMSEfet) {
    this.vICMSEfet = vICMSEfet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazICMSSN500 nfeSefazICMSSN500 = (NfeSefazICMSSN500) o;
    return Objects.equals(this.orig, nfeSefazICMSSN500.orig) &&
        Objects.equals(this.CSOSN, nfeSefazICMSSN500.CSOSN) &&
        Objects.equals(this.vBCSTRet, nfeSefazICMSSN500.vBCSTRet) &&
        Objects.equals(this.pST, nfeSefazICMSSN500.pST) &&
        Objects.equals(this.vICMSSubstituto, nfeSefazICMSSN500.vICMSSubstituto) &&
        Objects.equals(this.vICMSSTRet, nfeSefazICMSSN500.vICMSSTRet) &&
        Objects.equals(this.vBCFCPSTRet, nfeSefazICMSSN500.vBCFCPSTRet) &&
        Objects.equals(this.pFCPSTRet, nfeSefazICMSSN500.pFCPSTRet) &&
        Objects.equals(this.vFCPSTRet, nfeSefazICMSSN500.vFCPSTRet) &&
        Objects.equals(this.pRedBCEfet, nfeSefazICMSSN500.pRedBCEfet) &&
        Objects.equals(this.vBCEfet, nfeSefazICMSSN500.vBCEfet) &&
        Objects.equals(this.pICMSEfet, nfeSefazICMSSN500.pICMSEfet) &&
        Objects.equals(this.vICMSEfet, nfeSefazICMSSN500.vICMSEfet);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(orig, CSOSN, vBCSTRet, pST, vICMSSubstituto, vICMSSTRet, vBCFCPSTRet, pFCPSTRet, vFCPSTRet, pRedBCEfet, vBCEfet, pICMSEfet, vICMSEfet);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazICMSSN500 {\n");
    sb.append("    orig: ").append(toIndentedString(orig)).append("\n");
    sb.append("    CSOSN: ").append(toIndentedString(CSOSN)).append("\n");
    sb.append("    vBCSTRet: ").append(toIndentedString(vBCSTRet)).append("\n");
    sb.append("    pST: ").append(toIndentedString(pST)).append("\n");
    sb.append("    vICMSSubstituto: ").append(toIndentedString(vICMSSubstituto)).append("\n");
    sb.append("    vICMSSTRet: ").append(toIndentedString(vICMSSTRet)).append("\n");
    sb.append("    vBCFCPSTRet: ").append(toIndentedString(vBCFCPSTRet)).append("\n");
    sb.append("    pFCPSTRet: ").append(toIndentedString(pFCPSTRet)).append("\n");
    sb.append("    vFCPSTRet: ").append(toIndentedString(vFCPSTRet)).append("\n");
    sb.append("    pRedBCEfet: ").append(toIndentedString(pRedBCEfet)).append("\n");
    sb.append("    vBCEfet: ").append(toIndentedString(vBCEfet)).append("\n");
    sb.append("    pICMSEfet: ").append(toIndentedString(pICMSEfet)).append("\n");
    sb.append("    vICMSEfet: ").append(toIndentedString(vICMSEfet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orig");
    openapiFields.add("CSOSN");
    openapiFields.add("vBCSTRet");
    openapiFields.add("pST");
    openapiFields.add("vICMSSubstituto");
    openapiFields.add("vICMSSTRet");
    openapiFields.add("vBCFCPSTRet");
    openapiFields.add("pFCPSTRet");
    openapiFields.add("vFCPSTRet");
    openapiFields.add("pRedBCEfet");
    openapiFields.add("vBCEfet");
    openapiFields.add("pICMSEfet");
    openapiFields.add("vICMSEfet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("orig");
    openapiRequiredFields.add("CSOSN");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazICMSSN500
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazICMSSN500.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazICMSSN500 is not found in the empty JSON string", NfeSefazICMSSN500.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazICMSSN500.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazICMSSN500` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfeSefazICMSSN500.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CSOSN") != null && !jsonObj.get("CSOSN").isJsonNull()) && !jsonObj.get("CSOSN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CSOSN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CSOSN").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazICMSSN500.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazICMSSN500' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazICMSSN500> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazICMSSN500.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazICMSSN500>() {
           @Override
           public void write(JsonWriter out, NfeSefazICMSSN500 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazICMSSN500 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazICMSSN500 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazICMSSN500
   * @throws IOException if the JSON string is invalid with respect to NfeSefazICMSSN500
   */
  public static NfeSefazICMSSN500 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazICMSSN500.class);
  }

  /**
   * Convert an instance of NfeSefazICMSSN500 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

