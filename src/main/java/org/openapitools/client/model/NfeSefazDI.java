/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NfeSefazAdi;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Delcaração de Importação  (NT 2011/004).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazDI {
  public static final String SERIALIZED_NAME_N_D_I = "nDI";
  @SerializedName(SERIALIZED_NAME_N_D_I)
  @javax.annotation.Nullable
  private String nDI;

  public static final String SERIALIZED_NAME_D_D_I = "dDI";
  @SerializedName(SERIALIZED_NAME_D_D_I)
  @javax.annotation.Nullable
  private LocalDate dDI;

  public static final String SERIALIZED_NAME_X_LOC_DESEMB = "xLocDesemb";
  @SerializedName(SERIALIZED_NAME_X_LOC_DESEMB)
  @javax.annotation.Nullable
  private String xLocDesemb;

  public static final String SERIALIZED_NAME_UF_DESEMB = "UFDesemb";
  @SerializedName(SERIALIZED_NAME_UF_DESEMB)
  @javax.annotation.Nullable
  private String ufDesemb;

  public static final String SERIALIZED_NAME_D_DESEMB = "dDesemb";
  @SerializedName(SERIALIZED_NAME_D_DESEMB)
  @javax.annotation.Nullable
  private LocalDate dDesemb;

  public static final String SERIALIZED_NAME_TP_VIA_TRANSP = "tpViaTransp";
  @SerializedName(SERIALIZED_NAME_TP_VIA_TRANSP)
  @javax.annotation.Nullable
  private Integer tpViaTransp;

  public static final String SERIALIZED_NAME_V_A_F_R_M_M = "vAFRMM";
  @SerializedName(SERIALIZED_NAME_V_A_F_R_M_M)
  @javax.annotation.Nullable
  private BigDecimal vAFRMM;

  public static final String SERIALIZED_NAME_TP_INTERMEDIO = "tpIntermedio";
  @SerializedName(SERIALIZED_NAME_TP_INTERMEDIO)
  @javax.annotation.Nullable
  private Integer tpIntermedio;

  public static final String SERIALIZED_NAME_C_N_P_J = "CNPJ";
  @SerializedName(SERIALIZED_NAME_C_N_P_J)
  @javax.annotation.Nullable
  private String CNPJ;

  public static final String SERIALIZED_NAME_C_P_F = "CPF";
  @SerializedName(SERIALIZED_NAME_C_P_F)
  @javax.annotation.Nullable
  private String CPF;

  public static final String SERIALIZED_NAME_UF_TERCEIRO = "UFTerceiro";
  @SerializedName(SERIALIZED_NAME_UF_TERCEIRO)
  @javax.annotation.Nullable
  private String ufTerceiro;

  public static final String SERIALIZED_NAME_C_EXPORTADOR = "cExportador";
  @SerializedName(SERIALIZED_NAME_C_EXPORTADOR)
  @javax.annotation.Nullable
  private String cExportador;

  public static final String SERIALIZED_NAME_ADI = "adi";
  @SerializedName(SERIALIZED_NAME_ADI)
  @javax.annotation.Nonnull
  private List<NfeSefazAdi> adi = new ArrayList<>();

  public NfeSefazDI() {
  }

  public NfeSefazDI nDI(@javax.annotation.Nullable String nDI) {
    this.nDI = nDI;
    return this;
  }

  /**
   * Número do Documento de Importação (DI, DSI, DIRE, DUImp) (NT2011/004).
   * @return nDI
   */
  @javax.annotation.Nullable
  public String getnDI() {
    return nDI;
  }

  public void setnDI(@javax.annotation.Nullable String nDI) {
    this.nDI = nDI;
  }


  public NfeSefazDI dDI(@javax.annotation.Nullable LocalDate dDI) {
    this.dDI = dDI;
    return this;
  }

  /**
   * Data de registro da DI/DSI/DA (AAAA-MM-DD).
   * @return dDI
   */
  @javax.annotation.Nullable
  public LocalDate getdDI() {
    return dDI;
  }

  public void setdDI(@javax.annotation.Nullable LocalDate dDI) {
    this.dDI = dDI;
  }


  public NfeSefazDI xLocDesemb(@javax.annotation.Nullable String xLocDesemb) {
    this.xLocDesemb = xLocDesemb;
    return this;
  }

  /**
   * Local do desembaraço aduaneiro.
   * @return xLocDesemb
   */
  @javax.annotation.Nullable
  public String getxLocDesemb() {
    return xLocDesemb;
  }

  public void setxLocDesemb(@javax.annotation.Nullable String xLocDesemb) {
    this.xLocDesemb = xLocDesemb;
  }


  public NfeSefazDI ufDesemb(@javax.annotation.Nullable String ufDesemb) {
    this.ufDesemb = ufDesemb;
    return this;
  }

  /**
   * UF onde ocorreu o desembaraço aduaneiro.
   * @return ufDesemb
   */
  @javax.annotation.Nullable
  public String getUfDesemb() {
    return ufDesemb;
  }

  public void setUfDesemb(@javax.annotation.Nullable String ufDesemb) {
    this.ufDesemb = ufDesemb;
  }


  public NfeSefazDI dDesemb(@javax.annotation.Nullable LocalDate dDesemb) {
    this.dDesemb = dDesemb;
    return this;
  }

  /**
   * Data do desembaraço aduaneiro (AAAA-MM-DD).
   * @return dDesemb
   */
  @javax.annotation.Nullable
  public LocalDate getdDesemb() {
    return dDesemb;
  }

  public void setdDesemb(@javax.annotation.Nullable LocalDate dDesemb) {
    this.dDesemb = dDesemb;
  }


  public NfeSefazDI tpViaTransp(@javax.annotation.Nullable Integer tpViaTransp) {
    this.tpViaTransp = tpViaTransp;
    return this;
  }

  /**
   * Via de transporte internacional informada na DI ou na Declaração Única de Importação (DUImp):  * 1 - Maritima  * 2 - Fluvial  * 3 - Lacustre  * 4 - Aerea  * 5 - Postal  * 6 - Ferroviaria  * 7 - Rodoviaria  * 8 - Conduto  * 9 - Meios Proprios  * 10 - Entrada/Saida Ficta  * 11 - Courier  * 12 - Em maos  * 13 - Por reboque
   * @return tpViaTransp
   */
  @javax.annotation.Nullable
  public Integer getTpViaTransp() {
    return tpViaTransp;
  }

  public void setTpViaTransp(@javax.annotation.Nullable Integer tpViaTransp) {
    this.tpViaTransp = tpViaTransp;
  }


  public NfeSefazDI vAFRMM(@javax.annotation.Nullable BigDecimal vAFRMM) {
    this.vAFRMM = vAFRMM;
    return this;
  }

  /**
   * Valor Adicional ao frete para renovação de marinha mercante.
   * minimum: 0
   * @return vAFRMM
   */
  @javax.annotation.Nullable
  public BigDecimal getvAFRMM() {
    return vAFRMM;
  }

  public void setvAFRMM(@javax.annotation.Nullable BigDecimal vAFRMM) {
    this.vAFRMM = vAFRMM;
  }


  public NfeSefazDI tpIntermedio(@javax.annotation.Nullable Integer tpIntermedio) {
    this.tpIntermedio = tpIntermedio;
    return this;
  }

  /**
   * Forma de Importação quanto a intermediação  * 1 - por conta propria  * 2 - por conta e ordem  * 3 - encomenda
   * @return tpIntermedio
   */
  @javax.annotation.Nullable
  public Integer getTpIntermedio() {
    return tpIntermedio;
  }

  public void setTpIntermedio(@javax.annotation.Nullable Integer tpIntermedio) {
    this.tpIntermedio = tpIntermedio;
  }


  public NfeSefazDI CNPJ(@javax.annotation.Nullable String CNPJ) {
    this.CNPJ = CNPJ;
    return this;
  }

  /**
   * CNPJ do adquirente ou do encomendante.
   * @return CNPJ
   */
  @javax.annotation.Nullable
  public String getCNPJ() {
    return CNPJ;
  }

  public void setCNPJ(@javax.annotation.Nullable String CNPJ) {
    this.CNPJ = CNPJ;
  }


  public NfeSefazDI CPF(@javax.annotation.Nullable String CPF) {
    this.CPF = CPF;
    return this;
  }

  /**
   * CPF do adquirente ou do encomendante.
   * @return CPF
   */
  @javax.annotation.Nullable
  public String getCPF() {
    return CPF;
  }

  public void setCPF(@javax.annotation.Nullable String CPF) {
    this.CPF = CPF;
  }


  public NfeSefazDI ufTerceiro(@javax.annotation.Nullable String ufTerceiro) {
    this.ufTerceiro = ufTerceiro;
    return this;
  }

  /**
   * Sigla da UF do adquirente ou do encomendante.
   * @return ufTerceiro
   */
  @javax.annotation.Nullable
  public String getUfTerceiro() {
    return ufTerceiro;
  }

  public void setUfTerceiro(@javax.annotation.Nullable String ufTerceiro) {
    this.ufTerceiro = ufTerceiro;
  }


  public NfeSefazDI cExportador(@javax.annotation.Nullable String cExportador) {
    this.cExportador = cExportador;
    return this;
  }

  /**
   * Código do exportador (usado nos sistemas internos de informação do emitente da NF-e).
   * @return cExportador
   */
  @javax.annotation.Nullable
  public String getcExportador() {
    return cExportador;
  }

  public void setcExportador(@javax.annotation.Nullable String cExportador) {
    this.cExportador = cExportador;
  }


  public NfeSefazDI adi(@javax.annotation.Nonnull List<NfeSefazAdi> adi) {
    this.adi = adi;
    return this;
  }

  public NfeSefazDI addAdiItem(NfeSefazAdi adiItem) {
    if (this.adi == null) {
      this.adi = new ArrayList<>();
    }
    this.adi.add(adiItem);
    return this;
  }

  /**
   * Get adi
   * @return adi
   */
  @javax.annotation.Nonnull
  public List<NfeSefazAdi> getAdi() {
    return adi;
  }

  public void setAdi(@javax.annotation.Nonnull List<NfeSefazAdi> adi) {
    this.adi = adi;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazDI nfeSefazDI = (NfeSefazDI) o;
    return Objects.equals(this.nDI, nfeSefazDI.nDI) &&
        Objects.equals(this.dDI, nfeSefazDI.dDI) &&
        Objects.equals(this.xLocDesemb, nfeSefazDI.xLocDesemb) &&
        Objects.equals(this.ufDesemb, nfeSefazDI.ufDesemb) &&
        Objects.equals(this.dDesemb, nfeSefazDI.dDesemb) &&
        Objects.equals(this.tpViaTransp, nfeSefazDI.tpViaTransp) &&
        Objects.equals(this.vAFRMM, nfeSefazDI.vAFRMM) &&
        Objects.equals(this.tpIntermedio, nfeSefazDI.tpIntermedio) &&
        Objects.equals(this.CNPJ, nfeSefazDI.CNPJ) &&
        Objects.equals(this.CPF, nfeSefazDI.CPF) &&
        Objects.equals(this.ufTerceiro, nfeSefazDI.ufTerceiro) &&
        Objects.equals(this.cExportador, nfeSefazDI.cExportador) &&
        Objects.equals(this.adi, nfeSefazDI.adi);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(nDI, dDI, xLocDesemb, ufDesemb, dDesemb, tpViaTransp, vAFRMM, tpIntermedio, CNPJ, CPF, ufTerceiro, cExportador, adi);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazDI {\n");
    sb.append("    nDI: ").append(toIndentedString(nDI)).append("\n");
    sb.append("    dDI: ").append(toIndentedString(dDI)).append("\n");
    sb.append("    xLocDesemb: ").append(toIndentedString(xLocDesemb)).append("\n");
    sb.append("    ufDesemb: ").append(toIndentedString(ufDesemb)).append("\n");
    sb.append("    dDesemb: ").append(toIndentedString(dDesemb)).append("\n");
    sb.append("    tpViaTransp: ").append(toIndentedString(tpViaTransp)).append("\n");
    sb.append("    vAFRMM: ").append(toIndentedString(vAFRMM)).append("\n");
    sb.append("    tpIntermedio: ").append(toIndentedString(tpIntermedio)).append("\n");
    sb.append("    CNPJ: ").append(toIndentedString(CNPJ)).append("\n");
    sb.append("    CPF: ").append(toIndentedString(CPF)).append("\n");
    sb.append("    ufTerceiro: ").append(toIndentedString(ufTerceiro)).append("\n");
    sb.append("    cExportador: ").append(toIndentedString(cExportador)).append("\n");
    sb.append("    adi: ").append(toIndentedString(adi)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nDI");
    openapiFields.add("dDI");
    openapiFields.add("xLocDesemb");
    openapiFields.add("UFDesemb");
    openapiFields.add("dDesemb");
    openapiFields.add("tpViaTransp");
    openapiFields.add("vAFRMM");
    openapiFields.add("tpIntermedio");
    openapiFields.add("CNPJ");
    openapiFields.add("CPF");
    openapiFields.add("UFTerceiro");
    openapiFields.add("cExportador");
    openapiFields.add("adi");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nDI");
    openapiRequiredFields.add("dDI");
    openapiRequiredFields.add("xLocDesemb");
    openapiRequiredFields.add("UFDesemb");
    openapiRequiredFields.add("dDesemb");
    openapiRequiredFields.add("tpViaTransp");
    openapiRequiredFields.add("tpIntermedio");
    openapiRequiredFields.add("cExportador");
    openapiRequiredFields.add("adi");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazDI
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazDI.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazDI is not found in the empty JSON string", NfeSefazDI.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazDI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazDI` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfeSefazDI.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nDI") != null && !jsonObj.get("nDI").isJsonNull()) && !jsonObj.get("nDI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nDI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nDI").toString()));
      }
      if ((jsonObj.get("xLocDesemb") != null && !jsonObj.get("xLocDesemb").isJsonNull()) && !jsonObj.get("xLocDesemb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xLocDesemb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xLocDesemb").toString()));
      }
      if ((jsonObj.get("UFDesemb") != null && !jsonObj.get("UFDesemb").isJsonNull()) && !jsonObj.get("UFDesemb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UFDesemb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UFDesemb").toString()));
      }
      if ((jsonObj.get("CNPJ") != null && !jsonObj.get("CNPJ").isJsonNull()) && !jsonObj.get("CNPJ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CNPJ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CNPJ").toString()));
      }
      if ((jsonObj.get("CPF") != null && !jsonObj.get("CPF").isJsonNull()) && !jsonObj.get("CPF").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CPF` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CPF").toString()));
      }
      if ((jsonObj.get("UFTerceiro") != null && !jsonObj.get("UFTerceiro").isJsonNull()) && !jsonObj.get("UFTerceiro").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UFTerceiro` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UFTerceiro").toString()));
      }
      if ((jsonObj.get("cExportador") != null && !jsonObj.get("cExportador").isJsonNull()) && !jsonObj.get("cExportador").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cExportador` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cExportador").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("adi").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `adi` to be an array in the JSON string but got `%s`", jsonObj.get("adi").toString()));
      }

      JsonArray jsonArrayadi = jsonObj.getAsJsonArray("adi");
      // validate the required field `adi` (array)
      for (int i = 0; i < jsonArrayadi.size(); i++) {
        NfeSefazAdi.validateJsonElement(jsonArrayadi.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazDI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazDI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazDI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazDI.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazDI>() {
           @Override
           public void write(JsonWriter out, NfeSefazDI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazDI read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazDI given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazDI
   * @throws IOException if the JSON string is invalid with respect to NfeSefazDI
   */
  public static NfeSefazDI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazDI.class);
  }

  /**
   * Convert an instance of NfeSefazDI to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

