/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import io.github.com.caonulisses.nuvemfiscalsdk.model.Endereco;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Grupo de informações do DPS relativas ao Tomador de Serviços.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class InfoTomador {
  public static final String SERIALIZED_NAME_ORGAO_PUBLICO = "orgaoPublico";
  @SerializedName(SERIALIZED_NAME_ORGAO_PUBLICO)
  @javax.annotation.Nullable
  private Boolean orgaoPublico = false;

  public static final String SERIALIZED_NAME_C_N_P_J = "CNPJ";
  @SerializedName(SERIALIZED_NAME_C_N_P_J)
  @javax.annotation.Nullable
  private String CNPJ;

  public static final String SERIALIZED_NAME_C_P_F = "CPF";
  @SerializedName(SERIALIZED_NAME_C_P_F)
  @javax.annotation.Nullable
  private String CPF;

  public static final String SERIALIZED_NAME_N_I_F = "NIF";
  @SerializedName(SERIALIZED_NAME_N_I_F)
  @javax.annotation.Nullable
  private String NIF;

  public static final String SERIALIZED_NAME_C_NAO_N_I_F = "cNaoNIF";
  @SerializedName(SERIALIZED_NAME_C_NAO_N_I_F)
  @javax.annotation.Nullable
  private Integer cNaoNIF;

  public static final String SERIALIZED_NAME_C_A_E_P_F = "CAEPF";
  @SerializedName(SERIALIZED_NAME_C_A_E_P_F)
  @javax.annotation.Nullable
  private String CAEPF;

  public static final String SERIALIZED_NAME_I_M = "IM";
  @SerializedName(SERIALIZED_NAME_I_M)
  @javax.annotation.Nullable
  private String IM;

  public static final String SERIALIZED_NAME_X_NOME = "xNome";
  @SerializedName(SERIALIZED_NAME_X_NOME)
  @javax.annotation.Nullable
  private String xNome;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  @javax.annotation.Nullable
  private Endereco end;

  public static final String SERIALIZED_NAME_FONE = "fone";
  @SerializedName(SERIALIZED_NAME_FONE)
  @javax.annotation.Nullable
  private String fone;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public InfoTomador() {
  }

  public InfoTomador orgaoPublico(@javax.annotation.Nullable Boolean orgaoPublico) {
    this.orgaoPublico = orgaoPublico;
    return this;
  }

  /**
   * Indica se o tomador do serviço é um orgão público.    **Atenção**: Para emissões pelo Sistema Nacional NFS-e, esse campo é ignorado.
   * @return orgaoPublico
   */
  @javax.annotation.Nullable
  public Boolean getOrgaoPublico() {
    return orgaoPublico;
  }

  public void setOrgaoPublico(@javax.annotation.Nullable Boolean orgaoPublico) {
    this.orgaoPublico = orgaoPublico;
  }


  public InfoTomador CNPJ(@javax.annotation.Nullable String CNPJ) {
    this.CNPJ = CNPJ;
    return this;
  }

  /**
   * Número do CNPJ.
   * @return CNPJ
   */
  @javax.annotation.Nullable
  public String getCNPJ() {
    return CNPJ;
  }

  public void setCNPJ(@javax.annotation.Nullable String CNPJ) {
    this.CNPJ = CNPJ;
  }


  public InfoTomador CPF(@javax.annotation.Nullable String CPF) {
    this.CPF = CPF;
    return this;
  }

  /**
   * Número do CPF.
   * @return CPF
   */
  @javax.annotation.Nullable
  public String getCPF() {
    return CPF;
  }

  public void setCPF(@javax.annotation.Nullable String CPF) {
    this.CPF = CPF;
  }


  public InfoTomador NIF(@javax.annotation.Nullable String NIF) {
    this.NIF = NIF;
    return this;
  }

  /**
   * Número de Identificação Fiscal fornecido por órgão de administração tributária no exterior.
   * @return NIF
   */
  @javax.annotation.Nullable
  public String getNIF() {
    return NIF;
  }

  public void setNIF(@javax.annotation.Nullable String NIF) {
    this.NIF = NIF;
  }


  public InfoTomador cNaoNIF(@javax.annotation.Nullable Integer cNaoNIF) {
    this.cNaoNIF = cNaoNIF;
    return this;
  }

  /**
   * Motivo para não informação do NIF:  * 0 - Não informado na nota de origem  * 1 - Dispensado do NIF  * 2 - Não exigência do NIF
   * @return cNaoNIF
   */
  @javax.annotation.Nullable
  public Integer getcNaoNIF() {
    return cNaoNIF;
  }

  public void setcNaoNIF(@javax.annotation.Nullable Integer cNaoNIF) {
    this.cNaoNIF = cNaoNIF;
  }


  public InfoTomador CAEPF(@javax.annotation.Nullable String CAEPF) {
    this.CAEPF = CAEPF;
    return this;
  }

  /**
   * Número do Cadastro de Atividade Econômica da Pessoa Física (CAEPF).
   * @return CAEPF
   */
  @javax.annotation.Nullable
  public String getCAEPF() {
    return CAEPF;
  }

  public void setCAEPF(@javax.annotation.Nullable String CAEPF) {
    this.CAEPF = CAEPF;
  }


  public InfoTomador IM(@javax.annotation.Nullable String IM) {
    this.IM = IM;
    return this;
  }

  /**
   * Número da inscrição municipal.
   * @return IM
   */
  @javax.annotation.Nullable
  public String getIM() {
    return IM;
  }

  public void setIM(@javax.annotation.Nullable String IM) {
    this.IM = IM;
  }


  public InfoTomador xNome(@javax.annotation.Nullable String xNome) {
    this.xNome = xNome;
    return this;
  }

  /**
   * Nome/Nome Empresarial.
   * @return xNome
   */
  @javax.annotation.Nullable
  public String getxNome() {
    return xNome;
  }

  public void setxNome(@javax.annotation.Nullable String xNome) {
    this.xNome = xNome;
  }


  public InfoTomador end(@javax.annotation.Nullable Endereco end) {
    this.end = end;
    return this;
  }

  /**
   * Get end
   * @return end
   */
  @javax.annotation.Nullable
  public Endereco getEnd() {
    return end;
  }

  public void setEnd(@javax.annotation.Nullable Endereco end) {
    this.end = end;
  }


  public InfoTomador fone(@javax.annotation.Nullable String fone) {
    this.fone = fone;
    return this;
  }

  /**
   * Número do telefone do prestador:  Preencher com o Código DDD + número do telefone.  Nas operações com exterior é permitido informar o código do país + código da localidade + número do telefone).
   * @return fone
   */
  @javax.annotation.Nullable
  public String getFone() {
    return fone;
  }

  public void setFone(@javax.annotation.Nullable String fone) {
    this.fone = fone;
  }


  public InfoTomador email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * * E-mail
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfoTomador infoTomador = (InfoTomador) o;
    return Objects.equals(this.orgaoPublico, infoTomador.orgaoPublico) &&
        Objects.equals(this.CNPJ, infoTomador.CNPJ) &&
        Objects.equals(this.CPF, infoTomador.CPF) &&
        Objects.equals(this.NIF, infoTomador.NIF) &&
        Objects.equals(this.cNaoNIF, infoTomador.cNaoNIF) &&
        Objects.equals(this.CAEPF, infoTomador.CAEPF) &&
        Objects.equals(this.IM, infoTomador.IM) &&
        Objects.equals(this.xNome, infoTomador.xNome) &&
        Objects.equals(this.end, infoTomador.end) &&
        Objects.equals(this.fone, infoTomador.fone) &&
        Objects.equals(this.email, infoTomador.email);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(orgaoPublico, CNPJ, CPF, NIF, cNaoNIF, CAEPF, IM, xNome, end, fone, email);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfoTomador {\n");
    sb.append("    orgaoPublico: ").append(toIndentedString(orgaoPublico)).append("\n");
    sb.append("    CNPJ: ").append(toIndentedString(CNPJ)).append("\n");
    sb.append("    CPF: ").append(toIndentedString(CPF)).append("\n");
    sb.append("    NIF: ").append(toIndentedString(NIF)).append("\n");
    sb.append("    cNaoNIF: ").append(toIndentedString(cNaoNIF)).append("\n");
    sb.append("    CAEPF: ").append(toIndentedString(CAEPF)).append("\n");
    sb.append("    IM: ").append(toIndentedString(IM)).append("\n");
    sb.append("    xNome: ").append(toIndentedString(xNome)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    fone: ").append(toIndentedString(fone)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orgaoPublico");
    openapiFields.add("CNPJ");
    openapiFields.add("CPF");
    openapiFields.add("NIF");
    openapiFields.add("cNaoNIF");
    openapiFields.add("CAEPF");
    openapiFields.add("IM");
    openapiFields.add("xNome");
    openapiFields.add("end");
    openapiFields.add("fone");
    openapiFields.add("email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("xNome");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InfoTomador
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InfoTomador.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InfoTomador is not found in the empty JSON string", InfoTomador.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InfoTomador.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InfoTomador` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InfoTomador.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CNPJ") != null && !jsonObj.get("CNPJ").isJsonNull()) && !jsonObj.get("CNPJ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CNPJ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CNPJ").toString()));
      }
      if ((jsonObj.get("CPF") != null && !jsonObj.get("CPF").isJsonNull()) && !jsonObj.get("CPF").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CPF` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CPF").toString()));
      }
      if ((jsonObj.get("NIF") != null && !jsonObj.get("NIF").isJsonNull()) && !jsonObj.get("NIF").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NIF` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NIF").toString()));
      }
      if ((jsonObj.get("CAEPF") != null && !jsonObj.get("CAEPF").isJsonNull()) && !jsonObj.get("CAEPF").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CAEPF` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CAEPF").toString()));
      }
      if ((jsonObj.get("IM") != null && !jsonObj.get("IM").isJsonNull()) && !jsonObj.get("IM").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IM` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IM").toString()));
      }
      if ((jsonObj.get("xNome") != null && !jsonObj.get("xNome").isJsonNull()) && !jsonObj.get("xNome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xNome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xNome").toString()));
      }
      // validate the optional field `end`
      if (jsonObj.get("end") != null && !jsonObj.get("end").isJsonNull()) {
        Endereco.validateJsonElement(jsonObj.get("end"));
      }
      if ((jsonObj.get("fone") != null && !jsonObj.get("fone").isJsonNull()) && !jsonObj.get("fone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fone").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InfoTomador.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InfoTomador' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InfoTomador> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InfoTomador.class));

       return (TypeAdapter<T>) new TypeAdapter<InfoTomador>() {
           @Override
           public void write(JsonWriter out, InfoTomador value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InfoTomador read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InfoTomador given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InfoTomador
   * @throws IOException if the JSON string is invalid with respect to InfoTomador
   */
  public static InfoTomador fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InfoTomador.class);
  }

  /**
   * Convert an instance of InfoTomador to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

