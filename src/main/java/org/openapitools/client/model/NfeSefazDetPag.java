/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.NfeSefazCard;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Grupo de detalhamento da forma de pagamento.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazDetPag {
  public static final String SERIALIZED_NAME_IND_PAG = "indPag";
  @SerializedName(SERIALIZED_NAME_IND_PAG)
  @javax.annotation.Nullable
  private Integer indPag;

  public static final String SERIALIZED_NAME_T_PAG = "tPag";
  @SerializedName(SERIALIZED_NAME_T_PAG)
  @javax.annotation.Nullable
  private String tPag;

  public static final String SERIALIZED_NAME_X_PAG = "xPag";
  @SerializedName(SERIALIZED_NAME_X_PAG)
  @javax.annotation.Nullable
  private String xPag;

  public static final String SERIALIZED_NAME_V_PAG = "vPag";
  @SerializedName(SERIALIZED_NAME_V_PAG)
  @javax.annotation.Nullable
  private BigDecimal vPag;

  public static final String SERIALIZED_NAME_D_PAG = "dPag";
  @SerializedName(SERIALIZED_NAME_D_PAG)
  @javax.annotation.Nullable
  private LocalDate dPag;

  public static final String SERIALIZED_NAME_CN_P_J_PAG = "CNPJPag";
  @SerializedName(SERIALIZED_NAME_CN_P_J_PAG)
  @javax.annotation.Nullable
  private String cnPJPag;

  public static final String SERIALIZED_NAME_UF_PAG = "UFPag";
  @SerializedName(SERIALIZED_NAME_UF_PAG)
  @javax.annotation.Nullable
  private String ufPag;

  public static final String SERIALIZED_NAME_CARD = "card";
  @SerializedName(SERIALIZED_NAME_CARD)
  @javax.annotation.Nullable
  private NfeSefazCard card;

  public NfeSefazDetPag() {
  }

  public NfeSefazDetPag indPag(@javax.annotation.Nullable Integer indPag) {
    this.indPag = indPag;
    return this;
  }

  /**
   * Indicador da Forma de Pagamento:0-Pagamento à Vista  * 1 - Pagamento à Prazo
   * @return indPag
   */
  @javax.annotation.Nullable
  public Integer getIndPag() {
    return indPag;
  }

  public void setIndPag(@javax.annotation.Nullable Integer indPag) {
    this.indPag = indPag;
  }


  public NfeSefazDetPag tPag(@javax.annotation.Nullable String tPag) {
    this.tPag = tPag;
    return this;
  }

  /**
   * Forma de Pagamento:.
   * @return tPag
   */
  @javax.annotation.Nullable
  public String gettPag() {
    return tPag;
  }

  public void settPag(@javax.annotation.Nullable String tPag) {
    this.tPag = tPag;
  }


  public NfeSefazDetPag xPag(@javax.annotation.Nullable String xPag) {
    this.xPag = xPag;
    return this;
  }

  /**
   * Descrição do Meio de Pagamento.
   * @return xPag
   */
  @javax.annotation.Nullable
  public String getxPag() {
    return xPag;
  }

  public void setxPag(@javax.annotation.Nullable String xPag) {
    this.xPag = xPag;
  }


  public NfeSefazDetPag vPag(@javax.annotation.Nullable BigDecimal vPag) {
    this.vPag = vPag;
    return this;
  }

  /**
   * Valor do Pagamento. Esta tag poderá ser omitida quando a tag tPag&#x3D;90 (Sem Pagamento), caso contrário deverá ser preenchida.
   * minimum: 0
   * @return vPag
   */
  @javax.annotation.Nullable
  public BigDecimal getvPag() {
    return vPag;
  }

  public void setvPag(@javax.annotation.Nullable BigDecimal vPag) {
    this.vPag = vPag;
  }


  public NfeSefazDetPag dPag(@javax.annotation.Nullable LocalDate dPag) {
    this.dPag = dPag;
    return this;
  }

  /**
   * Data do Pagamento.
   * @return dPag
   */
  @javax.annotation.Nullable
  public LocalDate getdPag() {
    return dPag;
  }

  public void setdPag(@javax.annotation.Nullable LocalDate dPag) {
    this.dPag = dPag;
  }


  public NfeSefazDetPag cnPJPag(@javax.annotation.Nullable String cnPJPag) {
    this.cnPJPag = cnPJPag;
    return this;
  }

  /**
   * CNPJ transacional do pagamento - Preencher informando o CNPJ do estabelecimento onde o pagamento foi processado/transacionado/recebido quando a emissão do documento fiscal ocorrer em estabelecimento distinto.
   * @return cnPJPag
   */
  @javax.annotation.Nullable
  public String getCnPJPag() {
    return cnPJPag;
  }

  public void setCnPJPag(@javax.annotation.Nullable String cnPJPag) {
    this.cnPJPag = cnPJPag;
  }


  public NfeSefazDetPag ufPag(@javax.annotation.Nullable String ufPag) {
    this.ufPag = ufPag;
    return this;
  }

  /**
   * UF do CNPJ do estabelecimento onde o pagamento foi processado/transacionado/recebido.
   * @return ufPag
   */
  @javax.annotation.Nullable
  public String getUfPag() {
    return ufPag;
  }

  public void setUfPag(@javax.annotation.Nullable String ufPag) {
    this.ufPag = ufPag;
  }


  public NfeSefazDetPag card(@javax.annotation.Nullable NfeSefazCard card) {
    this.card = card;
    return this;
  }

  /**
   * Get card
   * @return card
   */
  @javax.annotation.Nullable
  public NfeSefazCard getCard() {
    return card;
  }

  public void setCard(@javax.annotation.Nullable NfeSefazCard card) {
    this.card = card;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazDetPag nfeSefazDetPag = (NfeSefazDetPag) o;
    return Objects.equals(this.indPag, nfeSefazDetPag.indPag) &&
        Objects.equals(this.tPag, nfeSefazDetPag.tPag) &&
        Objects.equals(this.xPag, nfeSefazDetPag.xPag) &&
        Objects.equals(this.vPag, nfeSefazDetPag.vPag) &&
        Objects.equals(this.dPag, nfeSefazDetPag.dPag) &&
        Objects.equals(this.cnPJPag, nfeSefazDetPag.cnPJPag) &&
        Objects.equals(this.ufPag, nfeSefazDetPag.ufPag) &&
        Objects.equals(this.card, nfeSefazDetPag.card);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(indPag, tPag, xPag, vPag, dPag, cnPJPag, ufPag, card);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazDetPag {\n");
    sb.append("    indPag: ").append(toIndentedString(indPag)).append("\n");
    sb.append("    tPag: ").append(toIndentedString(tPag)).append("\n");
    sb.append("    xPag: ").append(toIndentedString(xPag)).append("\n");
    sb.append("    vPag: ").append(toIndentedString(vPag)).append("\n");
    sb.append("    dPag: ").append(toIndentedString(dPag)).append("\n");
    sb.append("    cnPJPag: ").append(toIndentedString(cnPJPag)).append("\n");
    sb.append("    ufPag: ").append(toIndentedString(ufPag)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("indPag");
    openapiFields.add("tPag");
    openapiFields.add("xPag");
    openapiFields.add("vPag");
    openapiFields.add("dPag");
    openapiFields.add("CNPJPag");
    openapiFields.add("UFPag");
    openapiFields.add("card");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tPag");
    openapiRequiredFields.add("vPag");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazDetPag
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazDetPag.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazDetPag is not found in the empty JSON string", NfeSefazDetPag.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazDetPag.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazDetPag` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfeSefazDetPag.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tPag") != null && !jsonObj.get("tPag").isJsonNull()) && !jsonObj.get("tPag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tPag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tPag").toString()));
      }
      if ((jsonObj.get("xPag") != null && !jsonObj.get("xPag").isJsonNull()) && !jsonObj.get("xPag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xPag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xPag").toString()));
      }
      if ((jsonObj.get("CNPJPag") != null && !jsonObj.get("CNPJPag").isJsonNull()) && !jsonObj.get("CNPJPag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CNPJPag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CNPJPag").toString()));
      }
      if ((jsonObj.get("UFPag") != null && !jsonObj.get("UFPag").isJsonNull()) && !jsonObj.get("UFPag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UFPag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UFPag").toString()));
      }
      // validate the optional field `card`
      if (jsonObj.get("card") != null && !jsonObj.get("card").isJsonNull()) {
        NfeSefazCard.validateJsonElement(jsonObj.get("card"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazDetPag.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazDetPag' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazDetPag> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazDetPag.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazDetPag>() {
           @Override
           public void write(JsonWriter out, NfeSefazDetPag value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazDetPag read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazDetPag given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazDetPag
   * @throws IOException if the JSON string is invalid with respect to NfeSefazDetPag
   */
  public static NfeSefazDetPag fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazDetPag.class);
  }

  /**
   * Convert an instance of NfeSefazDetPag to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

