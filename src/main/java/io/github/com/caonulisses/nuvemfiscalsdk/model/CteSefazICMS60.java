/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Tributação pelo ICMS60 - ICMS cobrado por substituição tributária.Responsabilidade do recolhimento do ICMS atribuído ao tomador ou 3º por ST.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazICMS60 {
  public static final String SERIALIZED_NAME_C_S_T = "CST";
  @SerializedName(SERIALIZED_NAME_C_S_T)
  @javax.annotation.Nullable
  private String CST;

  public static final String SERIALIZED_NAME_V_B_C_S_T_RET = "vBCSTRet";
  @SerializedName(SERIALIZED_NAME_V_B_C_S_T_RET)
  @javax.annotation.Nullable
  private BigDecimal vBCSTRet;

  public static final String SERIALIZED_NAME_V_I_C_M_S_S_T_RET = "vICMSSTRet";
  @SerializedName(SERIALIZED_NAME_V_I_C_M_S_S_T_RET)
  @javax.annotation.Nullable
  private BigDecimal vICMSSTRet;

  public static final String SERIALIZED_NAME_P_I_C_M_S_S_T_RET = "pICMSSTRet";
  @SerializedName(SERIALIZED_NAME_P_I_C_M_S_S_T_RET)
  @javax.annotation.Nullable
  private BigDecimal pICMSSTRet;

  public static final String SERIALIZED_NAME_V_CRED = "vCred";
  @SerializedName(SERIALIZED_NAME_V_CRED)
  @javax.annotation.Nullable
  private BigDecimal vCred;

  public static final String SERIALIZED_NAME_V_I_C_M_S_DESON = "vICMSDeson";
  @SerializedName(SERIALIZED_NAME_V_I_C_M_S_DESON)
  @javax.annotation.Nullable
  private BigDecimal vICMSDeson;

  public static final String SERIALIZED_NAME_C_BENEF = "cBenef";
  @SerializedName(SERIALIZED_NAME_C_BENEF)
  @javax.annotation.Nullable
  private String cBenef;

  public CteSefazICMS60() {
  }

  public CteSefazICMS60 CST(@javax.annotation.Nullable String CST) {
    this.CST = CST;
    return this;
  }

  /**
   * Classificação Tributária do Serviço.  * 60 - ICMS cobrado por substituição tributária
   * @return CST
   */
  @javax.annotation.Nullable
  public String getCST() {
    return CST;
  }

  public void setCST(@javax.annotation.Nullable String CST) {
    this.CST = CST;
  }


  public CteSefazICMS60 vBCSTRet(@javax.annotation.Nullable BigDecimal vBCSTRet) {
    this.vBCSTRet = vBCSTRet;
    return this;
  }

  /**
   * Valor da BC do ICMS ST retido.  Valor do frete sobre o qual será calculado o ICMS a ser substituído na Prestação.
   * minimum: 0
   * @return vBCSTRet
   */
  @javax.annotation.Nullable
  public BigDecimal getvBCSTRet() {
    return vBCSTRet;
  }

  public void setvBCSTRet(@javax.annotation.Nullable BigDecimal vBCSTRet) {
    this.vBCSTRet = vBCSTRet;
  }


  public CteSefazICMS60 vICMSSTRet(@javax.annotation.Nullable BigDecimal vICMSSTRet) {
    this.vICMSSTRet = vICMSSTRet;
    return this;
  }

  /**
   * Valor do ICMS ST retido.  Resultado da multiplicação do “vBCSTRet” x “pICMSSTRet” - que será valor do ICMS a ser retido pelo Substituto. Podendo o valor do ICMS a ser retido efetivamente, sofrer ajustes conforme a opção tributaria do transportador substituído.
   * minimum: 0
   * @return vICMSSTRet
   */
  @javax.annotation.Nullable
  public BigDecimal getvICMSSTRet() {
    return vICMSSTRet;
  }

  public void setvICMSSTRet(@javax.annotation.Nullable BigDecimal vICMSSTRet) {
    this.vICMSSTRet = vICMSSTRet;
  }


  public CteSefazICMS60 pICMSSTRet(@javax.annotation.Nullable BigDecimal pICMSSTRet) {
    this.pICMSSTRet = pICMSSTRet;
    return this;
  }

  /**
   * Alíquota do ICMS.  Percentual de Alíquota incidente na prestação de serviço de transporte.
   * minimum: 0
   * @return pICMSSTRet
   */
  @javax.annotation.Nullable
  public BigDecimal getpICMSSTRet() {
    return pICMSSTRet;
  }

  public void setpICMSSTRet(@javax.annotation.Nullable BigDecimal pICMSSTRet) {
    this.pICMSSTRet = pICMSSTRet;
  }


  public CteSefazICMS60 vCred(@javax.annotation.Nullable BigDecimal vCred) {
    this.vCred = vCred;
    return this;
  }

  /**
   * Valor do Crédito outorgado/Presumido.  Preencher somente quando o transportador substituído, for optante pelo crédito outorgado previsto no Convênio 106/96 e corresponde ao percentual de 20%% do valor do ICMS ST retido.
   * minimum: 0
   * @return vCred
   */
  @javax.annotation.Nullable
  public BigDecimal getvCred() {
    return vCred;
  }

  public void setvCred(@javax.annotation.Nullable BigDecimal vCred) {
    this.vCred = vCred;
  }


  public CteSefazICMS60 vICMSDeson(@javax.annotation.Nullable BigDecimal vICMSDeson) {
    this.vICMSDeson = vICMSDeson;
    return this;
  }

  /**
   * Valor do ICMS de desoneração.
   * minimum: 0
   * @return vICMSDeson
   */
  @javax.annotation.Nullable
  public BigDecimal getvICMSDeson() {
    return vICMSDeson;
  }

  public void setvICMSDeson(@javax.annotation.Nullable BigDecimal vICMSDeson) {
    this.vICMSDeson = vICMSDeson;
  }


  public CteSefazICMS60 cBenef(@javax.annotation.Nullable String cBenef) {
    this.cBenef = cBenef;
    return this;
  }

  /**
   * Código de Benefício Fiscal na UF.  Código de Benefício Fiscal utilizado pela UF.
   * @return cBenef
   */
  @javax.annotation.Nullable
  public String getcBenef() {
    return cBenef;
  }

  public void setcBenef(@javax.annotation.Nullable String cBenef) {
    this.cBenef = cBenef;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazICMS60 cteSefazICMS60 = (CteSefazICMS60) o;
    return Objects.equals(this.CST, cteSefazICMS60.CST) &&
        Objects.equals(this.vBCSTRet, cteSefazICMS60.vBCSTRet) &&
        Objects.equals(this.vICMSSTRet, cteSefazICMS60.vICMSSTRet) &&
        Objects.equals(this.pICMSSTRet, cteSefazICMS60.pICMSSTRet) &&
        Objects.equals(this.vCred, cteSefazICMS60.vCred) &&
        Objects.equals(this.vICMSDeson, cteSefazICMS60.vICMSDeson) &&
        Objects.equals(this.cBenef, cteSefazICMS60.cBenef);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(CST, vBCSTRet, vICMSSTRet, pICMSSTRet, vCred, vICMSDeson, cBenef);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazICMS60 {\n");
    sb.append("    CST: ").append(toIndentedString(CST)).append("\n");
    sb.append("    vBCSTRet: ").append(toIndentedString(vBCSTRet)).append("\n");
    sb.append("    vICMSSTRet: ").append(toIndentedString(vICMSSTRet)).append("\n");
    sb.append("    pICMSSTRet: ").append(toIndentedString(pICMSSTRet)).append("\n");
    sb.append("    vCred: ").append(toIndentedString(vCred)).append("\n");
    sb.append("    vICMSDeson: ").append(toIndentedString(vICMSDeson)).append("\n");
    sb.append("    cBenef: ").append(toIndentedString(cBenef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CST");
    openapiFields.add("vBCSTRet");
    openapiFields.add("vICMSSTRet");
    openapiFields.add("pICMSSTRet");
    openapiFields.add("vCred");
    openapiFields.add("vICMSDeson");
    openapiFields.add("cBenef");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CST");
    openapiRequiredFields.add("vBCSTRet");
    openapiRequiredFields.add("vICMSSTRet");
    openapiRequiredFields.add("pICMSSTRet");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazICMS60
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazICMS60.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazICMS60 is not found in the empty JSON string", CteSefazICMS60.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazICMS60.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazICMS60` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CteSefazICMS60.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CST") != null && !jsonObj.get("CST").isJsonNull()) && !jsonObj.get("CST").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CST` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CST").toString()));
      }
      if ((jsonObj.get("cBenef") != null && !jsonObj.get("cBenef").isJsonNull()) && !jsonObj.get("cBenef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cBenef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cBenef").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazICMS60.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazICMS60' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazICMS60> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazICMS60.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazICMS60>() {
           @Override
           public void write(JsonWriter out, CteSefazICMS60 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazICMS60 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazICMS60 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazICMS60
   * @throws IOException if the JSON string is invalid with respect to CteSefazICMS60
   */
  public static CteSefazICMS60 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazICMS60.class);
  }

  /**
   * Convert an instance of CteSefazICMS60 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

