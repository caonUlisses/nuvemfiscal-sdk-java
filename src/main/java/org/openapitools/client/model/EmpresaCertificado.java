/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EmpresaCertificado
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class EmpresaCertificado {
  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serial_number";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  @javax.annotation.Nullable
  private String serialNumber;

  public static final String SERIALIZED_NAME_ISSUER_NAME = "issuer_name";
  @SerializedName(SERIALIZED_NAME_ISSUER_NAME)
  @javax.annotation.Nullable
  private String issuerName;

  public static final String SERIALIZED_NAME_NOT_VALID_BEFORE = "not_valid_before";
  @SerializedName(SERIALIZED_NAME_NOT_VALID_BEFORE)
  @javax.annotation.Nullable
  private OffsetDateTime notValidBefore;

  public static final String SERIALIZED_NAME_NOT_VALID_AFTER = "not_valid_after";
  @SerializedName(SERIALIZED_NAME_NOT_VALID_AFTER)
  @javax.annotation.Nullable
  private OffsetDateTime notValidAfter;

  public static final String SERIALIZED_NAME_THUMBPRINT = "thumbprint";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT)
  @javax.annotation.Nullable
  private String thumbprint;

  public static final String SERIALIZED_NAME_SUBJECT_NAME = "subject_name";
  @SerializedName(SERIALIZED_NAME_SUBJECT_NAME)
  @javax.annotation.Nullable
  private String subjectName;

  public static final String SERIALIZED_NAME_CPF_CNPJ = "cpf_cnpj";
  @SerializedName(SERIALIZED_NAME_CPF_CNPJ)
  @javax.annotation.Nullable
  private String cpfCnpj;

  public static final String SERIALIZED_NAME_NOME_RAZAO_SOCIAL = "nome_razao_social";
  @SerializedName(SERIALIZED_NAME_NOME_RAZAO_SOCIAL)
  @javax.annotation.Nullable
  private String nomeRazaoSocial;

  public EmpresaCertificado() {
  }

  public EmpresaCertificado serialNumber(@javax.annotation.Nullable String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * Get serialNumber
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(@javax.annotation.Nullable String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public EmpresaCertificado issuerName(@javax.annotation.Nullable String issuerName) {
    this.issuerName = issuerName;
    return this;
  }

  /**
   * Get issuerName
   * @return issuerName
   */
  @javax.annotation.Nullable
  public String getIssuerName() {
    return issuerName;
  }

  public void setIssuerName(@javax.annotation.Nullable String issuerName) {
    this.issuerName = issuerName;
  }


  public EmpresaCertificado notValidBefore(@javax.annotation.Nullable OffsetDateTime notValidBefore) {
    this.notValidBefore = notValidBefore;
    return this;
  }

  /**
   * Get notValidBefore
   * @return notValidBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNotValidBefore() {
    return notValidBefore;
  }

  public void setNotValidBefore(@javax.annotation.Nullable OffsetDateTime notValidBefore) {
    this.notValidBefore = notValidBefore;
  }


  public EmpresaCertificado notValidAfter(@javax.annotation.Nullable OffsetDateTime notValidAfter) {
    this.notValidAfter = notValidAfter;
    return this;
  }

  /**
   * Get notValidAfter
   * @return notValidAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNotValidAfter() {
    return notValidAfter;
  }

  public void setNotValidAfter(@javax.annotation.Nullable OffsetDateTime notValidAfter) {
    this.notValidAfter = notValidAfter;
  }


  public EmpresaCertificado thumbprint(@javax.annotation.Nullable String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

  /**
   * Get thumbprint
   * @return thumbprint
   */
  @javax.annotation.Nullable
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(@javax.annotation.Nullable String thumbprint) {
    this.thumbprint = thumbprint;
  }


  public EmpresaCertificado subjectName(@javax.annotation.Nullable String subjectName) {
    this.subjectName = subjectName;
    return this;
  }

  /**
   * Get subjectName
   * @return subjectName
   */
  @javax.annotation.Nullable
  public String getSubjectName() {
    return subjectName;
  }

  public void setSubjectName(@javax.annotation.Nullable String subjectName) {
    this.subjectName = subjectName;
  }


  public EmpresaCertificado cpfCnpj(@javax.annotation.Nullable String cpfCnpj) {
    this.cpfCnpj = cpfCnpj;
    return this;
  }

  /**
   * Get cpfCnpj
   * @return cpfCnpj
   */
  @javax.annotation.Nullable
  public String getCpfCnpj() {
    return cpfCnpj;
  }

  public void setCpfCnpj(@javax.annotation.Nullable String cpfCnpj) {
    this.cpfCnpj = cpfCnpj;
  }


  public EmpresaCertificado nomeRazaoSocial(@javax.annotation.Nullable String nomeRazaoSocial) {
    this.nomeRazaoSocial = nomeRazaoSocial;
    return this;
  }

  /**
   * Get nomeRazaoSocial
   * @return nomeRazaoSocial
   */
  @javax.annotation.Nullable
  public String getNomeRazaoSocial() {
    return nomeRazaoSocial;
  }

  public void setNomeRazaoSocial(@javax.annotation.Nullable String nomeRazaoSocial) {
    this.nomeRazaoSocial = nomeRazaoSocial;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmpresaCertificado empresaCertificado = (EmpresaCertificado) o;
    return Objects.equals(this.serialNumber, empresaCertificado.serialNumber) &&
        Objects.equals(this.issuerName, empresaCertificado.issuerName) &&
        Objects.equals(this.notValidBefore, empresaCertificado.notValidBefore) &&
        Objects.equals(this.notValidAfter, empresaCertificado.notValidAfter) &&
        Objects.equals(this.thumbprint, empresaCertificado.thumbprint) &&
        Objects.equals(this.subjectName, empresaCertificado.subjectName) &&
        Objects.equals(this.cpfCnpj, empresaCertificado.cpfCnpj) &&
        Objects.equals(this.nomeRazaoSocial, empresaCertificado.nomeRazaoSocial);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serialNumber, issuerName, notValidBefore, notValidAfter, thumbprint, subjectName, cpfCnpj, nomeRazaoSocial);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmpresaCertificado {\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    issuerName: ").append(toIndentedString(issuerName)).append("\n");
    sb.append("    notValidBefore: ").append(toIndentedString(notValidBefore)).append("\n");
    sb.append("    notValidAfter: ").append(toIndentedString(notValidAfter)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    subjectName: ").append(toIndentedString(subjectName)).append("\n");
    sb.append("    cpfCnpj: ").append(toIndentedString(cpfCnpj)).append("\n");
    sb.append("    nomeRazaoSocial: ").append(toIndentedString(nomeRazaoSocial)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("serial_number");
    openapiFields.add("issuer_name");
    openapiFields.add("not_valid_before");
    openapiFields.add("not_valid_after");
    openapiFields.add("thumbprint");
    openapiFields.add("subject_name");
    openapiFields.add("cpf_cnpj");
    openapiFields.add("nome_razao_social");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmpresaCertificado
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmpresaCertificado.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmpresaCertificado is not found in the empty JSON string", EmpresaCertificado.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmpresaCertificado.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmpresaCertificado` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("serial_number") != null && !jsonObj.get("serial_number").isJsonNull()) && !jsonObj.get("serial_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serial_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serial_number").toString()));
      }
      if ((jsonObj.get("issuer_name") != null && !jsonObj.get("issuer_name").isJsonNull()) && !jsonObj.get("issuer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer_name").toString()));
      }
      if ((jsonObj.get("thumbprint") != null && !jsonObj.get("thumbprint").isJsonNull()) && !jsonObj.get("thumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbprint").toString()));
      }
      if ((jsonObj.get("subject_name") != null && !jsonObj.get("subject_name").isJsonNull()) && !jsonObj.get("subject_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject_name").toString()));
      }
      if ((jsonObj.get("cpf_cnpj") != null && !jsonObj.get("cpf_cnpj").isJsonNull()) && !jsonObj.get("cpf_cnpj").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpf_cnpj` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpf_cnpj").toString()));
      }
      if ((jsonObj.get("nome_razao_social") != null && !jsonObj.get("nome_razao_social").isJsonNull()) && !jsonObj.get("nome_razao_social").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nome_razao_social` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nome_razao_social").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmpresaCertificado.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmpresaCertificado' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmpresaCertificado> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmpresaCertificado.class));

       return (TypeAdapter<T>) new TypeAdapter<EmpresaCertificado>() {
           @Override
           public void write(JsonWriter out, EmpresaCertificado value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmpresaCertificado read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmpresaCertificado given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmpresaCertificado
   * @throws IOException if the JSON string is invalid with respect to EmpresaCertificado
   */
  public static EmpresaCertificado fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmpresaCertificado.class);
  }

  /**
   * Convert an instance of EmpresaCertificado to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

