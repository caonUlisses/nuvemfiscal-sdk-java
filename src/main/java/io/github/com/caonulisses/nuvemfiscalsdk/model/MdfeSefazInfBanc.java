/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Informações bancárias.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class MdfeSefazInfBanc {
  public static final String SERIALIZED_NAME_COD_BANCO = "codBanco";
  @SerializedName(SERIALIZED_NAME_COD_BANCO)
  @javax.annotation.Nullable
  private String codBanco;

  public static final String SERIALIZED_NAME_COD_AGENCIA = "codAgencia";
  @SerializedName(SERIALIZED_NAME_COD_AGENCIA)
  @javax.annotation.Nullable
  private String codAgencia;

  public static final String SERIALIZED_NAME_C_N_P_J_I_P_E_F = "CNPJIPEF";
  @SerializedName(SERIALIZED_NAME_C_N_P_J_I_P_E_F)
  @javax.annotation.Nullable
  private String CNPJIPEF;

  public static final String SERIALIZED_NAME_P_I_X = "PIX";
  @SerializedName(SERIALIZED_NAME_P_I_X)
  @javax.annotation.Nullable
  private String PIX;

  public MdfeSefazInfBanc() {
  }

  public MdfeSefazInfBanc codBanco(@javax.annotation.Nullable String codBanco) {
    this.codBanco = codBanco;
    return this;
  }

  /**
   * Número do banco.
   * @return codBanco
   */
  @javax.annotation.Nullable
  public String getCodBanco() {
    return codBanco;
  }

  public void setCodBanco(@javax.annotation.Nullable String codBanco) {
    this.codBanco = codBanco;
  }


  public MdfeSefazInfBanc codAgencia(@javax.annotation.Nullable String codAgencia) {
    this.codAgencia = codAgencia;
    return this;
  }

  /**
   * Número da agência bancária.
   * @return codAgencia
   */
  @javax.annotation.Nullable
  public String getCodAgencia() {
    return codAgencia;
  }

  public void setCodAgencia(@javax.annotation.Nullable String codAgencia) {
    this.codAgencia = codAgencia;
  }


  public MdfeSefazInfBanc CNPJIPEF(@javax.annotation.Nullable String CNPJIPEF) {
    this.CNPJIPEF = CNPJIPEF;
    return this;
  }

  /**
   * Número do CNPJ da Instituição de Pagamento Eletrônico do Frete.  Informar os zeros não significativos.
   * @return CNPJIPEF
   */
  @javax.annotation.Nullable
  public String getCNPJIPEF() {
    return CNPJIPEF;
  }

  public void setCNPJIPEF(@javax.annotation.Nullable String CNPJIPEF) {
    this.CNPJIPEF = CNPJIPEF;
  }


  public MdfeSefazInfBanc PIX(@javax.annotation.Nullable String PIX) {
    this.PIX = PIX;
    return this;
  }

  /**
   * Chave PIX.  Informar a chave PIX para recebimento do frete.  Pode ser email, CPF/ CNPJ (somente numeros), Telefone com a seguinte formatação (+5599999999999) ou a chave aleatória gerada pela instituição.
   * @return PIX
   */
  @javax.annotation.Nullable
  public String getPIX() {
    return PIX;
  }

  public void setPIX(@javax.annotation.Nullable String PIX) {
    this.PIX = PIX;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MdfeSefazInfBanc mdfeSefazInfBanc = (MdfeSefazInfBanc) o;
    return Objects.equals(this.codBanco, mdfeSefazInfBanc.codBanco) &&
        Objects.equals(this.codAgencia, mdfeSefazInfBanc.codAgencia) &&
        Objects.equals(this.CNPJIPEF, mdfeSefazInfBanc.CNPJIPEF) &&
        Objects.equals(this.PIX, mdfeSefazInfBanc.PIX);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(codBanco, codAgencia, CNPJIPEF, PIX);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MdfeSefazInfBanc {\n");
    sb.append("    codBanco: ").append(toIndentedString(codBanco)).append("\n");
    sb.append("    codAgencia: ").append(toIndentedString(codAgencia)).append("\n");
    sb.append("    CNPJIPEF: ").append(toIndentedString(CNPJIPEF)).append("\n");
    sb.append("    PIX: ").append(toIndentedString(PIX)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("codBanco");
    openapiFields.add("codAgencia");
    openapiFields.add("CNPJIPEF");
    openapiFields.add("PIX");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MdfeSefazInfBanc
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MdfeSefazInfBanc.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MdfeSefazInfBanc is not found in the empty JSON string", MdfeSefazInfBanc.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MdfeSefazInfBanc.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MdfeSefazInfBanc` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("codBanco") != null && !jsonObj.get("codBanco").isJsonNull()) && !jsonObj.get("codBanco").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codBanco` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codBanco").toString()));
      }
      if ((jsonObj.get("codAgencia") != null && !jsonObj.get("codAgencia").isJsonNull()) && !jsonObj.get("codAgencia").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codAgencia` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codAgencia").toString()));
      }
      if ((jsonObj.get("CNPJIPEF") != null && !jsonObj.get("CNPJIPEF").isJsonNull()) && !jsonObj.get("CNPJIPEF").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CNPJIPEF` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CNPJIPEF").toString()));
      }
      if ((jsonObj.get("PIX") != null && !jsonObj.get("PIX").isJsonNull()) && !jsonObj.get("PIX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PIX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PIX").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MdfeSefazInfBanc.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MdfeSefazInfBanc' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MdfeSefazInfBanc> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MdfeSefazInfBanc.class));

       return (TypeAdapter<T>) new TypeAdapter<MdfeSefazInfBanc>() {
           @Override
           public void write(JsonWriter out, MdfeSefazInfBanc value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MdfeSefazInfBanc read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MdfeSefazInfBanc given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MdfeSefazInfBanc
   * @throws IOException if the JSON string is invalid with respect to MdfeSefazInfBanc
   */
  public static MdfeSefazInfBanc fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MdfeSefazInfBanc.class);
  }

  /**
   * Convert an instance of MdfeSefazInfBanc to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

