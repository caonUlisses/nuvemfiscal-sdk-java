/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NfeSefazICMSTot;
import org.openapitools.client.model.NfeSefazISSQNtot;
import org.openapitools.client.model.NfeSefazRetTrib;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dados dos totais da NF-e.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazTotal {
  public static final String SERIALIZED_NAME_IC_M_S_TOT = "ICMSTot";
  @SerializedName(SERIALIZED_NAME_IC_M_S_TOT)
  @javax.annotation.Nonnull
  private NfeSefazICMSTot icMSTot;

  public static final String SERIALIZED_NAME_IS_S_Q_NTOT = "ISSQNtot";
  @SerializedName(SERIALIZED_NAME_IS_S_Q_NTOT)
  @javax.annotation.Nullable
  private NfeSefazISSQNtot isSQNtot;

  public static final String SERIALIZED_NAME_RET_TRIB = "retTrib";
  @SerializedName(SERIALIZED_NAME_RET_TRIB)
  @javax.annotation.Nullable
  private NfeSefazRetTrib retTrib;

  public NfeSefazTotal() {
  }

  public NfeSefazTotal icMSTot(@javax.annotation.Nonnull NfeSefazICMSTot icMSTot) {
    this.icMSTot = icMSTot;
    return this;
  }

  /**
   * Get icMSTot
   * @return icMSTot
   */
  @javax.annotation.Nonnull
  public NfeSefazICMSTot getIcMSTot() {
    return icMSTot;
  }

  public void setIcMSTot(@javax.annotation.Nonnull NfeSefazICMSTot icMSTot) {
    this.icMSTot = icMSTot;
  }


  public NfeSefazTotal isSQNtot(@javax.annotation.Nullable NfeSefazISSQNtot isSQNtot) {
    this.isSQNtot = isSQNtot;
    return this;
  }

  /**
   * Get isSQNtot
   * @return isSQNtot
   */
  @javax.annotation.Nullable
  public NfeSefazISSQNtot getIsSQNtot() {
    return isSQNtot;
  }

  public void setIsSQNtot(@javax.annotation.Nullable NfeSefazISSQNtot isSQNtot) {
    this.isSQNtot = isSQNtot;
  }


  public NfeSefazTotal retTrib(@javax.annotation.Nullable NfeSefazRetTrib retTrib) {
    this.retTrib = retTrib;
    return this;
  }

  /**
   * Get retTrib
   * @return retTrib
   */
  @javax.annotation.Nullable
  public NfeSefazRetTrib getRetTrib() {
    return retTrib;
  }

  public void setRetTrib(@javax.annotation.Nullable NfeSefazRetTrib retTrib) {
    this.retTrib = retTrib;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazTotal nfeSefazTotal = (NfeSefazTotal) o;
    return Objects.equals(this.icMSTot, nfeSefazTotal.icMSTot) &&
        Objects.equals(this.isSQNtot, nfeSefazTotal.isSQNtot) &&
        Objects.equals(this.retTrib, nfeSefazTotal.retTrib);
  }

  @Override
  public int hashCode() {
    return Objects.hash(icMSTot, isSQNtot, retTrib);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazTotal {\n");
    sb.append("    icMSTot: ").append(toIndentedString(icMSTot)).append("\n");
    sb.append("    isSQNtot: ").append(toIndentedString(isSQNtot)).append("\n");
    sb.append("    retTrib: ").append(toIndentedString(retTrib)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ICMSTot");
    openapiFields.add("ISSQNtot");
    openapiFields.add("retTrib");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ICMSTot");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazTotal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazTotal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazTotal is not found in the empty JSON string", NfeSefazTotal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazTotal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazTotal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfeSefazTotal.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ICMSTot`
      NfeSefazICMSTot.validateJsonElement(jsonObj.get("ICMSTot"));
      // validate the optional field `ISSQNtot`
      if (jsonObj.get("ISSQNtot") != null && !jsonObj.get("ISSQNtot").isJsonNull()) {
        NfeSefazISSQNtot.validateJsonElement(jsonObj.get("ISSQNtot"));
      }
      // validate the optional field `retTrib`
      if (jsonObj.get("retTrib") != null && !jsonObj.get("retTrib").isJsonNull()) {
        NfeSefazRetTrib.validateJsonElement(jsonObj.get("retTrib"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazTotal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazTotal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazTotal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazTotal.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazTotal>() {
           @Override
           public void write(JsonWriter out, NfeSefazTotal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazTotal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazTotal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazTotal
   * @throws IOException if the JSON string is invalid with respect to NfeSefazTotal
   */
  public static NfeSefazTotal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazTotal.class);
  }

  /**
   * Convert an instance of NfeSefazTotal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

