/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Grupo de informações relativas ao código do serviço prestado.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CServ {
  public static final String SERIALIZED_NAME_C_TRIB_NAC = "cTribNac";
  @SerializedName(SERIALIZED_NAME_C_TRIB_NAC)
  @javax.annotation.Nullable
  private String cTribNac;

  public static final String SERIALIZED_NAME_C_TRIB_MUN = "cTribMun";
  @SerializedName(SERIALIZED_NAME_C_TRIB_MUN)
  @javax.annotation.Nullable
  private String cTribMun;

  public static final String SERIALIZED_NAME_C_N_A_E = "CNAE";
  @SerializedName(SERIALIZED_NAME_C_N_A_E)
  @javax.annotation.Nullable
  private String CNAE;

  public static final String SERIALIZED_NAME_X_DESC_SERV = "xDescServ";
  @SerializedName(SERIALIZED_NAME_X_DESC_SERV)
  @javax.annotation.Nullable
  private String xDescServ;

  public static final String SERIALIZED_NAME_C_N_B_S = "cNBS";
  @SerializedName(SERIALIZED_NAME_C_N_B_S)
  @javax.annotation.Nullable
  private String cNBS;

  public CServ() {
  }

  public CServ cTribNac(@javax.annotation.Nullable String cTribNac) {
    this.cTribNac = cTribNac;
    return this;
  }

  /**
   * Código de tributação nacional do ISSQN:  Regra de formação - 6 dígitos numéricos sendo: 2 para Item (LC 116/2003), 2 para Subitem (LC 116/2003) e 2 para Desdobro Nacional.
   * @return cTribNac
   */
  @javax.annotation.Nullable
  public String getcTribNac() {
    return cTribNac;
  }

  public void setcTribNac(@javax.annotation.Nullable String cTribNac) {
    this.cTribNac = cTribNac;
  }


  public CServ cTribMun(@javax.annotation.Nullable String cTribMun) {
    this.cTribMun = cTribMun;
    return this;
  }

  /**
   * Código de tributação municipal do ISSQN.
   * @return cTribMun
   */
  @javax.annotation.Nullable
  public String getcTribMun() {
    return cTribMun;
  }

  public void setcTribMun(@javax.annotation.Nullable String cTribMun) {
    this.cTribMun = cTribMun;
  }


  public CServ CNAE(@javax.annotation.Nullable String CNAE) {
    this.CNAE = CNAE;
    return this;
  }

  /**
   * Código CNAE (Classificação Nacional de Atividades Econômicas).
   * @return CNAE
   */
  @javax.annotation.Nullable
  public String getCNAE() {
    return CNAE;
  }

  public void setCNAE(@javax.annotation.Nullable String CNAE) {
    this.CNAE = CNAE;
  }


  public CServ xDescServ(@javax.annotation.Nullable String xDescServ) {
    this.xDescServ = xDescServ;
    return this;
  }

  /**
   * Descrição completa do serviço prestado.    Os caracteres acentuados poderão ser alterados para caracteres sem acentuação.
   * @return xDescServ
   */
  @javax.annotation.Nullable
  public String getxDescServ() {
    return xDescServ;
  }

  public void setxDescServ(@javax.annotation.Nullable String xDescServ) {
    this.xDescServ = xDescServ;
  }


  public CServ cNBS(@javax.annotation.Nullable String cNBS) {
    this.cNBS = cNBS;
    return this;
  }

  /**
   * Código NBS (Nomenclatura Brasileira de Serviços, Intangíveis e outras Operações que produzam Variações no Patrimônio) correspondente ao serviço prestado.
   * @return cNBS
   */
  @javax.annotation.Nullable
  public String getcNBS() {
    return cNBS;
  }

  public void setcNBS(@javax.annotation.Nullable String cNBS) {
    this.cNBS = cNBS;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CServ cserv = (CServ) o;
    return Objects.equals(this.cTribNac, cserv.cTribNac) &&
        Objects.equals(this.cTribMun, cserv.cTribMun) &&
        Objects.equals(this.CNAE, cserv.CNAE) &&
        Objects.equals(this.xDescServ, cserv.xDescServ) &&
        Objects.equals(this.cNBS, cserv.cNBS);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cTribNac, cTribMun, CNAE, xDescServ, cNBS);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CServ {\n");
    sb.append("    cTribNac: ").append(toIndentedString(cTribNac)).append("\n");
    sb.append("    cTribMun: ").append(toIndentedString(cTribMun)).append("\n");
    sb.append("    CNAE: ").append(toIndentedString(CNAE)).append("\n");
    sb.append("    xDescServ: ").append(toIndentedString(xDescServ)).append("\n");
    sb.append("    cNBS: ").append(toIndentedString(cNBS)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cTribNac");
    openapiFields.add("cTribMun");
    openapiFields.add("CNAE");
    openapiFields.add("xDescServ");
    openapiFields.add("cNBS");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cTribNac");
    openapiRequiredFields.add("xDescServ");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CServ
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CServ.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CServ is not found in the empty JSON string", CServ.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CServ.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CServ` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CServ.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cTribNac") != null && !jsonObj.get("cTribNac").isJsonNull()) && !jsonObj.get("cTribNac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cTribNac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cTribNac").toString()));
      }
      if ((jsonObj.get("cTribMun") != null && !jsonObj.get("cTribMun").isJsonNull()) && !jsonObj.get("cTribMun").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cTribMun` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cTribMun").toString()));
      }
      if ((jsonObj.get("CNAE") != null && !jsonObj.get("CNAE").isJsonNull()) && !jsonObj.get("CNAE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CNAE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CNAE").toString()));
      }
      if ((jsonObj.get("xDescServ") != null && !jsonObj.get("xDescServ").isJsonNull()) && !jsonObj.get("xDescServ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xDescServ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xDescServ").toString()));
      }
      if ((jsonObj.get("cNBS") != null && !jsonObj.get("cNBS").isJsonNull()) && !jsonObj.get("cNBS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cNBS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cNBS").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CServ.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CServ' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CServ> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CServ.class));

       return (TypeAdapter<T>) new TypeAdapter<CServ>() {
           @Override
           public void write(JsonWriter out, CServ value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CServ read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CServ given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CServ
   * @throws IOException if the JSON string is invalid with respect to CServ
   */
  public static CServ fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CServ.class);
  }

  /**
   * Convert an instance of CServ to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

