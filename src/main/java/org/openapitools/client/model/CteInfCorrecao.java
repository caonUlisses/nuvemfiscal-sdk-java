/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CteInfCorrecao
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteInfCorrecao {
  public static final String SERIALIZED_NAME_GRUPO_ALTERADO = "grupo_alterado";
  @SerializedName(SERIALIZED_NAME_GRUPO_ALTERADO)
  @javax.annotation.Nonnull
  private String grupoAlterado;

  public static final String SERIALIZED_NAME_CAMPO_ALTERADO = "campo_alterado";
  @SerializedName(SERIALIZED_NAME_CAMPO_ALTERADO)
  @javax.annotation.Nonnull
  private String campoAlterado;

  public static final String SERIALIZED_NAME_VALOR_ALTERADO = "valor_alterado";
  @SerializedName(SERIALIZED_NAME_VALOR_ALTERADO)
  @javax.annotation.Nonnull
  private String valorAlterado;

  public static final String SERIALIZED_NAME_NUMERO_ITEM_ALTERADO = "numero_item_alterado";
  @SerializedName(SERIALIZED_NAME_NUMERO_ITEM_ALTERADO)
  @javax.annotation.Nullable
  private Integer numeroItemAlterado;

  public CteInfCorrecao() {
  }

  public CteInfCorrecao grupoAlterado(@javax.annotation.Nonnull String grupoAlterado) {
    this.grupoAlterado = grupoAlterado;
    return this;
  }

  /**
   * Indicar o grupo de informações que pertence o \&quot;campo_alterado\&quot;. Ex: ide.
   * @return grupoAlterado
   */
  @javax.annotation.Nonnull
  public String getGrupoAlterado() {
    return grupoAlterado;
  }

  public void setGrupoAlterado(@javax.annotation.Nonnull String grupoAlterado) {
    this.grupoAlterado = grupoAlterado;
  }


  public CteInfCorrecao campoAlterado(@javax.annotation.Nonnull String campoAlterado) {
    this.campoAlterado = campoAlterado;
    return this;
  }

  /**
   * Nome do campo modificado do CT-e Original.
   * @return campoAlterado
   */
  @javax.annotation.Nonnull
  public String getCampoAlterado() {
    return campoAlterado;
  }

  public void setCampoAlterado(@javax.annotation.Nonnull String campoAlterado) {
    this.campoAlterado = campoAlterado;
  }


  public CteInfCorrecao valorAlterado(@javax.annotation.Nonnull String valorAlterado) {
    this.valorAlterado = valorAlterado;
    return this;
  }

  /**
   * Valor correspondente à alteração.
   * @return valorAlterado
   */
  @javax.annotation.Nonnull
  public String getValorAlterado() {
    return valorAlterado;
  }

  public void setValorAlterado(@javax.annotation.Nonnull String valorAlterado) {
    this.valorAlterado = valorAlterado;
  }


  public CteInfCorrecao numeroItemAlterado(@javax.annotation.Nullable Integer numeroItemAlterado) {
    this.numeroItemAlterado = numeroItemAlterado;
    return this;
  }

  /**
   * Preencher com o indice do item alterado caso a alteração ocorra em uma lista.  OBS: O indice inicia sempre em 1.
   * @return numeroItemAlterado
   */
  @javax.annotation.Nullable
  public Integer getNumeroItemAlterado() {
    return numeroItemAlterado;
  }

  public void setNumeroItemAlterado(@javax.annotation.Nullable Integer numeroItemAlterado) {
    this.numeroItemAlterado = numeroItemAlterado;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteInfCorrecao cteInfCorrecao = (CteInfCorrecao) o;
    return Objects.equals(this.grupoAlterado, cteInfCorrecao.grupoAlterado) &&
        Objects.equals(this.campoAlterado, cteInfCorrecao.campoAlterado) &&
        Objects.equals(this.valorAlterado, cteInfCorrecao.valorAlterado) &&
        Objects.equals(this.numeroItemAlterado, cteInfCorrecao.numeroItemAlterado);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(grupoAlterado, campoAlterado, valorAlterado, numeroItemAlterado);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteInfCorrecao {\n");
    sb.append("    grupoAlterado: ").append(toIndentedString(grupoAlterado)).append("\n");
    sb.append("    campoAlterado: ").append(toIndentedString(campoAlterado)).append("\n");
    sb.append("    valorAlterado: ").append(toIndentedString(valorAlterado)).append("\n");
    sb.append("    numeroItemAlterado: ").append(toIndentedString(numeroItemAlterado)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("grupo_alterado");
    openapiFields.add("campo_alterado");
    openapiFields.add("valor_alterado");
    openapiFields.add("numero_item_alterado");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("grupo_alterado");
    openapiRequiredFields.add("campo_alterado");
    openapiRequiredFields.add("valor_alterado");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteInfCorrecao
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteInfCorrecao.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteInfCorrecao is not found in the empty JSON string", CteInfCorrecao.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteInfCorrecao.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteInfCorrecao` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CteInfCorrecao.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("grupo_alterado").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grupo_alterado` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grupo_alterado").toString()));
      }
      if (!jsonObj.get("campo_alterado").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campo_alterado` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campo_alterado").toString()));
      }
      if (!jsonObj.get("valor_alterado").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valor_alterado` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valor_alterado").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteInfCorrecao.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteInfCorrecao' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteInfCorrecao> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteInfCorrecao.class));

       return (TypeAdapter<T>) new TypeAdapter<CteInfCorrecao>() {
           @Override
           public void write(JsonWriter out, CteInfCorrecao value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteInfCorrecao read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteInfCorrecao given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteInfCorrecao
   * @throws IOException if the JSON string is invalid with respect to CteInfCorrecao
   */
  public static CteInfCorrecao fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteInfCorrecao.class);
  }

  /**
   * Convert an instance of CteInfCorrecao to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

