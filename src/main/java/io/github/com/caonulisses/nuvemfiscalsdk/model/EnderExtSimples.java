/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Grupo de informações específicas de endereço no exterior.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class EnderExtSimples {
  public static final String SERIALIZED_NAME_C_END_POST = "cEndPost";
  @SerializedName(SERIALIZED_NAME_C_END_POST)
  @javax.annotation.Nullable
  private String cEndPost;

  public static final String SERIALIZED_NAME_X_CIDADE = "xCidade";
  @SerializedName(SERIALIZED_NAME_X_CIDADE)
  @javax.annotation.Nullable
  private String xCidade;

  public static final String SERIALIZED_NAME_X_EST_PROV_REG = "xEstProvReg";
  @SerializedName(SERIALIZED_NAME_X_EST_PROV_REG)
  @javax.annotation.Nullable
  private String xEstProvReg;

  public EnderExtSimples() {
  }

  public EnderExtSimples cEndPost(@javax.annotation.Nullable String cEndPost) {
    this.cEndPost = cEndPost;
    return this;
  }

  /**
   * Código alfanumérico do Endereçamento Postal no exterior do prestador do serviço.
   * @return cEndPost
   */
  @javax.annotation.Nullable
  public String getcEndPost() {
    return cEndPost;
  }

  public void setcEndPost(@javax.annotation.Nullable String cEndPost) {
    this.cEndPost = cEndPost;
  }


  public EnderExtSimples xCidade(@javax.annotation.Nullable String xCidade) {
    this.xCidade = xCidade;
    return this;
  }

  /**
   * Nome da cidade no exterior do prestador do serviço.
   * @return xCidade
   */
  @javax.annotation.Nullable
  public String getxCidade() {
    return xCidade;
  }

  public void setxCidade(@javax.annotation.Nullable String xCidade) {
    this.xCidade = xCidade;
  }


  public EnderExtSimples xEstProvReg(@javax.annotation.Nullable String xEstProvReg) {
    this.xEstProvReg = xEstProvReg;
    return this;
  }

  /**
   * Estado, província ou região da cidade no exterior do prestador do serviço.
   * @return xEstProvReg
   */
  @javax.annotation.Nullable
  public String getxEstProvReg() {
    return xEstProvReg;
  }

  public void setxEstProvReg(@javax.annotation.Nullable String xEstProvReg) {
    this.xEstProvReg = xEstProvReg;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnderExtSimples enderExtSimples = (EnderExtSimples) o;
    return Objects.equals(this.cEndPost, enderExtSimples.cEndPost) &&
        Objects.equals(this.xCidade, enderExtSimples.xCidade) &&
        Objects.equals(this.xEstProvReg, enderExtSimples.xEstProvReg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cEndPost, xCidade, xEstProvReg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnderExtSimples {\n");
    sb.append("    cEndPost: ").append(toIndentedString(cEndPost)).append("\n");
    sb.append("    xCidade: ").append(toIndentedString(xCidade)).append("\n");
    sb.append("    xEstProvReg: ").append(toIndentedString(xEstProvReg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cEndPost");
    openapiFields.add("xCidade");
    openapiFields.add("xEstProvReg");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cEndPost");
    openapiRequiredFields.add("xCidade");
    openapiRequiredFields.add("xEstProvReg");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnderExtSimples
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnderExtSimples.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnderExtSimples is not found in the empty JSON string", EnderExtSimples.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnderExtSimples.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnderExtSimples` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnderExtSimples.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cEndPost") != null && !jsonObj.get("cEndPost").isJsonNull()) && !jsonObj.get("cEndPost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cEndPost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cEndPost").toString()));
      }
      if ((jsonObj.get("xCidade") != null && !jsonObj.get("xCidade").isJsonNull()) && !jsonObj.get("xCidade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xCidade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xCidade").toString()));
      }
      if ((jsonObj.get("xEstProvReg") != null && !jsonObj.get("xEstProvReg").isJsonNull()) && !jsonObj.get("xEstProvReg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xEstProvReg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xEstProvReg").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnderExtSimples.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnderExtSimples' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnderExtSimples> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnderExtSimples.class));

       return (TypeAdapter<T>) new TypeAdapter<EnderExtSimples>() {
           @Override
           public void write(JsonWriter out, EnderExtSimples value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnderExtSimples read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnderExtSimples given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnderExtSimples
   * @throws IOException if the JSON string is invalid with respect to EnderExtSimples
   */
  public static EnderExtSimples fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnderExtSimples.class);
  }

  /**
   * Convert an instance of EnderExtSimples to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

