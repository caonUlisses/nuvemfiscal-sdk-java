/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.CteSefazEmiOcc;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Ordens de Coleta associados.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazOcc {
  public static final String SERIALIZED_NAME_SERIE = "serie";
  @SerializedName(SERIALIZED_NAME_SERIE)
  @javax.annotation.Nullable
  private String serie;

  public static final String SERIALIZED_NAME_N_OCC = "nOcc";
  @SerializedName(SERIALIZED_NAME_N_OCC)
  @javax.annotation.Nullable
  private Integer nOcc;

  public static final String SERIALIZED_NAME_D_EMI = "dEmi";
  @SerializedName(SERIALIZED_NAME_D_EMI)
  @javax.annotation.Nullable
  private LocalDate dEmi;

  public static final String SERIALIZED_NAME_EMI_OCC = "emiOcc";
  @SerializedName(SERIALIZED_NAME_EMI_OCC)
  @javax.annotation.Nullable
  private CteSefazEmiOcc emiOcc;

  public CteSefazOcc() {
  }

  public CteSefazOcc serie(@javax.annotation.Nullable String serie) {
    this.serie = serie;
    return this;
  }

  /**
   * Série da OCC.
   * @return serie
   */
  @javax.annotation.Nullable
  public String getSerie() {
    return serie;
  }

  public void setSerie(@javax.annotation.Nullable String serie) {
    this.serie = serie;
  }


  public CteSefazOcc nOcc(@javax.annotation.Nullable Integer nOcc) {
    this.nOcc = nOcc;
    return this;
  }

  /**
   * Número da Ordem de coleta.
   * minimum: 1
   * maximum: 999999
   * @return nOcc
   */
  @javax.annotation.Nullable
  public Integer getnOcc() {
    return nOcc;
  }

  public void setnOcc(@javax.annotation.Nullable Integer nOcc) {
    this.nOcc = nOcc;
  }


  public CteSefazOcc dEmi(@javax.annotation.Nullable LocalDate dEmi) {
    this.dEmi = dEmi;
    return this;
  }

  /**
   * Data de emissão da ordem de coleta.  Formato AAAA-MM-DD.
   * @return dEmi
   */
  @javax.annotation.Nullable
  public LocalDate getdEmi() {
    return dEmi;
  }

  public void setdEmi(@javax.annotation.Nullable LocalDate dEmi) {
    this.dEmi = dEmi;
  }


  public CteSefazOcc emiOcc(@javax.annotation.Nullable CteSefazEmiOcc emiOcc) {
    this.emiOcc = emiOcc;
    return this;
  }

  /**
   * Get emiOcc
   * @return emiOcc
   */
  @javax.annotation.Nullable
  public CteSefazEmiOcc getEmiOcc() {
    return emiOcc;
  }

  public void setEmiOcc(@javax.annotation.Nullable CteSefazEmiOcc emiOcc) {
    this.emiOcc = emiOcc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazOcc cteSefazOcc = (CteSefazOcc) o;
    return Objects.equals(this.serie, cteSefazOcc.serie) &&
        Objects.equals(this.nOcc, cteSefazOcc.nOcc) &&
        Objects.equals(this.dEmi, cteSefazOcc.dEmi) &&
        Objects.equals(this.emiOcc, cteSefazOcc.emiOcc);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(serie, nOcc, dEmi, emiOcc);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazOcc {\n");
    sb.append("    serie: ").append(toIndentedString(serie)).append("\n");
    sb.append("    nOcc: ").append(toIndentedString(nOcc)).append("\n");
    sb.append("    dEmi: ").append(toIndentedString(dEmi)).append("\n");
    sb.append("    emiOcc: ").append(toIndentedString(emiOcc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("serie");
    openapiFields.add("nOcc");
    openapiFields.add("dEmi");
    openapiFields.add("emiOcc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nOcc");
    openapiRequiredFields.add("dEmi");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazOcc
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazOcc.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazOcc is not found in the empty JSON string", CteSefazOcc.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazOcc.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazOcc` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CteSefazOcc.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("serie") != null && !jsonObj.get("serie").isJsonNull()) && !jsonObj.get("serie").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serie` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serie").toString()));
      }
      // validate the optional field `emiOcc`
      if (jsonObj.get("emiOcc") != null && !jsonObj.get("emiOcc").isJsonNull()) {
        CteSefazEmiOcc.validateJsonElement(jsonObj.get("emiOcc"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazOcc.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazOcc' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazOcc> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazOcc.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazOcc>() {
           @Override
           public void write(JsonWriter out, CteSefazOcc value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazOcc read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazOcc given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazOcc
   * @throws IOException if the JSON string is invalid with respect to CteSefazOcc
   */
  public static CteSefazOcc fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazOcc.class);
  }

  /**
   * Convert an instance of CteSefazOcc to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

