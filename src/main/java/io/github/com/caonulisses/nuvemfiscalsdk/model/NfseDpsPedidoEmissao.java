/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import io.github.com.caonulisses.nuvemfiscalsdk.model.InfDPS;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * NfseDpsPedidoEmissao
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfseDpsPedidoEmissao {
  /**
   * Default: &#x60;\&quot;padrao\&quot;&#x60;    Identificação do provedor para transmissão da DPS:   * &#x60;\&quot;padrao\&quot;&#x60;: Provedor padrão da prefeitura.   * &#x60;\&quot;nacional\&quot;&#x60;: Ambiente de Dados Nacional (ADN) do &lt;a href&#x3D;\&quot;https://www.gov.br/nfse/pt-br\&quot; target&#x3D;\&quot;blank\&quot;&gt;Sistema Nacional NFS-e&lt;/a&gt;.
   */
  @JsonAdapter(ProvedorEnum.Adapter.class)
  public enum ProvedorEnum {
    PADRAO("padrao"),
    
    NACIONAL("nacional");

    private String value;

    ProvedorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvedorEnum fromValue(String value) {
      for (ProvedorEnum b : ProvedorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvedorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvedorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvedorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvedorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvedorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVEDOR = "provedor";
  @SerializedName(SERIALIZED_NAME_PROVEDOR)
  @javax.annotation.Nullable
  private ProvedorEnum provedor;

  /**
   * Identificação do Ambiente.
   */
  @JsonAdapter(AmbienteEnum.Adapter.class)
  public enum AmbienteEnum {
    HOMOLOGACAO("homologacao"),
    
    PRODUCAO("producao");

    private String value;

    AmbienteEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AmbienteEnum fromValue(String value) {
      for (AmbienteEnum b : AmbienteEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AmbienteEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AmbienteEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AmbienteEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AmbienteEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AmbienteEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AMBIENTE = "ambiente";
  @SerializedName(SERIALIZED_NAME_AMBIENTE)
  @javax.annotation.Nonnull
  private AmbienteEnum ambiente;

  public static final String SERIALIZED_NAME_REFERENCIA = "referencia";
  @SerializedName(SERIALIZED_NAME_REFERENCIA)
  @javax.annotation.Nullable
  private String referencia;

  public static final String SERIALIZED_NAME_INF_D_P_S = "infDPS";
  @SerializedName(SERIALIZED_NAME_INF_D_P_S)
  @javax.annotation.Nonnull
  private InfDPS infDPS;

  public NfseDpsPedidoEmissao() {
  }

  public NfseDpsPedidoEmissao provedor(@javax.annotation.Nullable ProvedorEnum provedor) {
    this.provedor = provedor;
    return this;
  }

  /**
   * Default: &#x60;\&quot;padrao\&quot;&#x60;    Identificação do provedor para transmissão da DPS:   * &#x60;\&quot;padrao\&quot;&#x60;: Provedor padrão da prefeitura.   * &#x60;\&quot;nacional\&quot;&#x60;: Ambiente de Dados Nacional (ADN) do &lt;a href&#x3D;\&quot;https://www.gov.br/nfse/pt-br\&quot; target&#x3D;\&quot;blank\&quot;&gt;Sistema Nacional NFS-e&lt;/a&gt;.
   * @return provedor
   */
  @javax.annotation.Nullable
  public ProvedorEnum getProvedor() {
    return provedor;
  }

  public void setProvedor(@javax.annotation.Nullable ProvedorEnum provedor) {
    this.provedor = provedor;
  }


  public NfseDpsPedidoEmissao ambiente(@javax.annotation.Nonnull AmbienteEnum ambiente) {
    this.ambiente = ambiente;
    return this;
  }

  /**
   * Identificação do Ambiente.
   * @return ambiente
   */
  @javax.annotation.Nonnull
  public AmbienteEnum getAmbiente() {
    return ambiente;
  }

  public void setAmbiente(@javax.annotation.Nonnull AmbienteEnum ambiente) {
    this.ambiente = ambiente;
  }


  public NfseDpsPedidoEmissao referencia(@javax.annotation.Nullable String referencia) {
    this.referencia = referencia;
    return this;
  }

  /**
   * Seu identificador único para este documento. Opcional, ajuda a evitar o envio duplicado de um mesmo documento.
   * @return referencia
   */
  @javax.annotation.Nullable
  public String getReferencia() {
    return referencia;
  }

  public void setReferencia(@javax.annotation.Nullable String referencia) {
    this.referencia = referencia;
  }


  public NfseDpsPedidoEmissao infDPS(@javax.annotation.Nonnull InfDPS infDPS) {
    this.infDPS = infDPS;
    return this;
  }

  /**
   * Get infDPS
   * @return infDPS
   */
  @javax.annotation.Nonnull
  public InfDPS getInfDPS() {
    return infDPS;
  }

  public void setInfDPS(@javax.annotation.Nonnull InfDPS infDPS) {
    this.infDPS = infDPS;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfseDpsPedidoEmissao nfseDpsPedidoEmissao = (NfseDpsPedidoEmissao) o;
    return Objects.equals(this.provedor, nfseDpsPedidoEmissao.provedor) &&
        Objects.equals(this.ambiente, nfseDpsPedidoEmissao.ambiente) &&
        Objects.equals(this.referencia, nfseDpsPedidoEmissao.referencia) &&
        Objects.equals(this.infDPS, nfseDpsPedidoEmissao.infDPS);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(provedor, ambiente, referencia, infDPS);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfseDpsPedidoEmissao {\n");
    sb.append("    provedor: ").append(toIndentedString(provedor)).append("\n");
    sb.append("    ambiente: ").append(toIndentedString(ambiente)).append("\n");
    sb.append("    referencia: ").append(toIndentedString(referencia)).append("\n");
    sb.append("    infDPS: ").append(toIndentedString(infDPS)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("provedor");
    openapiFields.add("ambiente");
    openapiFields.add("referencia");
    openapiFields.add("infDPS");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ambiente");
    openapiRequiredFields.add("infDPS");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfseDpsPedidoEmissao
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfseDpsPedidoEmissao.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfseDpsPedidoEmissao is not found in the empty JSON string", NfseDpsPedidoEmissao.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfseDpsPedidoEmissao.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfseDpsPedidoEmissao` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfseDpsPedidoEmissao.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("provedor") != null && !jsonObj.get("provedor").isJsonNull()) && !jsonObj.get("provedor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provedor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provedor").toString()));
      }
      // validate the optional field `provedor`
      if (jsonObj.get("provedor") != null && !jsonObj.get("provedor").isJsonNull()) {
        ProvedorEnum.validateJsonElement(jsonObj.get("provedor"));
      }
      if (!jsonObj.get("ambiente").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ambiente` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ambiente").toString()));
      }
      // validate the required field `ambiente`
      AmbienteEnum.validateJsonElement(jsonObj.get("ambiente"));
      if ((jsonObj.get("referencia") != null && !jsonObj.get("referencia").isJsonNull()) && !jsonObj.get("referencia").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referencia` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referencia").toString()));
      }
      // validate the required field `infDPS`
      InfDPS.validateJsonElement(jsonObj.get("infDPS"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfseDpsPedidoEmissao.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfseDpsPedidoEmissao' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfseDpsPedidoEmissao> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfseDpsPedidoEmissao.class));

       return (TypeAdapter<T>) new TypeAdapter<NfseDpsPedidoEmissao>() {
           @Override
           public void write(JsonWriter out, NfseDpsPedidoEmissao value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfseDpsPedidoEmissao read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfseDpsPedidoEmissao given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfseDpsPedidoEmissao
   * @throws IOException if the JSON string is invalid with respect to NfseDpsPedidoEmissao
   */
  public static NfseDpsPedidoEmissao fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfseDpsPedidoEmissao.class);
  }

  /**
   * Convert an instance of NfseDpsPedidoEmissao to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

