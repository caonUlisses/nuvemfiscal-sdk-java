/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Natureza da carga.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazNatCarga {
  public static final String SERIALIZED_NAME_X_DIME = "xDime";
  @SerializedName(SERIALIZED_NAME_X_DIME)
  @javax.annotation.Nullable
  private String xDime;

  public static final String SERIALIZED_NAME_C_INF_MANU = "cInfManu";
  @SerializedName(SERIALIZED_NAME_C_INF_MANU)
  @javax.annotation.Nullable
  private List<String> cInfManu = new ArrayList<>();

  public CteSefazNatCarga() {
  }

  public CteSefazNatCarga xDime(@javax.annotation.Nullable String xDime) {
    this.xDime = xDime;
    return this;
  }

  /**
   * Dimensão.  Formato:1234X1234X1234 (cm). Esse campo deve sempre que possível ser preenchido. Entretanto, quando for impossível o preenchimento das dimensões, fica obrigatório o preenchimento da cubagem em metro cúbico do leiaute do CT-e da estrutura genérica (infQ).
   * @return xDime
   */
  @javax.annotation.Nullable
  public String getxDime() {
    return xDime;
  }

  public void setxDime(@javax.annotation.Nullable String xDime) {
    this.xDime = xDime;
  }


  public CteSefazNatCarga cInfManu(@javax.annotation.Nullable List<String> cInfManu) {
    this.cInfManu = cInfManu;
    return this;
  }

  public CteSefazNatCarga addCInfManuItem(String cInfManuItem) {
    if (this.cInfManu == null) {
      this.cInfManu = new ArrayList<>();
    }
    this.cInfManu.add(cInfManuItem);
    return this;
  }

  /**
   * Informações de manuseio.  * 01 - certificado do expedidor para embarque de animal vivo  * 02 - artigo perigoso conforme Declaração do Expedidor anexa  * 03 - somente em aeronave cargueira  * 04 - artigo perigoso - declaração do expedidor não requerida  * 05 - artigo perigoso em quantidade isenta  * 06 - gelo seco para refrigeração (especificar no campo observações a quantidade)  * 07 - não restrito (especificar a Disposição Especial no campo observações)  * 08 - artigo perigoso em carga consolidada (especificar a quantidade no campo observações)  * 09 - autorização da autoridade governamental anexa (especificar no campo observações)  * 10 - baterias de íons de lítio em conformidade com a Seção II da PI965 - CAO  * 11 - baterias de íons de lítio em conformidade com a Seção II da PI966  * 12 - baterias de íons de lítio em conformidade com a Seção II da PI967  * 13 - baterias de metal lítio em conformidade com a Seção II da PI968 — CAO  * 14 - baterias de metal lítio em conformidade com a Seção II da PI969  * 15 - baterias de metal lítio em conformidade com a Seção II da PI970  * 99 - outro (especificar no campo observações)
   * @return cInfManu
   */
  @javax.annotation.Nullable
  public List<String> getcInfManu() {
    return cInfManu;
  }

  public void setcInfManu(@javax.annotation.Nullable List<String> cInfManu) {
    this.cInfManu = cInfManu;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazNatCarga cteSefazNatCarga = (CteSefazNatCarga) o;
    return Objects.equals(this.xDime, cteSefazNatCarga.xDime) &&
        Objects.equals(this.cInfManu, cteSefazNatCarga.cInfManu);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(xDime, cInfManu);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazNatCarga {\n");
    sb.append("    xDime: ").append(toIndentedString(xDime)).append("\n");
    sb.append("    cInfManu: ").append(toIndentedString(cInfManu)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("xDime");
    openapiFields.add("cInfManu");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazNatCarga
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazNatCarga.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazNatCarga is not found in the empty JSON string", CteSefazNatCarga.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazNatCarga.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazNatCarga` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("xDime") != null && !jsonObj.get("xDime").isJsonNull()) && !jsonObj.get("xDime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xDime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xDime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cInfManu") != null && !jsonObj.get("cInfManu").isJsonNull() && !jsonObj.get("cInfManu").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cInfManu` to be an array in the JSON string but got `%s`", jsonObj.get("cInfManu").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazNatCarga.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazNatCarga' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazNatCarga> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazNatCarga.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazNatCarga>() {
           @Override
           public void write(JsonWriter out, CteSefazNatCarga value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazNatCarga read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazNatCarga given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazNatCarga
   * @throws IOException if the JSON string is invalid with respect to CteSefazNatCarga
   */
  public static CteSefazNatCarga fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazNatCarga.class);
  }

  /**
   * Convert an instance of CteSefazNatCarga to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

