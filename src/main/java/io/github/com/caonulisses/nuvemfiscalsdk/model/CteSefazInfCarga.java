/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CteSefazInfQ;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Informações da Carga do CT-e.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazInfCarga {
  public static final String SERIALIZED_NAME_V_CARGA = "vCarga";
  @SerializedName(SERIALIZED_NAME_V_CARGA)
  @javax.annotation.Nullable
  private BigDecimal vCarga;

  public static final String SERIALIZED_NAME_PRO_PRED = "proPred";
  @SerializedName(SERIALIZED_NAME_PRO_PRED)
  @javax.annotation.Nullable
  private String proPred;

  public static final String SERIALIZED_NAME_X_OUT_CAT = "xOutCat";
  @SerializedName(SERIALIZED_NAME_X_OUT_CAT)
  @javax.annotation.Nullable
  private String xOutCat;

  public static final String SERIALIZED_NAME_INF_Q = "infQ";
  @SerializedName(SERIALIZED_NAME_INF_Q)
  @javax.annotation.Nonnull
  private List<CteSefazInfQ> infQ = new ArrayList<>();

  public static final String SERIALIZED_NAME_V_CARGA_AVERB = "vCargaAverb";
  @SerializedName(SERIALIZED_NAME_V_CARGA_AVERB)
  @javax.annotation.Nullable
  private BigDecimal vCargaAverb;

  public CteSefazInfCarga() {
  }

  public CteSefazInfCarga vCarga(@javax.annotation.Nullable BigDecimal vCarga) {
    this.vCarga = vCarga;
    return this;
  }

  /**
   * Valor total da carga.  Dever ser informado para todos os modais, com exceção para o Dutoviário.
   * minimum: 0
   * @return vCarga
   */
  @javax.annotation.Nullable
  public BigDecimal getvCarga() {
    return vCarga;
  }

  public void setvCarga(@javax.annotation.Nullable BigDecimal vCarga) {
    this.vCarga = vCarga;
  }


  public CteSefazInfCarga proPred(@javax.annotation.Nullable String proPred) {
    this.proPred = proPred;
    return this;
  }

  /**
   * Produto predominante.  Informar a descrição do produto predominante.
   * @return proPred
   */
  @javax.annotation.Nullable
  public String getProPred() {
    return proPred;
  }

  public void setProPred(@javax.annotation.Nullable String proPred) {
    this.proPred = proPred;
  }


  public CteSefazInfCarga xOutCat(@javax.annotation.Nullable String xOutCat) {
    this.xOutCat = xOutCat;
    return this;
  }

  /**
   * Outras características da carga.  \&quot;FRIA\&quot;, \&quot;GRANEL\&quot;, \&quot;REFRIGERADA\&quot;, \&quot;Medidas: 12X12X12\&quot;.
   * @return xOutCat
   */
  @javax.annotation.Nullable
  public String getxOutCat() {
    return xOutCat;
  }

  public void setxOutCat(@javax.annotation.Nullable String xOutCat) {
    this.xOutCat = xOutCat;
  }


  public CteSefazInfCarga infQ(@javax.annotation.Nonnull List<CteSefazInfQ> infQ) {
    this.infQ = infQ;
    return this;
  }

  public CteSefazInfCarga addInfQItem(CteSefazInfQ infQItem) {
    if (this.infQ == null) {
      this.infQ = new ArrayList<>();
    }
    this.infQ.add(infQItem);
    return this;
  }

  /**
   * Get infQ
   * @return infQ
   */
  @javax.annotation.Nonnull
  public List<CteSefazInfQ> getInfQ() {
    return infQ;
  }

  public void setInfQ(@javax.annotation.Nonnull List<CteSefazInfQ> infQ) {
    this.infQ = infQ;
  }


  public CteSefazInfCarga vCargaAverb(@javax.annotation.Nullable BigDecimal vCargaAverb) {
    this.vCargaAverb = vCargaAverb;
    return this;
  }

  /**
   * Valor da Carga para efeito de averbação.  Normalmente igual ao valor declarado da mercadoria, diferente por exemplo, quando a mercadoria transportada é isenta de tributos nacionais para exportação, onde é preciso averbar um valor maior, pois no caso de indenização, o valor a ser pago será maior.
   * minimum: 0
   * @return vCargaAverb
   */
  @javax.annotation.Nullable
  public BigDecimal getvCargaAverb() {
    return vCargaAverb;
  }

  public void setvCargaAverb(@javax.annotation.Nullable BigDecimal vCargaAverb) {
    this.vCargaAverb = vCargaAverb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazInfCarga cteSefazInfCarga = (CteSefazInfCarga) o;
    return Objects.equals(this.vCarga, cteSefazInfCarga.vCarga) &&
        Objects.equals(this.proPred, cteSefazInfCarga.proPred) &&
        Objects.equals(this.xOutCat, cteSefazInfCarga.xOutCat) &&
        Objects.equals(this.infQ, cteSefazInfCarga.infQ) &&
        Objects.equals(this.vCargaAverb, cteSefazInfCarga.vCargaAverb);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(vCarga, proPred, xOutCat, infQ, vCargaAverb);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazInfCarga {\n");
    sb.append("    vCarga: ").append(toIndentedString(vCarga)).append("\n");
    sb.append("    proPred: ").append(toIndentedString(proPred)).append("\n");
    sb.append("    xOutCat: ").append(toIndentedString(xOutCat)).append("\n");
    sb.append("    infQ: ").append(toIndentedString(infQ)).append("\n");
    sb.append("    vCargaAverb: ").append(toIndentedString(vCargaAverb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("vCarga");
    openapiFields.add("proPred");
    openapiFields.add("xOutCat");
    openapiFields.add("infQ");
    openapiFields.add("vCargaAverb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("proPred");
    openapiRequiredFields.add("infQ");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazInfCarga
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazInfCarga.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazInfCarga is not found in the empty JSON string", CteSefazInfCarga.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazInfCarga.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazInfCarga` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CteSefazInfCarga.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("proPred") != null && !jsonObj.get("proPred").isJsonNull()) && !jsonObj.get("proPred").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proPred` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proPred").toString()));
      }
      if ((jsonObj.get("xOutCat") != null && !jsonObj.get("xOutCat").isJsonNull()) && !jsonObj.get("xOutCat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xOutCat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xOutCat").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("infQ").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `infQ` to be an array in the JSON string but got `%s`", jsonObj.get("infQ").toString()));
      }

      JsonArray jsonArrayinfQ = jsonObj.getAsJsonArray("infQ");
      // validate the required field `infQ` (array)
      for (int i = 0; i < jsonArrayinfQ.size(); i++) {
        CteSefazInfQ.validateJsonElement(jsonArrayinfQ.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazInfCarga.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazInfCarga' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazInfCarga> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazInfCarga.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazInfCarga>() {
           @Override
           public void write(JsonWriter out, CteSefazInfCarga value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazInfCarga read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazInfCarga given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazInfCarga
   * @throws IOException if the JSON string is invalid with respect to CteSefazInfCarga
   */
  public static CteSefazInfCarga fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazInfCarga.class);
  }

  /**
   * Convert an instance of CteSefazInfCarga to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

