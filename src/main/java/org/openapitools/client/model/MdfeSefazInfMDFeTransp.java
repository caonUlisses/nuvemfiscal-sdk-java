/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MdfeSefazInfMDFeTranspPeri;
import org.openapitools.client.model.MdfeSefazUnidadeTransp;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Manifesto Eletrônico de Documentos Fiscais. Somente para modal Aquaviário (vide regras MOC).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class MdfeSefazInfMDFeTransp {
  public static final String SERIALIZED_NAME_CH_M_D_FE = "chMDFe";
  @SerializedName(SERIALIZED_NAME_CH_M_D_FE)
  @javax.annotation.Nullable
  private String chMDFe;

  public static final String SERIALIZED_NAME_IND_REENTREGA = "indReentrega";
  @SerializedName(SERIALIZED_NAME_IND_REENTREGA)
  @javax.annotation.Nullable
  private Integer indReentrega;

  public static final String SERIALIZED_NAME_INF_UNID_TRANSP = "infUnidTransp";
  @SerializedName(SERIALIZED_NAME_INF_UNID_TRANSP)
  @javax.annotation.Nullable
  private List<MdfeSefazUnidadeTransp> infUnidTransp = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERI = "peri";
  @SerializedName(SERIALIZED_NAME_PERI)
  @javax.annotation.Nullable
  private List<MdfeSefazInfMDFeTranspPeri> peri = new ArrayList<>();

  public MdfeSefazInfMDFeTransp() {
  }

  public MdfeSefazInfMDFeTransp chMDFe(@javax.annotation.Nullable String chMDFe) {
    this.chMDFe = chMDFe;
    return this;
  }

  /**
   * Manifesto Eletrônico de Documentos Fiscais.
   * @return chMDFe
   */
  @javax.annotation.Nullable
  public String getChMDFe() {
    return chMDFe;
  }

  public void setChMDFe(@javax.annotation.Nullable String chMDFe) {
    this.chMDFe = chMDFe;
  }


  public MdfeSefazInfMDFeTransp indReentrega(@javax.annotation.Nullable Integer indReentrega) {
    this.indReentrega = indReentrega;
    return this;
  }

  /**
   * Indicador de Reentrega.
   * @return indReentrega
   */
  @javax.annotation.Nullable
  public Integer getIndReentrega() {
    return indReentrega;
  }

  public void setIndReentrega(@javax.annotation.Nullable Integer indReentrega) {
    this.indReentrega = indReentrega;
  }


  public MdfeSefazInfMDFeTransp infUnidTransp(@javax.annotation.Nullable List<MdfeSefazUnidadeTransp> infUnidTransp) {
    this.infUnidTransp = infUnidTransp;
    return this;
  }

  public MdfeSefazInfMDFeTransp addInfUnidTranspItem(MdfeSefazUnidadeTransp infUnidTranspItem) {
    if (this.infUnidTransp == null) {
      this.infUnidTransp = new ArrayList<>();
    }
    this.infUnidTransp.add(infUnidTranspItem);
    return this;
  }

  /**
   * Get infUnidTransp
   * @return infUnidTransp
   */
  @javax.annotation.Nullable
  public List<MdfeSefazUnidadeTransp> getInfUnidTransp() {
    return infUnidTransp;
  }

  public void setInfUnidTransp(@javax.annotation.Nullable List<MdfeSefazUnidadeTransp> infUnidTransp) {
    this.infUnidTransp = infUnidTransp;
  }


  public MdfeSefazInfMDFeTransp peri(@javax.annotation.Nullable List<MdfeSefazInfMDFeTranspPeri> peri) {
    this.peri = peri;
    return this;
  }

  public MdfeSefazInfMDFeTransp addPeriItem(MdfeSefazInfMDFeTranspPeri periItem) {
    if (this.peri == null) {
      this.peri = new ArrayList<>();
    }
    this.peri.add(periItem);
    return this;
  }

  /**
   * Get peri
   * @return peri
   */
  @javax.annotation.Nullable
  public List<MdfeSefazInfMDFeTranspPeri> getPeri() {
    return peri;
  }

  public void setPeri(@javax.annotation.Nullable List<MdfeSefazInfMDFeTranspPeri> peri) {
    this.peri = peri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MdfeSefazInfMDFeTransp mdfeSefazInfMDFeTransp = (MdfeSefazInfMDFeTransp) o;
    return Objects.equals(this.chMDFe, mdfeSefazInfMDFeTransp.chMDFe) &&
        Objects.equals(this.indReentrega, mdfeSefazInfMDFeTransp.indReentrega) &&
        Objects.equals(this.infUnidTransp, mdfeSefazInfMDFeTransp.infUnidTransp) &&
        Objects.equals(this.peri, mdfeSefazInfMDFeTransp.peri);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(chMDFe, indReentrega, infUnidTransp, peri);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MdfeSefazInfMDFeTransp {\n");
    sb.append("    chMDFe: ").append(toIndentedString(chMDFe)).append("\n");
    sb.append("    indReentrega: ").append(toIndentedString(indReentrega)).append("\n");
    sb.append("    infUnidTransp: ").append(toIndentedString(infUnidTransp)).append("\n");
    sb.append("    peri: ").append(toIndentedString(peri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chMDFe");
    openapiFields.add("indReentrega");
    openapiFields.add("infUnidTransp");
    openapiFields.add("peri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chMDFe");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MdfeSefazInfMDFeTransp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MdfeSefazInfMDFeTransp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MdfeSefazInfMDFeTransp is not found in the empty JSON string", MdfeSefazInfMDFeTransp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MdfeSefazInfMDFeTransp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MdfeSefazInfMDFeTransp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MdfeSefazInfMDFeTransp.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chMDFe") != null && !jsonObj.get("chMDFe").isJsonNull()) && !jsonObj.get("chMDFe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chMDFe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chMDFe").toString()));
      }
      if (jsonObj.get("infUnidTransp") != null && !jsonObj.get("infUnidTransp").isJsonNull()) {
        JsonArray jsonArrayinfUnidTransp = jsonObj.getAsJsonArray("infUnidTransp");
        if (jsonArrayinfUnidTransp != null) {
          // ensure the json data is an array
          if (!jsonObj.get("infUnidTransp").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `infUnidTransp` to be an array in the JSON string but got `%s`", jsonObj.get("infUnidTransp").toString()));
          }

          // validate the optional field `infUnidTransp` (array)
          for (int i = 0; i < jsonArrayinfUnidTransp.size(); i++) {
            MdfeSefazUnidadeTransp.validateJsonElement(jsonArrayinfUnidTransp.get(i));
          };
        }
      }
      if (jsonObj.get("peri") != null && !jsonObj.get("peri").isJsonNull()) {
        JsonArray jsonArrayperi = jsonObj.getAsJsonArray("peri");
        if (jsonArrayperi != null) {
          // ensure the json data is an array
          if (!jsonObj.get("peri").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `peri` to be an array in the JSON string but got `%s`", jsonObj.get("peri").toString()));
          }

          // validate the optional field `peri` (array)
          for (int i = 0; i < jsonArrayperi.size(); i++) {
            MdfeSefazInfMDFeTranspPeri.validateJsonElement(jsonArrayperi.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MdfeSefazInfMDFeTransp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MdfeSefazInfMDFeTransp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MdfeSefazInfMDFeTransp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MdfeSefazInfMDFeTransp.class));

       return (TypeAdapter<T>) new TypeAdapter<MdfeSefazInfMDFeTransp>() {
           @Override
           public void write(JsonWriter out, MdfeSefazInfMDFeTransp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MdfeSefazInfMDFeTransp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MdfeSefazInfMDFeTransp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MdfeSefazInfMDFeTransp
   * @throws IOException if the JSON string is invalid with respect to MdfeSefazInfMDFeTransp
   */
  public static MdfeSefazInfMDFeTransp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MdfeSefazInfMDFeTransp.class);
  }

  /**
   * Convert an instance of MdfeSefazInfMDFeTransp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

