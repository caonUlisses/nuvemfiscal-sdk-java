/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Grupo de informações dos tributos PIS/COFINS.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class TribOutrosPisCofins {
  public static final String SERIALIZED_NAME_C_S_T = "CST";
  @SerializedName(SERIALIZED_NAME_C_S_T)
  @javax.annotation.Nullable
  private String CST;

  public static final String SERIALIZED_NAME_V_B_C_PIS_COFINS = "vBCPisCofins";
  @SerializedName(SERIALIZED_NAME_V_B_C_PIS_COFINS)
  @javax.annotation.Nullable
  private BigDecimal vBCPisCofins;

  public static final String SERIALIZED_NAME_P_ALIQ_PIS = "pAliqPis";
  @SerializedName(SERIALIZED_NAME_P_ALIQ_PIS)
  @javax.annotation.Nullable
  private BigDecimal pAliqPis;

  public static final String SERIALIZED_NAME_P_ALIQ_COFINS = "pAliqCofins";
  @SerializedName(SERIALIZED_NAME_P_ALIQ_COFINS)
  @javax.annotation.Nullable
  private BigDecimal pAliqCofins;

  public static final String SERIALIZED_NAME_V_PIS = "vPis";
  @SerializedName(SERIALIZED_NAME_V_PIS)
  @javax.annotation.Nullable
  private BigDecimal vPis;

  public static final String SERIALIZED_NAME_V_COFINS = "vCofins";
  @SerializedName(SERIALIZED_NAME_V_COFINS)
  @javax.annotation.Nullable
  private BigDecimal vCofins;

  public static final String SERIALIZED_NAME_TP_RET_PIS_COFINS = "tpRetPisCofins";
  @SerializedName(SERIALIZED_NAME_TP_RET_PIS_COFINS)
  @javax.annotation.Nullable
  private Integer tpRetPisCofins;

  public TribOutrosPisCofins() {
  }

  public TribOutrosPisCofins CST(@javax.annotation.Nullable String CST) {
    this.CST = CST;
    return this;
  }

  /**
   * Código de Situação Tributária do PIS/COFINS (CST):  * 00 - Nenhum  * 01 - Operação Tributável com Alíquota Básica  * 02 - Operação Tributável com Alíquota Diferenciada  * 03 - Operação Tributável com Alíquota por Unidade de Medida de Produto  * 04 - Operação Tributável monofásica - Revenda a Alíquota Zero  * 05 - Operação Tributável por Substituição Tributária  * 06 - Operação Tributável a Alíquota Zero  * 07 - Operação Tributável da Contribuição  * 08 - Operação sem Incidência da Contribuição  * 09 - Operação com Suspensão da Contribuição
   * @return CST
   */
  @javax.annotation.Nullable
  public String getCST() {
    return CST;
  }

  public void setCST(@javax.annotation.Nullable String CST) {
    this.CST = CST;
  }


  public TribOutrosPisCofins vBCPisCofins(@javax.annotation.Nullable BigDecimal vBCPisCofins) {
    this.vBCPisCofins = vBCPisCofins;
    return this;
  }

  /**
   * Valor da Base de Cálculo do PIS/COFINS (R$).
   * minimum: 0
   * @return vBCPisCofins
   */
  @javax.annotation.Nullable
  public BigDecimal getvBCPisCofins() {
    return vBCPisCofins;
  }

  public void setvBCPisCofins(@javax.annotation.Nullable BigDecimal vBCPisCofins) {
    this.vBCPisCofins = vBCPisCofins;
  }


  public TribOutrosPisCofins pAliqPis(@javax.annotation.Nullable BigDecimal pAliqPis) {
    this.pAliqPis = pAliqPis;
    return this;
  }

  /**
   * Valor da Alíquota do PIS (%%).
   * minimum: 0
   * @return pAliqPis
   */
  @javax.annotation.Nullable
  public BigDecimal getpAliqPis() {
    return pAliqPis;
  }

  public void setpAliqPis(@javax.annotation.Nullable BigDecimal pAliqPis) {
    this.pAliqPis = pAliqPis;
  }


  public TribOutrosPisCofins pAliqCofins(@javax.annotation.Nullable BigDecimal pAliqCofins) {
    this.pAliqCofins = pAliqCofins;
    return this;
  }

  /**
   * Valor da Alíquota da COFINS (%%).
   * minimum: 0
   * @return pAliqCofins
   */
  @javax.annotation.Nullable
  public BigDecimal getpAliqCofins() {
    return pAliqCofins;
  }

  public void setpAliqCofins(@javax.annotation.Nullable BigDecimal pAliqCofins) {
    this.pAliqCofins = pAliqCofins;
  }


  public TribOutrosPisCofins vPis(@javax.annotation.Nullable BigDecimal vPis) {
    this.vPis = vPis;
    return this;
  }

  /**
   * Valor monetário do PIS (R$).
   * minimum: 0
   * @return vPis
   */
  @javax.annotation.Nullable
  public BigDecimal getvPis() {
    return vPis;
  }

  public void setvPis(@javax.annotation.Nullable BigDecimal vPis) {
    this.vPis = vPis;
  }


  public TribOutrosPisCofins vCofins(@javax.annotation.Nullable BigDecimal vCofins) {
    this.vCofins = vCofins;
    return this;
  }

  /**
   * Valor monetário do COFINS (R$).
   * minimum: 0
   * @return vCofins
   */
  @javax.annotation.Nullable
  public BigDecimal getvCofins() {
    return vCofins;
  }

  public void setvCofins(@javax.annotation.Nullable BigDecimal vCofins) {
    this.vCofins = vCofins;
  }


  public TribOutrosPisCofins tpRetPisCofins(@javax.annotation.Nullable Integer tpRetPisCofins) {
    this.tpRetPisCofins = tpRetPisCofins;
    return this;
  }

  /**
   * Tipo de retencao do Pis/Cofins:  * 1 - Retido  * 2 - Não Retido
   * @return tpRetPisCofins
   */
  @javax.annotation.Nullable
  public Integer getTpRetPisCofins() {
    return tpRetPisCofins;
  }

  public void setTpRetPisCofins(@javax.annotation.Nullable Integer tpRetPisCofins) {
    this.tpRetPisCofins = tpRetPisCofins;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TribOutrosPisCofins tribOutrosPisCofins = (TribOutrosPisCofins) o;
    return Objects.equals(this.CST, tribOutrosPisCofins.CST) &&
        Objects.equals(this.vBCPisCofins, tribOutrosPisCofins.vBCPisCofins) &&
        Objects.equals(this.pAliqPis, tribOutrosPisCofins.pAliqPis) &&
        Objects.equals(this.pAliqCofins, tribOutrosPisCofins.pAliqCofins) &&
        Objects.equals(this.vPis, tribOutrosPisCofins.vPis) &&
        Objects.equals(this.vCofins, tribOutrosPisCofins.vCofins) &&
        Objects.equals(this.tpRetPisCofins, tribOutrosPisCofins.tpRetPisCofins);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(CST, vBCPisCofins, pAliqPis, pAliqCofins, vPis, vCofins, tpRetPisCofins);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TribOutrosPisCofins {\n");
    sb.append("    CST: ").append(toIndentedString(CST)).append("\n");
    sb.append("    vBCPisCofins: ").append(toIndentedString(vBCPisCofins)).append("\n");
    sb.append("    pAliqPis: ").append(toIndentedString(pAliqPis)).append("\n");
    sb.append("    pAliqCofins: ").append(toIndentedString(pAliqCofins)).append("\n");
    sb.append("    vPis: ").append(toIndentedString(vPis)).append("\n");
    sb.append("    vCofins: ").append(toIndentedString(vCofins)).append("\n");
    sb.append("    tpRetPisCofins: ").append(toIndentedString(tpRetPisCofins)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CST");
    openapiFields.add("vBCPisCofins");
    openapiFields.add("pAliqPis");
    openapiFields.add("pAliqCofins");
    openapiFields.add("vPis");
    openapiFields.add("vCofins");
    openapiFields.add("tpRetPisCofins");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CST");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TribOutrosPisCofins
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TribOutrosPisCofins.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TribOutrosPisCofins is not found in the empty JSON string", TribOutrosPisCofins.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TribOutrosPisCofins.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TribOutrosPisCofins` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TribOutrosPisCofins.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CST") != null && !jsonObj.get("CST").isJsonNull()) && !jsonObj.get("CST").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CST` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CST").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TribOutrosPisCofins.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TribOutrosPisCofins' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TribOutrosPisCofins> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TribOutrosPisCofins.class));

       return (TypeAdapter<T>) new TypeAdapter<TribOutrosPisCofins>() {
           @Override
           public void write(JsonWriter out, TribOutrosPisCofins value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TribOutrosPisCofins read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TribOutrosPisCofins given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TribOutrosPisCofins
   * @throws IOException if the JSON string is invalid with respect to TribOutrosPisCofins
   */
  public static TribOutrosPisCofins fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TribOutrosPisCofins.class);
  }

  /**
   * Convert an instance of TribOutrosPisCofins to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

