/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfeSefazCOFINSAliq;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfeSefazCOFINSNT;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfeSefazCOFINSOutr;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfeSefazCOFINSQtde;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Dados do COFINS.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazCOFINS {
  public static final String SERIALIZED_NAME_CO_F_I_N_S_ALIQ = "COFINSAliq";
  @SerializedName(SERIALIZED_NAME_CO_F_I_N_S_ALIQ)
  @javax.annotation.Nullable
  private NfeSefazCOFINSAliq coFINSAliq;

  public static final String SERIALIZED_NAME_CO_F_I_N_S_QTDE = "COFINSQtde";
  @SerializedName(SERIALIZED_NAME_CO_F_I_N_S_QTDE)
  @javax.annotation.Nullable
  private NfeSefazCOFINSQtde coFINSQtde;

  public static final String SERIALIZED_NAME_C_O_F_I_N_S_N_T = "COFINSNT";
  @SerializedName(SERIALIZED_NAME_C_O_F_I_N_S_N_T)
  @javax.annotation.Nullable
  private NfeSefazCOFINSNT COFINSNT;

  public static final String SERIALIZED_NAME_CO_F_I_N_S_OUTR = "COFINSOutr";
  @SerializedName(SERIALIZED_NAME_CO_F_I_N_S_OUTR)
  @javax.annotation.Nullable
  private NfeSefazCOFINSOutr coFINSOutr;

  public NfeSefazCOFINS() {
  }

  public NfeSefazCOFINS coFINSAliq(@javax.annotation.Nullable NfeSefazCOFINSAliq coFINSAliq) {
    this.coFINSAliq = coFINSAliq;
    return this;
  }

  /**
   * Get coFINSAliq
   * @return coFINSAliq
   */
  @javax.annotation.Nullable
  public NfeSefazCOFINSAliq getCoFINSAliq() {
    return coFINSAliq;
  }

  public void setCoFINSAliq(@javax.annotation.Nullable NfeSefazCOFINSAliq coFINSAliq) {
    this.coFINSAliq = coFINSAliq;
  }


  public NfeSefazCOFINS coFINSQtde(@javax.annotation.Nullable NfeSefazCOFINSQtde coFINSQtde) {
    this.coFINSQtde = coFINSQtde;
    return this;
  }

  /**
   * Get coFINSQtde
   * @return coFINSQtde
   */
  @javax.annotation.Nullable
  public NfeSefazCOFINSQtde getCoFINSQtde() {
    return coFINSQtde;
  }

  public void setCoFINSQtde(@javax.annotation.Nullable NfeSefazCOFINSQtde coFINSQtde) {
    this.coFINSQtde = coFINSQtde;
  }


  public NfeSefazCOFINS COFINSNT(@javax.annotation.Nullable NfeSefazCOFINSNT COFINSNT) {
    this.COFINSNT = COFINSNT;
    return this;
  }

  /**
   * Get COFINSNT
   * @return COFINSNT
   */
  @javax.annotation.Nullable
  public NfeSefazCOFINSNT getCOFINSNT() {
    return COFINSNT;
  }

  public void setCOFINSNT(@javax.annotation.Nullable NfeSefazCOFINSNT COFINSNT) {
    this.COFINSNT = COFINSNT;
  }


  public NfeSefazCOFINS coFINSOutr(@javax.annotation.Nullable NfeSefazCOFINSOutr coFINSOutr) {
    this.coFINSOutr = coFINSOutr;
    return this;
  }

  /**
   * Get coFINSOutr
   * @return coFINSOutr
   */
  @javax.annotation.Nullable
  public NfeSefazCOFINSOutr getCoFINSOutr() {
    return coFINSOutr;
  }

  public void setCoFINSOutr(@javax.annotation.Nullable NfeSefazCOFINSOutr coFINSOutr) {
    this.coFINSOutr = coFINSOutr;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazCOFINS nfeSefazCOFINS = (NfeSefazCOFINS) o;
    return Objects.equals(this.coFINSAliq, nfeSefazCOFINS.coFINSAliq) &&
        Objects.equals(this.coFINSQtde, nfeSefazCOFINS.coFINSQtde) &&
        Objects.equals(this.COFINSNT, nfeSefazCOFINS.COFINSNT) &&
        Objects.equals(this.coFINSOutr, nfeSefazCOFINS.coFINSOutr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coFINSAliq, coFINSQtde, COFINSNT, coFINSOutr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazCOFINS {\n");
    sb.append("    coFINSAliq: ").append(toIndentedString(coFINSAliq)).append("\n");
    sb.append("    coFINSQtde: ").append(toIndentedString(coFINSQtde)).append("\n");
    sb.append("    COFINSNT: ").append(toIndentedString(COFINSNT)).append("\n");
    sb.append("    coFINSOutr: ").append(toIndentedString(coFINSOutr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("COFINSAliq");
    openapiFields.add("COFINSQtde");
    openapiFields.add("COFINSNT");
    openapiFields.add("COFINSOutr");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazCOFINS
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazCOFINS.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazCOFINS is not found in the empty JSON string", NfeSefazCOFINS.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazCOFINS.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazCOFINS` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `COFINSAliq`
      if (jsonObj.get("COFINSAliq") != null && !jsonObj.get("COFINSAliq").isJsonNull()) {
        NfeSefazCOFINSAliq.validateJsonElement(jsonObj.get("COFINSAliq"));
      }
      // validate the optional field `COFINSQtde`
      if (jsonObj.get("COFINSQtde") != null && !jsonObj.get("COFINSQtde").isJsonNull()) {
        NfeSefazCOFINSQtde.validateJsonElement(jsonObj.get("COFINSQtde"));
      }
      // validate the optional field `COFINSNT`
      if (jsonObj.get("COFINSNT") != null && !jsonObj.get("COFINSNT").isJsonNull()) {
        NfeSefazCOFINSNT.validateJsonElement(jsonObj.get("COFINSNT"));
      }
      // validate the optional field `COFINSOutr`
      if (jsonObj.get("COFINSOutr") != null && !jsonObj.get("COFINSOutr").isJsonNull()) {
        NfeSefazCOFINSOutr.validateJsonElement(jsonObj.get("COFINSOutr"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazCOFINS.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazCOFINS' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazCOFINS> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazCOFINS.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazCOFINS>() {
           @Override
           public void write(JsonWriter out, NfeSefazCOFINS value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazCOFINS read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazCOFINS given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazCOFINS
   * @throws IOException if the JSON string is invalid with respect to NfeSefazCOFINS
   */
  public static NfeSefazCOFINS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazCOFINS.class);
  }

  /**
   * Convert an instance of NfeSefazCOFINS to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

