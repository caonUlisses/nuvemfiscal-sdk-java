/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Informações de tarifa.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazTarifa {
  public static final String SERIALIZED_NAME_C_L = "CL";
  @SerializedName(SERIALIZED_NAME_C_L)
  @javax.annotation.Nullable
  private String CL;

  public static final String SERIALIZED_NAME_C_TAR = "cTar";
  @SerializedName(SERIALIZED_NAME_C_TAR)
  @javax.annotation.Nullable
  private String cTar;

  public static final String SERIALIZED_NAME_V_TAR = "vTar";
  @SerializedName(SERIALIZED_NAME_V_TAR)
  @javax.annotation.Nullable
  private BigDecimal vTar;

  public CteSefazTarifa() {
  }

  public CteSefazTarifa CL(@javax.annotation.Nullable String CL) {
    this.CL = CL;
    return this;
  }

  /**
   * Classe.  Preencher com:  * M - Tarifa Mínima  * G - Tarifa Geral  * E - Tarifa Específica
   * @return CL
   */
  @javax.annotation.Nullable
  public String getCL() {
    return CL;
  }

  public void setCL(@javax.annotation.Nullable String CL) {
    this.CL = CL;
  }


  public CteSefazTarifa cTar(@javax.annotation.Nullable String cTar) {
    this.cTar = cTar;
    return this;
  }

  /**
   * Código da Tarifa.  Deverão ser incluídos os códigos de três dígitos, correspondentes à tarifa.
   * @return cTar
   */
  @javax.annotation.Nullable
  public String getcTar() {
    return cTar;
  }

  public void setcTar(@javax.annotation.Nullable String cTar) {
    this.cTar = cTar;
  }


  public CteSefazTarifa vTar(@javax.annotation.Nullable BigDecimal vTar) {
    this.vTar = vTar;
    return this;
  }

  /**
   * Valor da Tarifa.  Valor da tarifa por kg quando for o caso.
   * minimum: 0
   * @return vTar
   */
  @javax.annotation.Nullable
  public BigDecimal getvTar() {
    return vTar;
  }

  public void setvTar(@javax.annotation.Nullable BigDecimal vTar) {
    this.vTar = vTar;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazTarifa cteSefazTarifa = (CteSefazTarifa) o;
    return Objects.equals(this.CL, cteSefazTarifa.CL) &&
        Objects.equals(this.cTar, cteSefazTarifa.cTar) &&
        Objects.equals(this.vTar, cteSefazTarifa.vTar);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(CL, cTar, vTar);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazTarifa {\n");
    sb.append("    CL: ").append(toIndentedString(CL)).append("\n");
    sb.append("    cTar: ").append(toIndentedString(cTar)).append("\n");
    sb.append("    vTar: ").append(toIndentedString(vTar)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CL");
    openapiFields.add("cTar");
    openapiFields.add("vTar");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CL");
    openapiRequiredFields.add("vTar");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazTarifa
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazTarifa.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazTarifa is not found in the empty JSON string", CteSefazTarifa.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazTarifa.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazTarifa` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CteSefazTarifa.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CL") != null && !jsonObj.get("CL").isJsonNull()) && !jsonObj.get("CL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CL").toString()));
      }
      if ((jsonObj.get("cTar") != null && !jsonObj.get("cTar").isJsonNull()) && !jsonObj.get("cTar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cTar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cTar").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazTarifa.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazTarifa' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazTarifa> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazTarifa.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazTarifa>() {
           @Override
           public void write(JsonWriter out, CteSefazTarifa value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazTarifa read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazTarifa given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazTarifa
   * @throws IOException if the JSON string is invalid with respect to CteSefazTarifa
   */
  public static CteSefazTarifa fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazTarifa.class);
  }

  /**
   * Convert an instance of CteSefazTarifa to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

