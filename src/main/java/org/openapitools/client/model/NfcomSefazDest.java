/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NfcomSefazEndeDest;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identificação do destinatário / assinante.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfcomSefazDest {
  public static final String SERIALIZED_NAME_X_NOME = "xNome";
  @SerializedName(SERIALIZED_NAME_X_NOME)
  @javax.annotation.Nullable
  private String xNome;

  public static final String SERIALIZED_NAME_C_N_P_J = "CNPJ";
  @SerializedName(SERIALIZED_NAME_C_N_P_J)
  @javax.annotation.Nullable
  private String CNPJ;

  public static final String SERIALIZED_NAME_C_P_F = "CPF";
  @SerializedName(SERIALIZED_NAME_C_P_F)
  @javax.annotation.Nullable
  private String CPF;

  public static final String SERIALIZED_NAME_ID_OUTROS = "idOutros";
  @SerializedName(SERIALIZED_NAME_ID_OUTROS)
  @javax.annotation.Nullable
  private String idOutros;

  public static final String SERIALIZED_NAME_IND_I_E_DEST = "indIEDest";
  @SerializedName(SERIALIZED_NAME_IND_I_E_DEST)
  @javax.annotation.Nullable
  private Integer indIEDest;

  public static final String SERIALIZED_NAME_I_E = "IE";
  @SerializedName(SERIALIZED_NAME_I_E)
  @javax.annotation.Nullable
  private String IE;

  public static final String SERIALIZED_NAME_I_M = "IM";
  @SerializedName(SERIALIZED_NAME_I_M)
  @javax.annotation.Nullable
  private String IM;

  public static final String SERIALIZED_NAME_ENDER_DEST = "enderDest";
  @SerializedName(SERIALIZED_NAME_ENDER_DEST)
  @javax.annotation.Nonnull
  private NfcomSefazEndeDest enderDest;

  public NfcomSefazDest() {
  }

  public NfcomSefazDest xNome(@javax.annotation.Nullable String xNome) {
    this.xNome = xNome;
    return this;
  }

  /**
   * Razão social ou Nome do destinatário.
   * @return xNome
   */
  @javax.annotation.Nullable
  public String getxNome() {
    return xNome;
  }

  public void setxNome(@javax.annotation.Nullable String xNome) {
    this.xNome = xNome;
  }


  public NfcomSefazDest CNPJ(@javax.annotation.Nullable String CNPJ) {
    this.CNPJ = CNPJ;
    return this;
  }

  /**
   * Número do CNPJ.  Informar os zeros não significativos.
   * @return CNPJ
   */
  @javax.annotation.Nullable
  public String getCNPJ() {
    return CNPJ;
  }

  public void setCNPJ(@javax.annotation.Nullable String CNPJ) {
    this.CNPJ = CNPJ;
  }


  public NfcomSefazDest CPF(@javax.annotation.Nullable String CPF) {
    this.CPF = CPF;
    return this;
  }

  /**
   * Número do CPF.  Informar os zeros não significativos.
   * @return CPF
   */
  @javax.annotation.Nullable
  public String getCPF() {
    return CPF;
  }

  public void setCPF(@javax.annotation.Nullable String CPF) {
    this.CPF = CPF;
  }


  public NfcomSefazDest idOutros(@javax.annotation.Nullable String idOutros) {
    this.idOutros = idOutros;
    return this;
  }

  /**
   * Identificação do destinatário outros.  Identificação do destinatário não obrigado a inscrição do CPF tais como estrangeiro, indígena e quilombola  Em caso de não contar CPF do assinante, informar o RG.
   * @return idOutros
   */
  @javax.annotation.Nullable
  public String getIdOutros() {
    return idOutros;
  }

  public void setIdOutros(@javax.annotation.Nullable String idOutros) {
    this.idOutros = idOutros;
  }


  public NfcomSefazDest indIEDest(@javax.annotation.Nullable Integer indIEDest) {
    this.indIEDest = indIEDest;
    return this;
  }

  /**
   * Indicador da IE do Destinatário.  * 1 - Contribuinte ICMS (informar a IE do destinatário)  * 2 - Contribuinte isento de Inscrição no cadastro de Contribuintes do ICMS  * 9 - Não Contribuinte, que pode ou não possuir Inscrição Estadual no Cadastro de Contribuintes do ICMS  Nota: No caso de Contribuinte Isento de Inscrição (indIEDest&#x3D;2) informar a tag IE do destinatário com o literal ISENTO.
   * @return indIEDest
   */
  @javax.annotation.Nullable
  public Integer getIndIEDest() {
    return indIEDest;
  }

  public void setIndIEDest(@javax.annotation.Nullable Integer indIEDest) {
    this.indIEDest = indIEDest;
  }


  public NfcomSefazDest IE(@javax.annotation.Nullable String IE) {
    this.IE = IE;
    return this;
  }

  /**
   * Inscrição Estadual do destinatário.
   * @return IE
   */
  @javax.annotation.Nullable
  public String getIE() {
    return IE;
  }

  public void setIE(@javax.annotation.Nullable String IE) {
    this.IE = IE;
  }


  public NfcomSefazDest IM(@javax.annotation.Nullable String IM) {
    this.IM = IM;
    return this;
  }

  /**
   * Inscrição Municipal.
   * @return IM
   */
  @javax.annotation.Nullable
  public String getIM() {
    return IM;
  }

  public void setIM(@javax.annotation.Nullable String IM) {
    this.IM = IM;
  }


  public NfcomSefazDest enderDest(@javax.annotation.Nonnull NfcomSefazEndeDest enderDest) {
    this.enderDest = enderDest;
    return this;
  }

  /**
   * Get enderDest
   * @return enderDest
   */
  @javax.annotation.Nonnull
  public NfcomSefazEndeDest getEnderDest() {
    return enderDest;
  }

  public void setEnderDest(@javax.annotation.Nonnull NfcomSefazEndeDest enderDest) {
    this.enderDest = enderDest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfcomSefazDest nfcomSefazDest = (NfcomSefazDest) o;
    return Objects.equals(this.xNome, nfcomSefazDest.xNome) &&
        Objects.equals(this.CNPJ, nfcomSefazDest.CNPJ) &&
        Objects.equals(this.CPF, nfcomSefazDest.CPF) &&
        Objects.equals(this.idOutros, nfcomSefazDest.idOutros) &&
        Objects.equals(this.indIEDest, nfcomSefazDest.indIEDest) &&
        Objects.equals(this.IE, nfcomSefazDest.IE) &&
        Objects.equals(this.IM, nfcomSefazDest.IM) &&
        Objects.equals(this.enderDest, nfcomSefazDest.enderDest);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(xNome, CNPJ, CPF, idOutros, indIEDest, IE, IM, enderDest);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfcomSefazDest {\n");
    sb.append("    xNome: ").append(toIndentedString(xNome)).append("\n");
    sb.append("    CNPJ: ").append(toIndentedString(CNPJ)).append("\n");
    sb.append("    CPF: ").append(toIndentedString(CPF)).append("\n");
    sb.append("    idOutros: ").append(toIndentedString(idOutros)).append("\n");
    sb.append("    indIEDest: ").append(toIndentedString(indIEDest)).append("\n");
    sb.append("    IE: ").append(toIndentedString(IE)).append("\n");
    sb.append("    IM: ").append(toIndentedString(IM)).append("\n");
    sb.append("    enderDest: ").append(toIndentedString(enderDest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("xNome");
    openapiFields.add("CNPJ");
    openapiFields.add("CPF");
    openapiFields.add("idOutros");
    openapiFields.add("indIEDest");
    openapiFields.add("IE");
    openapiFields.add("IM");
    openapiFields.add("enderDest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("xNome");
    openapiRequiredFields.add("indIEDest");
    openapiRequiredFields.add("enderDest");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfcomSefazDest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfcomSefazDest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfcomSefazDest is not found in the empty JSON string", NfcomSefazDest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfcomSefazDest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfcomSefazDest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfcomSefazDest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("xNome") != null && !jsonObj.get("xNome").isJsonNull()) && !jsonObj.get("xNome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xNome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xNome").toString()));
      }
      if ((jsonObj.get("CNPJ") != null && !jsonObj.get("CNPJ").isJsonNull()) && !jsonObj.get("CNPJ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CNPJ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CNPJ").toString()));
      }
      if ((jsonObj.get("CPF") != null && !jsonObj.get("CPF").isJsonNull()) && !jsonObj.get("CPF").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CPF` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CPF").toString()));
      }
      if ((jsonObj.get("idOutros") != null && !jsonObj.get("idOutros").isJsonNull()) && !jsonObj.get("idOutros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idOutros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idOutros").toString()));
      }
      if ((jsonObj.get("IE") != null && !jsonObj.get("IE").isJsonNull()) && !jsonObj.get("IE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IE").toString()));
      }
      if ((jsonObj.get("IM") != null && !jsonObj.get("IM").isJsonNull()) && !jsonObj.get("IM").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IM` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IM").toString()));
      }
      // validate the required field `enderDest`
      NfcomSefazEndeDest.validateJsonElement(jsonObj.get("enderDest"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfcomSefazDest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfcomSefazDest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfcomSefazDest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfcomSefazDest.class));

       return (TypeAdapter<T>) new TypeAdapter<NfcomSefazDest>() {
           @Override
           public void write(JsonWriter out, NfcomSefazDest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfcomSefazDest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfcomSefazDest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfcomSefazDest
   * @throws IOException if the JSON string is invalid with respect to NfcomSefazDest
   */
  public static NfcomSefazDest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfcomSefazDest.class);
  }

  /**
   * Convert an instance of NfcomSefazDest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

