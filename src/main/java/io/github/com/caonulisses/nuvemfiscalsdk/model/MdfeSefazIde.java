/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazInfMunCarrega;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazInfPercurso;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Identificação do MDF-e.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class MdfeSefazIde {
  public static final String SERIALIZED_NAME_C_U_F = "cUF";
  @SerializedName(SERIALIZED_NAME_C_U_F)
  @javax.annotation.Nullable
  private Integer cUF;

  public static final String SERIALIZED_NAME_TP_AMB = "tpAmb";
  @SerializedName(SERIALIZED_NAME_TP_AMB)
  @javax.annotation.Nullable
  private Integer tpAmb;

  public static final String SERIALIZED_NAME_TP_EMIT = "tpEmit";
  @SerializedName(SERIALIZED_NAME_TP_EMIT)
  @javax.annotation.Nullable
  private Integer tpEmit;

  public static final String SERIALIZED_NAME_TP_TRANSP = "tpTransp";
  @SerializedName(SERIALIZED_NAME_TP_TRANSP)
  @javax.annotation.Nullable
  private Integer tpTransp;

  public static final String SERIALIZED_NAME_MOD = "mod";
  @SerializedName(SERIALIZED_NAME_MOD)
  @javax.annotation.Nullable
  private Integer mod;

  public static final String SERIALIZED_NAME_SERIE = "serie";
  @SerializedName(SERIALIZED_NAME_SERIE)
  @javax.annotation.Nullable
  private Integer serie;

  public static final String SERIALIZED_NAME_N_M_D_F = "nMDF";
  @SerializedName(SERIALIZED_NAME_N_M_D_F)
  @javax.annotation.Nullable
  private Integer nMDF;

  public static final String SERIALIZED_NAME_C_M_D_F = "cMDF";
  @SerializedName(SERIALIZED_NAME_C_M_D_F)
  @javax.annotation.Nullable
  private String cMDF;

  public static final String SERIALIZED_NAME_C_D_V = "cDV";
  @SerializedName(SERIALIZED_NAME_C_D_V)
  @javax.annotation.Nullable
  private Integer cDV;

  public static final String SERIALIZED_NAME_MODAL = "modal";
  @SerializedName(SERIALIZED_NAME_MODAL)
  @javax.annotation.Nullable
  private Integer modal;

  public static final String SERIALIZED_NAME_DH_EMI = "dhEmi";
  @SerializedName(SERIALIZED_NAME_DH_EMI)
  @javax.annotation.Nullable
  private OffsetDateTime dhEmi;

  public static final String SERIALIZED_NAME_TP_EMIS = "tpEmis";
  @SerializedName(SERIALIZED_NAME_TP_EMIS)
  @javax.annotation.Nullable
  private Integer tpEmis;

  public static final String SERIALIZED_NAME_PROC_EMI = "procEmi";
  @SerializedName(SERIALIZED_NAME_PROC_EMI)
  @javax.annotation.Nullable
  private String procEmi;

  public static final String SERIALIZED_NAME_VER_PROC = "verProc";
  @SerializedName(SERIALIZED_NAME_VER_PROC)
  @javax.annotation.Nullable
  private String verProc;

  public static final String SERIALIZED_NAME_UF_INI = "UFIni";
  @SerializedName(SERIALIZED_NAME_UF_INI)
  @javax.annotation.Nullable
  private String ufIni;

  public static final String SERIALIZED_NAME_UF_FIM = "UFFim";
  @SerializedName(SERIALIZED_NAME_UF_FIM)
  @javax.annotation.Nullable
  private String ufFim;

  public static final String SERIALIZED_NAME_INF_MUN_CARREGA = "infMunCarrega";
  @SerializedName(SERIALIZED_NAME_INF_MUN_CARREGA)
  @javax.annotation.Nonnull
  private List<MdfeSefazInfMunCarrega> infMunCarrega = new ArrayList<>();

  public static final String SERIALIZED_NAME_INF_PERCURSO = "infPercurso";
  @SerializedName(SERIALIZED_NAME_INF_PERCURSO)
  @javax.annotation.Nullable
  private List<MdfeSefazInfPercurso> infPercurso = new ArrayList<>();

  public static final String SERIALIZED_NAME_DH_INI_VIAGEM = "dhIniViagem";
  @SerializedName(SERIALIZED_NAME_DH_INI_VIAGEM)
  @javax.annotation.Nullable
  private OffsetDateTime dhIniViagem;

  public static final String SERIALIZED_NAME_IND_CANAL_VERDE = "indCanalVerde";
  @SerializedName(SERIALIZED_NAME_IND_CANAL_VERDE)
  @javax.annotation.Nullable
  private Integer indCanalVerde;

  public static final String SERIALIZED_NAME_IND_CARREGA_POSTERIOR = "indCarregaPosterior";
  @SerializedName(SERIALIZED_NAME_IND_CARREGA_POSTERIOR)
  @javax.annotation.Nullable
  private Integer indCarregaPosterior;

  public MdfeSefazIde() {
  }

  public MdfeSefazIde cUF(@javax.annotation.Nullable Integer cUF) {
    this.cUF = cUF;
    return this;
  }

  /**
   * Código da UF do emitente do MDF-e.  Código da UF do emitente do Documento Fiscal. Utilizar a  Tabela do IBGE de código de unidades da federação.
   * @return cUF
   */
  @javax.annotation.Nullable
  public Integer getcUF() {
    return cUF;
  }

  public void setcUF(@javax.annotation.Nullable Integer cUF) {
    this.cUF = cUF;
  }


  public MdfeSefazIde tpAmb(@javax.annotation.Nullable Integer tpAmb) {
    this.tpAmb = tpAmb;
    return this;
  }

  /**
   * Tipo do Ambiente.  * 1 - Produção  * 2 - Homologação
   * @return tpAmb
   */
  @javax.annotation.Nullable
  public Integer getTpAmb() {
    return tpAmb;
  }

  public void setTpAmb(@javax.annotation.Nullable Integer tpAmb) {
    this.tpAmb = tpAmb;
  }


  public MdfeSefazIde tpEmit(@javax.annotation.Nullable Integer tpEmit) {
    this.tpEmit = tpEmit;
    return this;
  }

  /**
   * Tipo do Emitente.  * 1 - Prestador de serviço de transporte  * 2 - Transportador de Carga Própria 3 - Prestador de serviço de transporte que emitirá CT-e Globalizado  OBS: Deve ser preenchido com 2 para emitentes de NF-e e pelas transportadoras quando estiverem fazendo transporte de carga própria. Deve ser preenchido com 3 para transportador de carga que emitirá à posteriori CT-e Globalizado relacionando as NF-e.
   * @return tpEmit
   */
  @javax.annotation.Nullable
  public Integer getTpEmit() {
    return tpEmit;
  }

  public void setTpEmit(@javax.annotation.Nullable Integer tpEmit) {
    this.tpEmit = tpEmit;
  }


  public MdfeSefazIde tpTransp(@javax.annotation.Nullable Integer tpTransp) {
    this.tpTransp = tpTransp;
    return this;
  }

  /**
   * Tipo do Transportador.  * 1 - ETC  * 2 - TAC  * 3 - CTC
   * @return tpTransp
   */
  @javax.annotation.Nullable
  public Integer getTpTransp() {
    return tpTransp;
  }

  public void setTpTransp(@javax.annotation.Nullable Integer tpTransp) {
    this.tpTransp = tpTransp;
  }


  public MdfeSefazIde mod(@javax.annotation.Nullable Integer mod) {
    this.mod = mod;
    return this;
  }

  /**
   * Modelo do Manifesto Eletrônico.  Utilizar o código 58 para identificação do MDF-e.
   * @return mod
   */
  @javax.annotation.Nullable
  public Integer getMod() {
    return mod;
  }

  public void setMod(@javax.annotation.Nullable Integer mod) {
    this.mod = mod;
  }


  public MdfeSefazIde serie(@javax.annotation.Nullable Integer serie) {
    this.serie = serie;
    return this;
  }

  /**
   * Série do Manifesto.  Informar a série do documento fiscal (informar zero se inexistente).  Série na faixa [920-969]: Reservada para emissão por contribuinte pessoa física com inscrição estadual.
   * minimum: 0
   * maximum: 999
   * @return serie
   */
  @javax.annotation.Nullable
  public Integer getSerie() {
    return serie;
  }

  public void setSerie(@javax.annotation.Nullable Integer serie) {
    this.serie = serie;
  }


  public MdfeSefazIde nMDF(@javax.annotation.Nullable Integer nMDF) {
    this.nMDF = nMDF;
    return this;
  }

  /**
   * Número do Manifesto.  Número que identifica o Manifesto. 1 a 999999999.
   * minimum: 1
   * maximum: 999999999
   * @return nMDF
   */
  @javax.annotation.Nullable
  public Integer getnMDF() {
    return nMDF;
  }

  public void setnMDF(@javax.annotation.Nullable Integer nMDF) {
    this.nMDF = nMDF;
  }


  public MdfeSefazIde cMDF(@javax.annotation.Nullable String cMDF) {
    this.cMDF = cMDF;
    return this;
  }

  /**
   * Código numérico que compõe a Chave de Acesso.  Código aleatório gerado pelo emitente, com o objetivo de evitar acessos indevidos ao documento.    *Geramos automaticamente quando nenhum valor é informado.*
   * @return cMDF
   */
  @javax.annotation.Nullable
  public String getcMDF() {
    return cMDF;
  }

  public void setcMDF(@javax.annotation.Nullable String cMDF) {
    this.cMDF = cMDF;
  }


  public MdfeSefazIde cDV(@javax.annotation.Nullable Integer cDV) {
    this.cDV = cDV;
    return this;
  }

  /**
   * Digito verificador da chave de acesso do Manifesto.  Informar o dígito  de controle da chave de acesso do MDF-e, que deve ser calculado com a aplicação do algoritmo módulo 11 (base 2,9) da chave de acesso.    *Geramos automaticamente quando nenhum valor é informado.*
   * minimum: 0
   * maximum: 9
   * @return cDV
   */
  @javax.annotation.Nullable
  public Integer getcDV() {
    return cDV;
  }

  public void setcDV(@javax.annotation.Nullable Integer cDV) {
    this.cDV = cDV;
  }


  public MdfeSefazIde modal(@javax.annotation.Nullable Integer modal) {
    this.modal = modal;
    return this;
  }

  /**
   * Modalidade de transporte.  * 1 - Rodoviário  * 2 - Aéreo  * 3 - Aquaviário  * 4 - Ferroviário
   * @return modal
   */
  @javax.annotation.Nullable
  public Integer getModal() {
    return modal;
  }

  public void setModal(@javax.annotation.Nullable Integer modal) {
    this.modal = modal;
  }


  public MdfeSefazIde dhEmi(@javax.annotation.Nullable OffsetDateTime dhEmi) {
    this.dhEmi = dhEmi;
    return this;
  }

  /**
   * Data e hora de emissão do Manifesto.  Formato AAAA-MM-DDTHH:MM:DD TZD.
   * @return dhEmi
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDhEmi() {
    return dhEmi;
  }

  public void setDhEmi(@javax.annotation.Nullable OffsetDateTime dhEmi) {
    this.dhEmi = dhEmi;
  }


  public MdfeSefazIde tpEmis(@javax.annotation.Nullable Integer tpEmis) {
    this.tpEmis = tpEmis;
    return this;
  }

  /**
   * Forma de emissão do Manifesto.  * 1 - Normal  * 2 - Contingência  * 3 - Regime Especial NFF
   * @return tpEmis
   */
  @javax.annotation.Nullable
  public Integer getTpEmis() {
    return tpEmis;
  }

  public void setTpEmis(@javax.annotation.Nullable Integer tpEmis) {
    this.tpEmis = tpEmis;
  }


  public MdfeSefazIde procEmi(@javax.annotation.Nullable String procEmi) {
    this.procEmi = procEmi;
    return this;
  }

  /**
   * Identificação do processo de emissão do Manifesto.  * 0 - emissão de MDF-e com aplicativo do contribuinte
   * @return procEmi
   */
  @javax.annotation.Nullable
  public String getProcEmi() {
    return procEmi;
  }

  public void setProcEmi(@javax.annotation.Nullable String procEmi) {
    this.procEmi = procEmi;
  }


  public MdfeSefazIde verProc(@javax.annotation.Nullable String verProc) {
    this.verProc = verProc;
    return this;
  }

  /**
   * Versão do processo de emissão.  Informar a versão do aplicativo emissor de MDF-e.
   * @return verProc
   */
  @javax.annotation.Nullable
  public String getVerProc() {
    return verProc;
  }

  public void setVerProc(@javax.annotation.Nullable String verProc) {
    this.verProc = verProc;
  }


  public MdfeSefazIde ufIni(@javax.annotation.Nullable String ufIni) {
    this.ufIni = ufIni;
    return this;
  }

  /**
   * Sigla da UF do Carregamento.  Utilizar a Tabela do IBGE de código de unidades da federação.  Informar &#39;EX&#39; para operações com o exterior.
   * @return ufIni
   */
  @javax.annotation.Nullable
  public String getUfIni() {
    return ufIni;
  }

  public void setUfIni(@javax.annotation.Nullable String ufIni) {
    this.ufIni = ufIni;
  }


  public MdfeSefazIde ufFim(@javax.annotation.Nullable String ufFim) {
    this.ufFim = ufFim;
    return this;
  }

  /**
   * Sigla da UF do Descarregamento.  Utilizar a Tabela do IBGE de código de unidades da federação.  Informar &#39;EX&#39; para operações com o exterior.
   * @return ufFim
   */
  @javax.annotation.Nullable
  public String getUfFim() {
    return ufFim;
  }

  public void setUfFim(@javax.annotation.Nullable String ufFim) {
    this.ufFim = ufFim;
  }


  public MdfeSefazIde infMunCarrega(@javax.annotation.Nonnull List<MdfeSefazInfMunCarrega> infMunCarrega) {
    this.infMunCarrega = infMunCarrega;
    return this;
  }

  public MdfeSefazIde addInfMunCarregaItem(MdfeSefazInfMunCarrega infMunCarregaItem) {
    if (this.infMunCarrega == null) {
      this.infMunCarrega = new ArrayList<>();
    }
    this.infMunCarrega.add(infMunCarregaItem);
    return this;
  }

  /**
   * Get infMunCarrega
   * @return infMunCarrega
   */
  @javax.annotation.Nonnull
  public List<MdfeSefazInfMunCarrega> getInfMunCarrega() {
    return infMunCarrega;
  }

  public void setInfMunCarrega(@javax.annotation.Nonnull List<MdfeSefazInfMunCarrega> infMunCarrega) {
    this.infMunCarrega = infMunCarrega;
  }


  public MdfeSefazIde infPercurso(@javax.annotation.Nullable List<MdfeSefazInfPercurso> infPercurso) {
    this.infPercurso = infPercurso;
    return this;
  }

  public MdfeSefazIde addInfPercursoItem(MdfeSefazInfPercurso infPercursoItem) {
    if (this.infPercurso == null) {
      this.infPercurso = new ArrayList<>();
    }
    this.infPercurso.add(infPercursoItem);
    return this;
  }

  /**
   * Get infPercurso
   * @return infPercurso
   */
  @javax.annotation.Nullable
  public List<MdfeSefazInfPercurso> getInfPercurso() {
    return infPercurso;
  }

  public void setInfPercurso(@javax.annotation.Nullable List<MdfeSefazInfPercurso> infPercurso) {
    this.infPercurso = infPercurso;
  }


  public MdfeSefazIde dhIniViagem(@javax.annotation.Nullable OffsetDateTime dhIniViagem) {
    this.dhIniViagem = dhIniViagem;
    return this;
  }

  /**
   * Data e hora previstos de inicio da viagem.  Formato AAAA-MM-DDTHH:MM:DD TZD.
   * @return dhIniViagem
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDhIniViagem() {
    return dhIniViagem;
  }

  public void setDhIniViagem(@javax.annotation.Nullable OffsetDateTime dhIniViagem) {
    this.dhIniViagem = dhIniViagem;
  }


  public MdfeSefazIde indCanalVerde(@javax.annotation.Nullable Integer indCanalVerde) {
    this.indCanalVerde = indCanalVerde;
    return this;
  }

  /**
   * Indicador de participação do Canal Verde.
   * @return indCanalVerde
   */
  @javax.annotation.Nullable
  public Integer getIndCanalVerde() {
    return indCanalVerde;
  }

  public void setIndCanalVerde(@javax.annotation.Nullable Integer indCanalVerde) {
    this.indCanalVerde = indCanalVerde;
  }


  public MdfeSefazIde indCarregaPosterior(@javax.annotation.Nullable Integer indCarregaPosterior) {
    this.indCarregaPosterior = indCarregaPosterior;
    return this;
  }

  /**
   * Indicador de MDF-e com inclusão da Carga posterior a emissão por evento de inclusão de DF-e.
   * @return indCarregaPosterior
   */
  @javax.annotation.Nullable
  public Integer getIndCarregaPosterior() {
    return indCarregaPosterior;
  }

  public void setIndCarregaPosterior(@javax.annotation.Nullable Integer indCarregaPosterior) {
    this.indCarregaPosterior = indCarregaPosterior;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MdfeSefazIde mdfeSefazIde = (MdfeSefazIde) o;
    return Objects.equals(this.cUF, mdfeSefazIde.cUF) &&
        Objects.equals(this.tpAmb, mdfeSefazIde.tpAmb) &&
        Objects.equals(this.tpEmit, mdfeSefazIde.tpEmit) &&
        Objects.equals(this.tpTransp, mdfeSefazIde.tpTransp) &&
        Objects.equals(this.mod, mdfeSefazIde.mod) &&
        Objects.equals(this.serie, mdfeSefazIde.serie) &&
        Objects.equals(this.nMDF, mdfeSefazIde.nMDF) &&
        Objects.equals(this.cMDF, mdfeSefazIde.cMDF) &&
        Objects.equals(this.cDV, mdfeSefazIde.cDV) &&
        Objects.equals(this.modal, mdfeSefazIde.modal) &&
        Objects.equals(this.dhEmi, mdfeSefazIde.dhEmi) &&
        Objects.equals(this.tpEmis, mdfeSefazIde.tpEmis) &&
        Objects.equals(this.procEmi, mdfeSefazIde.procEmi) &&
        Objects.equals(this.verProc, mdfeSefazIde.verProc) &&
        Objects.equals(this.ufIni, mdfeSefazIde.ufIni) &&
        Objects.equals(this.ufFim, mdfeSefazIde.ufFim) &&
        Objects.equals(this.infMunCarrega, mdfeSefazIde.infMunCarrega) &&
        Objects.equals(this.infPercurso, mdfeSefazIde.infPercurso) &&
        Objects.equals(this.dhIniViagem, mdfeSefazIde.dhIniViagem) &&
        Objects.equals(this.indCanalVerde, mdfeSefazIde.indCanalVerde) &&
        Objects.equals(this.indCarregaPosterior, mdfeSefazIde.indCarregaPosterior);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cUF, tpAmb, tpEmit, tpTransp, mod, serie, nMDF, cMDF, cDV, modal, dhEmi, tpEmis, procEmi, verProc, ufIni, ufFim, infMunCarrega, infPercurso, dhIniViagem, indCanalVerde, indCarregaPosterior);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MdfeSefazIde {\n");
    sb.append("    cUF: ").append(toIndentedString(cUF)).append("\n");
    sb.append("    tpAmb: ").append(toIndentedString(tpAmb)).append("\n");
    sb.append("    tpEmit: ").append(toIndentedString(tpEmit)).append("\n");
    sb.append("    tpTransp: ").append(toIndentedString(tpTransp)).append("\n");
    sb.append("    mod: ").append(toIndentedString(mod)).append("\n");
    sb.append("    serie: ").append(toIndentedString(serie)).append("\n");
    sb.append("    nMDF: ").append(toIndentedString(nMDF)).append("\n");
    sb.append("    cMDF: ").append(toIndentedString(cMDF)).append("\n");
    sb.append("    cDV: ").append(toIndentedString(cDV)).append("\n");
    sb.append("    modal: ").append(toIndentedString(modal)).append("\n");
    sb.append("    dhEmi: ").append(toIndentedString(dhEmi)).append("\n");
    sb.append("    tpEmis: ").append(toIndentedString(tpEmis)).append("\n");
    sb.append("    procEmi: ").append(toIndentedString(procEmi)).append("\n");
    sb.append("    verProc: ").append(toIndentedString(verProc)).append("\n");
    sb.append("    ufIni: ").append(toIndentedString(ufIni)).append("\n");
    sb.append("    ufFim: ").append(toIndentedString(ufFim)).append("\n");
    sb.append("    infMunCarrega: ").append(toIndentedString(infMunCarrega)).append("\n");
    sb.append("    infPercurso: ").append(toIndentedString(infPercurso)).append("\n");
    sb.append("    dhIniViagem: ").append(toIndentedString(dhIniViagem)).append("\n");
    sb.append("    indCanalVerde: ").append(toIndentedString(indCanalVerde)).append("\n");
    sb.append("    indCarregaPosterior: ").append(toIndentedString(indCarregaPosterior)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cUF");
    openapiFields.add("tpAmb");
    openapiFields.add("tpEmit");
    openapiFields.add("tpTransp");
    openapiFields.add("mod");
    openapiFields.add("serie");
    openapiFields.add("nMDF");
    openapiFields.add("cMDF");
    openapiFields.add("cDV");
    openapiFields.add("modal");
    openapiFields.add("dhEmi");
    openapiFields.add("tpEmis");
    openapiFields.add("procEmi");
    openapiFields.add("verProc");
    openapiFields.add("UFIni");
    openapiFields.add("UFFim");
    openapiFields.add("infMunCarrega");
    openapiFields.add("infPercurso");
    openapiFields.add("dhIniViagem");
    openapiFields.add("indCanalVerde");
    openapiFields.add("indCarregaPosterior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cUF");
    openapiRequiredFields.add("tpEmit");
    openapiRequiredFields.add("serie");
    openapiRequiredFields.add("nMDF");
    openapiRequiredFields.add("modal");
    openapiRequiredFields.add("dhEmi");
    openapiRequiredFields.add("tpEmis");
    openapiRequiredFields.add("procEmi");
    openapiRequiredFields.add("verProc");
    openapiRequiredFields.add("UFIni");
    openapiRequiredFields.add("UFFim");
    openapiRequiredFields.add("infMunCarrega");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MdfeSefazIde
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MdfeSefazIde.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MdfeSefazIde is not found in the empty JSON string", MdfeSefazIde.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MdfeSefazIde.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MdfeSefazIde` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MdfeSefazIde.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cMDF") != null && !jsonObj.get("cMDF").isJsonNull()) && !jsonObj.get("cMDF").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cMDF` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cMDF").toString()));
      }
      if ((jsonObj.get("procEmi") != null && !jsonObj.get("procEmi").isJsonNull()) && !jsonObj.get("procEmi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `procEmi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("procEmi").toString()));
      }
      if ((jsonObj.get("verProc") != null && !jsonObj.get("verProc").isJsonNull()) && !jsonObj.get("verProc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verProc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verProc").toString()));
      }
      if ((jsonObj.get("UFIni") != null && !jsonObj.get("UFIni").isJsonNull()) && !jsonObj.get("UFIni").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UFIni` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UFIni").toString()));
      }
      if ((jsonObj.get("UFFim") != null && !jsonObj.get("UFFim").isJsonNull()) && !jsonObj.get("UFFim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UFFim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UFFim").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("infMunCarrega").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `infMunCarrega` to be an array in the JSON string but got `%s`", jsonObj.get("infMunCarrega").toString()));
      }

      JsonArray jsonArrayinfMunCarrega = jsonObj.getAsJsonArray("infMunCarrega");
      // validate the required field `infMunCarrega` (array)
      for (int i = 0; i < jsonArrayinfMunCarrega.size(); i++) {
        MdfeSefazInfMunCarrega.validateJsonElement(jsonArrayinfMunCarrega.get(i));
      };
      if (jsonObj.get("infPercurso") != null && !jsonObj.get("infPercurso").isJsonNull()) {
        JsonArray jsonArrayinfPercurso = jsonObj.getAsJsonArray("infPercurso");
        if (jsonArrayinfPercurso != null) {
          // ensure the json data is an array
          if (!jsonObj.get("infPercurso").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `infPercurso` to be an array in the JSON string but got `%s`", jsonObj.get("infPercurso").toString()));
          }

          // validate the optional field `infPercurso` (array)
          for (int i = 0; i < jsonArrayinfPercurso.size(); i++) {
            MdfeSefazInfPercurso.validateJsonElement(jsonArrayinfPercurso.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MdfeSefazIde.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MdfeSefazIde' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MdfeSefazIde> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MdfeSefazIde.class));

       return (TypeAdapter<T>) new TypeAdapter<MdfeSefazIde>() {
           @Override
           public void write(JsonWriter out, MdfeSefazIde value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MdfeSefazIde read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MdfeSefazIde given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MdfeSefazIde
   * @throws IOException if the JSON string is invalid with respect to MdfeSefazIde
   */
  public static MdfeSefazIde fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MdfeSefazIde.class);
  }

  /**
   * Convert an instance of MdfeSefazIde to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

