/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuração de numeração de lote, série e RPS.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class EmpresaConfigRps {
  public static final String SERIALIZED_NAME_LOTE = "lote";
  @SerializedName(SERIALIZED_NAME_LOTE)
  @javax.annotation.Nonnull
  private Integer lote;

  public static final String SERIALIZED_NAME_SERIE = "serie";
  @SerializedName(SERIALIZED_NAME_SERIE)
  @javax.annotation.Nonnull
  private String serie;

  public static final String SERIALIZED_NAME_NUMERO = "numero";
  @SerializedName(SERIALIZED_NAME_NUMERO)
  @javax.annotation.Nonnull
  private Integer numero;

  public EmpresaConfigRps() {
  }

  public EmpresaConfigRps lote(@javax.annotation.Nonnull Integer lote) {
    this.lote = lote;
    return this;
  }

  /**
   * Número do Lote de RPS.  Informe o próximo número do lote RPS a ser utilizado. Após isso, a Nuvem  Fiscal gerenciará esse campo (a cada novo envio de lote o número é  incrementado em + 1). Portanto, basta informá-lo no cadastro da empresa  uma única vez.
   * @return lote
   */
  @javax.annotation.Nonnull
  public Integer getLote() {
    return lote;
  }

  public void setLote(@javax.annotation.Nonnull Integer lote) {
    this.lote = lote;
  }


  public EmpresaConfigRps serie(@javax.annotation.Nonnull String serie) {
    this.serie = serie;
    return this;
  }

  /**
   * Série do RPS.  A série dos RPS varia de acordo com cada prefeitura, podendo ser  número (1, 2 ou 3, por exemplo) ou letras (A, S, NFS, por exemplo).  Portanto, consulte-a com o município da empresa antes de iniciar a  emissão das notas.
   * @return serie
   */
  @javax.annotation.Nonnull
  public String getSerie() {
    return serie;
  }

  public void setSerie(@javax.annotation.Nonnull String serie) {
    this.serie = serie;
  }


  public EmpresaConfigRps numero(@javax.annotation.Nonnull Integer numero) {
    this.numero = numero;
    return this;
  }

  /**
   * Número do RPS.  Informe o próximo número de RPS a ser utilizado. Após isso, a Nuvem  Fiscal gerenciará esse campo (a cada novo envio de RPS o número é  incrementado em + 1). Portanto, basta informá-lo no cadastro da empresa  uma única vez.
   * @return numero
   */
  @javax.annotation.Nonnull
  public Integer getNumero() {
    return numero;
  }

  public void setNumero(@javax.annotation.Nonnull Integer numero) {
    this.numero = numero;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmpresaConfigRps empresaConfigRps = (EmpresaConfigRps) o;
    return Objects.equals(this.lote, empresaConfigRps.lote) &&
        Objects.equals(this.serie, empresaConfigRps.serie) &&
        Objects.equals(this.numero, empresaConfigRps.numero);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lote, serie, numero);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmpresaConfigRps {\n");
    sb.append("    lote: ").append(toIndentedString(lote)).append("\n");
    sb.append("    serie: ").append(toIndentedString(serie)).append("\n");
    sb.append("    numero: ").append(toIndentedString(numero)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lote");
    openapiFields.add("serie");
    openapiFields.add("numero");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lote");
    openapiRequiredFields.add("serie");
    openapiRequiredFields.add("numero");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmpresaConfigRps
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmpresaConfigRps.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmpresaConfigRps is not found in the empty JSON string", EmpresaConfigRps.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmpresaConfigRps.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmpresaConfigRps` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmpresaConfigRps.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("serie").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serie` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serie").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmpresaConfigRps.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmpresaConfigRps' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmpresaConfigRps> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmpresaConfigRps.class));

       return (TypeAdapter<T>) new TypeAdapter<EmpresaConfigRps>() {
           @Override
           public void write(JsonWriter out, EmpresaConfigRps value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmpresaConfigRps read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmpresaConfigRps given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmpresaConfigRps
   * @throws IOException if the JSON string is invalid with respect to EmpresaConfigRps
   */
  public static EmpresaConfigRps fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmpresaConfigRps.class);
  }

  /**
   * Convert an instance of EmpresaConfigRps to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

