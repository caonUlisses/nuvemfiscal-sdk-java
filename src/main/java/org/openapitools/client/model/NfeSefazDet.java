/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NfeSefazImposto;
import org.openapitools.client.model.NfeSefazImpostoDevol;
import org.openapitools.client.model.NfeSefazObsItem;
import org.openapitools.client.model.NfeSefazProd;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dados dos detalhes da NF-e.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazDet {
  public static final String SERIALIZED_NAME_N_ITEM = "nItem";
  @SerializedName(SERIALIZED_NAME_N_ITEM)
  @javax.annotation.Nullable
  private Integer nItem;

  public static final String SERIALIZED_NAME_PROD = "prod";
  @SerializedName(SERIALIZED_NAME_PROD)
  @javax.annotation.Nonnull
  private NfeSefazProd prod;

  public static final String SERIALIZED_NAME_IMPOSTO = "imposto";
  @SerializedName(SERIALIZED_NAME_IMPOSTO)
  @javax.annotation.Nonnull
  private NfeSefazImposto imposto;

  public static final String SERIALIZED_NAME_IMPOSTO_DEVOL = "impostoDevol";
  @SerializedName(SERIALIZED_NAME_IMPOSTO_DEVOL)
  @javax.annotation.Nullable
  private NfeSefazImpostoDevol impostoDevol;

  public static final String SERIALIZED_NAME_INF_AD_PROD = "infAdProd";
  @SerializedName(SERIALIZED_NAME_INF_AD_PROD)
  @javax.annotation.Nullable
  private String infAdProd;

  public static final String SERIALIZED_NAME_OBS_ITEM = "obsItem";
  @SerializedName(SERIALIZED_NAME_OBS_ITEM)
  @javax.annotation.Nullable
  private NfeSefazObsItem obsItem;

  public NfeSefazDet() {
  }

  public NfeSefazDet nItem(@javax.annotation.Nullable Integer nItem) {
    this.nItem = nItem;
    return this;
  }

  /**
   * Número do item do NF.
   * minimum: 1
   * maximum: 990
   * @return nItem
   */
  @javax.annotation.Nullable
  public Integer getnItem() {
    return nItem;
  }

  public void setnItem(@javax.annotation.Nullable Integer nItem) {
    this.nItem = nItem;
  }


  public NfeSefazDet prod(@javax.annotation.Nonnull NfeSefazProd prod) {
    this.prod = prod;
    return this;
  }

  /**
   * Get prod
   * @return prod
   */
  @javax.annotation.Nonnull
  public NfeSefazProd getProd() {
    return prod;
  }

  public void setProd(@javax.annotation.Nonnull NfeSefazProd prod) {
    this.prod = prod;
  }


  public NfeSefazDet imposto(@javax.annotation.Nonnull NfeSefazImposto imposto) {
    this.imposto = imposto;
    return this;
  }

  /**
   * Get imposto
   * @return imposto
   */
  @javax.annotation.Nonnull
  public NfeSefazImposto getImposto() {
    return imposto;
  }

  public void setImposto(@javax.annotation.Nonnull NfeSefazImposto imposto) {
    this.imposto = imposto;
  }


  public NfeSefazDet impostoDevol(@javax.annotation.Nullable NfeSefazImpostoDevol impostoDevol) {
    this.impostoDevol = impostoDevol;
    return this;
  }

  /**
   * Get impostoDevol
   * @return impostoDevol
   */
  @javax.annotation.Nullable
  public NfeSefazImpostoDevol getImpostoDevol() {
    return impostoDevol;
  }

  public void setImpostoDevol(@javax.annotation.Nullable NfeSefazImpostoDevol impostoDevol) {
    this.impostoDevol = impostoDevol;
  }


  public NfeSefazDet infAdProd(@javax.annotation.Nullable String infAdProd) {
    this.infAdProd = infAdProd;
    return this;
  }

  /**
   * Informações adicionais do produto (norma referenciada, informações complementares, etc).
   * @return infAdProd
   */
  @javax.annotation.Nullable
  public String getInfAdProd() {
    return infAdProd;
  }

  public void setInfAdProd(@javax.annotation.Nullable String infAdProd) {
    this.infAdProd = infAdProd;
  }


  public NfeSefazDet obsItem(@javax.annotation.Nullable NfeSefazObsItem obsItem) {
    this.obsItem = obsItem;
    return this;
  }

  /**
   * Get obsItem
   * @return obsItem
   */
  @javax.annotation.Nullable
  public NfeSefazObsItem getObsItem() {
    return obsItem;
  }

  public void setObsItem(@javax.annotation.Nullable NfeSefazObsItem obsItem) {
    this.obsItem = obsItem;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazDet nfeSefazDet = (NfeSefazDet) o;
    return Objects.equals(this.nItem, nfeSefazDet.nItem) &&
        Objects.equals(this.prod, nfeSefazDet.prod) &&
        Objects.equals(this.imposto, nfeSefazDet.imposto) &&
        Objects.equals(this.impostoDevol, nfeSefazDet.impostoDevol) &&
        Objects.equals(this.infAdProd, nfeSefazDet.infAdProd) &&
        Objects.equals(this.obsItem, nfeSefazDet.obsItem);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(nItem, prod, imposto, impostoDevol, infAdProd, obsItem);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazDet {\n");
    sb.append("    nItem: ").append(toIndentedString(nItem)).append("\n");
    sb.append("    prod: ").append(toIndentedString(prod)).append("\n");
    sb.append("    imposto: ").append(toIndentedString(imposto)).append("\n");
    sb.append("    impostoDevol: ").append(toIndentedString(impostoDevol)).append("\n");
    sb.append("    infAdProd: ").append(toIndentedString(infAdProd)).append("\n");
    sb.append("    obsItem: ").append(toIndentedString(obsItem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nItem");
    openapiFields.add("prod");
    openapiFields.add("imposto");
    openapiFields.add("impostoDevol");
    openapiFields.add("infAdProd");
    openapiFields.add("obsItem");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nItem");
    openapiRequiredFields.add("prod");
    openapiRequiredFields.add("imposto");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazDet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazDet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazDet is not found in the empty JSON string", NfeSefazDet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazDet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazDet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfeSefazDet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `prod`
      NfeSefazProd.validateJsonElement(jsonObj.get("prod"));
      // validate the required field `imposto`
      NfeSefazImposto.validateJsonElement(jsonObj.get("imposto"));
      // validate the optional field `impostoDevol`
      if (jsonObj.get("impostoDevol") != null && !jsonObj.get("impostoDevol").isJsonNull()) {
        NfeSefazImpostoDevol.validateJsonElement(jsonObj.get("impostoDevol"));
      }
      if ((jsonObj.get("infAdProd") != null && !jsonObj.get("infAdProd").isJsonNull()) && !jsonObj.get("infAdProd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `infAdProd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("infAdProd").toString()));
      }
      // validate the optional field `obsItem`
      if (jsonObj.get("obsItem") != null && !jsonObj.get("obsItem").isJsonNull()) {
        NfeSefazObsItem.validateJsonElement(jsonObj.get("obsItem"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazDet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazDet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazDet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazDet.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazDet>() {
           @Override
           public void write(JsonWriter out, NfeSefazDet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazDet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazDet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazDet
   * @throws IOException if the JSON string is invalid with respect to NfeSefazDet
   */
  public static NfeSefazDet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazDet.class);
  }

  /**
   * Convert an instance of NfeSefazDet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

