/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CnpjMunicipio;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Endereço do estabelecimento.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CnpjEndereco {
  public static final String SERIALIZED_NAME_TIPO_LOGRADOURO = "tipo_logradouro";
  @SerializedName(SERIALIZED_NAME_TIPO_LOGRADOURO)
  @javax.annotation.Nullable
  private String tipoLogradouro;

  public static final String SERIALIZED_NAME_LOGRADOURO = "logradouro";
  @SerializedName(SERIALIZED_NAME_LOGRADOURO)
  @javax.annotation.Nullable
  private String logradouro;

  public static final String SERIALIZED_NAME_NUMERO = "numero";
  @SerializedName(SERIALIZED_NAME_NUMERO)
  @javax.annotation.Nullable
  private String numero;

  public static final String SERIALIZED_NAME_COMPLEMENTO = "complemento";
  @SerializedName(SERIALIZED_NAME_COMPLEMENTO)
  @javax.annotation.Nullable
  private String complemento;

  public static final String SERIALIZED_NAME_BAIRRO = "bairro";
  @SerializedName(SERIALIZED_NAME_BAIRRO)
  @javax.annotation.Nullable
  private String bairro;

  public static final String SERIALIZED_NAME_CEP = "cep";
  @SerializedName(SERIALIZED_NAME_CEP)
  @javax.annotation.Nullable
  private String cep;

  public static final String SERIALIZED_NAME_UF = "uf";
  @SerializedName(SERIALIZED_NAME_UF)
  @javax.annotation.Nullable
  private String uf;

  public static final String SERIALIZED_NAME_MUNICIPIO = "municipio";
  @SerializedName(SERIALIZED_NAME_MUNICIPIO)
  @javax.annotation.Nullable
  private CnpjMunicipio municipio;

  public CnpjEndereco() {
  }

  public CnpjEndereco tipoLogradouro(@javax.annotation.Nullable String tipoLogradouro) {
    this.tipoLogradouro = tipoLogradouro;
    return this;
  }

  /**
   * Descrição do tipo de logradouro.
   * @return tipoLogradouro
   */
  @javax.annotation.Nullable
  public String getTipoLogradouro() {
    return tipoLogradouro;
  }

  public void setTipoLogradouro(@javax.annotation.Nullable String tipoLogradouro) {
    this.tipoLogradouro = tipoLogradouro;
  }


  public CnpjEndereco logradouro(@javax.annotation.Nullable String logradouro) {
    this.logradouro = logradouro;
    return this;
  }

  /**
   * Nome do logradouro onde se localiza o estabelecimento.
   * @return logradouro
   */
  @javax.annotation.Nullable
  public String getLogradouro() {
    return logradouro;
  }

  public void setLogradouro(@javax.annotation.Nullable String logradouro) {
    this.logradouro = logradouro;
  }


  public CnpjEndereco numero(@javax.annotation.Nullable String numero) {
    this.numero = numero;
    return this;
  }

  /**
   * Número onde se localiza o estabelecimento. Quando não houver  preenchimento do número haverá ‘S/N’.
   * @return numero
   */
  @javax.annotation.Nullable
  public String getNumero() {
    return numero;
  }

  public void setNumero(@javax.annotation.Nullable String numero) {
    this.numero = numero;
  }


  public CnpjEndereco complemento(@javax.annotation.Nullable String complemento) {
    this.complemento = complemento;
    return this;
  }

  /**
   * Complemento para o endereço de localização do estabelecimento.
   * @return complemento
   */
  @javax.annotation.Nullable
  public String getComplemento() {
    return complemento;
  }

  public void setComplemento(@javax.annotation.Nullable String complemento) {
    this.complemento = complemento;
  }


  public CnpjEndereco bairro(@javax.annotation.Nullable String bairro) {
    this.bairro = bairro;
    return this;
  }

  /**
   * Bairro onde se localiza o estabelecimento.
   * @return bairro
   */
  @javax.annotation.Nullable
  public String getBairro() {
    return bairro;
  }

  public void setBairro(@javax.annotation.Nullable String bairro) {
    this.bairro = bairro;
  }


  public CnpjEndereco cep(@javax.annotation.Nullable String cep) {
    this.cep = cep;
    return this;
  }

  /**
   * Código de endereçamento postal referente ao logradouro no qual o  estabelecimento esta localizado.
   * @return cep
   */
  @javax.annotation.Nullable
  public String getCep() {
    return cep;
  }

  public void setCep(@javax.annotation.Nullable String cep) {
    this.cep = cep;
  }


  public CnpjEndereco uf(@javax.annotation.Nullable String uf) {
    this.uf = uf;
    return this;
  }

  /**
   * Sigla da unidade da federação em que se encontra o estabelecimento.
   * @return uf
   */
  @javax.annotation.Nullable
  public String getUf() {
    return uf;
  }

  public void setUf(@javax.annotation.Nullable String uf) {
    this.uf = uf;
  }


  public CnpjEndereco municipio(@javax.annotation.Nullable CnpjMunicipio municipio) {
    this.municipio = municipio;
    return this;
  }

  /**
   * Get municipio
   * @return municipio
   */
  @javax.annotation.Nullable
  public CnpjMunicipio getMunicipio() {
    return municipio;
  }

  public void setMunicipio(@javax.annotation.Nullable CnpjMunicipio municipio) {
    this.municipio = municipio;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CnpjEndereco cnpjEndereco = (CnpjEndereco) o;
    return Objects.equals(this.tipoLogradouro, cnpjEndereco.tipoLogradouro) &&
        Objects.equals(this.logradouro, cnpjEndereco.logradouro) &&
        Objects.equals(this.numero, cnpjEndereco.numero) &&
        Objects.equals(this.complemento, cnpjEndereco.complemento) &&
        Objects.equals(this.bairro, cnpjEndereco.bairro) &&
        Objects.equals(this.cep, cnpjEndereco.cep) &&
        Objects.equals(this.uf, cnpjEndereco.uf) &&
        Objects.equals(this.municipio, cnpjEndereco.municipio);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tipoLogradouro, logradouro, numero, complemento, bairro, cep, uf, municipio);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CnpjEndereco {\n");
    sb.append("    tipoLogradouro: ").append(toIndentedString(tipoLogradouro)).append("\n");
    sb.append("    logradouro: ").append(toIndentedString(logradouro)).append("\n");
    sb.append("    numero: ").append(toIndentedString(numero)).append("\n");
    sb.append("    complemento: ").append(toIndentedString(complemento)).append("\n");
    sb.append("    bairro: ").append(toIndentedString(bairro)).append("\n");
    sb.append("    cep: ").append(toIndentedString(cep)).append("\n");
    sb.append("    uf: ").append(toIndentedString(uf)).append("\n");
    sb.append("    municipio: ").append(toIndentedString(municipio)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tipo_logradouro");
    openapiFields.add("logradouro");
    openapiFields.add("numero");
    openapiFields.add("complemento");
    openapiFields.add("bairro");
    openapiFields.add("cep");
    openapiFields.add("uf");
    openapiFields.add("municipio");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CnpjEndereco
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CnpjEndereco.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CnpjEndereco is not found in the empty JSON string", CnpjEndereco.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CnpjEndereco.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CnpjEndereco` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tipo_logradouro") != null && !jsonObj.get("tipo_logradouro").isJsonNull()) && !jsonObj.get("tipo_logradouro").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tipo_logradouro` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tipo_logradouro").toString()));
      }
      if ((jsonObj.get("logradouro") != null && !jsonObj.get("logradouro").isJsonNull()) && !jsonObj.get("logradouro").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logradouro` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logradouro").toString()));
      }
      if ((jsonObj.get("numero") != null && !jsonObj.get("numero").isJsonNull()) && !jsonObj.get("numero").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numero` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numero").toString()));
      }
      if ((jsonObj.get("complemento") != null && !jsonObj.get("complemento").isJsonNull()) && !jsonObj.get("complemento").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complemento` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complemento").toString()));
      }
      if ((jsonObj.get("bairro") != null && !jsonObj.get("bairro").isJsonNull()) && !jsonObj.get("bairro").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bairro` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bairro").toString()));
      }
      if ((jsonObj.get("cep") != null && !jsonObj.get("cep").isJsonNull()) && !jsonObj.get("cep").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cep` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cep").toString()));
      }
      if ((jsonObj.get("uf") != null && !jsonObj.get("uf").isJsonNull()) && !jsonObj.get("uf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uf").toString()));
      }
      // validate the optional field `municipio`
      if (jsonObj.get("municipio") != null && !jsonObj.get("municipio").isJsonNull()) {
        CnpjMunicipio.validateJsonElement(jsonObj.get("municipio"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CnpjEndereco.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CnpjEndereco' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CnpjEndereco> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CnpjEndereco.class));

       return (TypeAdapter<T>) new TypeAdapter<CnpjEndereco>() {
           @Override
           public void write(JsonWriter out, CnpjEndereco value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CnpjEndereco read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CnpjEndereco given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CnpjEndereco
   * @throws IOException if the JSON string is invalid with respect to CnpjEndereco
   */
  public static CnpjEndereco fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CnpjEndereco.class);
  }

  /**
   * Convert an instance of CnpjEndereco to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

