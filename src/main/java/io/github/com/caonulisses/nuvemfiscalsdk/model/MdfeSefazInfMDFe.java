/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazAutXML;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazEmit;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazIde;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazInfAdic;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazInfDoc;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazInfModal;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazInfSolicNFF;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazLacres;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazProdPred;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazRespTec;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazSeg;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazTot;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Informações do MDF-e.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class MdfeSefazInfMDFe {
  public static final String SERIALIZED_NAME_VERSAO = "versao";
  @SerializedName(SERIALIZED_NAME_VERSAO)
  @javax.annotation.Nullable
  private String versao;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_IDE = "ide";
  @SerializedName(SERIALIZED_NAME_IDE)
  @javax.annotation.Nonnull
  private MdfeSefazIde ide;

  public static final String SERIALIZED_NAME_EMIT = "emit";
  @SerializedName(SERIALIZED_NAME_EMIT)
  @javax.annotation.Nonnull
  private MdfeSefazEmit emit;

  public static final String SERIALIZED_NAME_INF_MODAL = "infModal";
  @SerializedName(SERIALIZED_NAME_INF_MODAL)
  @javax.annotation.Nonnull
  private MdfeSefazInfModal infModal;

  public static final String SERIALIZED_NAME_INF_DOC = "infDoc";
  @SerializedName(SERIALIZED_NAME_INF_DOC)
  @javax.annotation.Nonnull
  private MdfeSefazInfDoc infDoc;

  public static final String SERIALIZED_NAME_SEG = "seg";
  @SerializedName(SERIALIZED_NAME_SEG)
  @javax.annotation.Nullable
  private List<MdfeSefazSeg> seg = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROD_PRED = "prodPred";
  @SerializedName(SERIALIZED_NAME_PROD_PRED)
  @javax.annotation.Nullable
  private MdfeSefazProdPred prodPred;

  public static final String SERIALIZED_NAME_TOT = "tot";
  @SerializedName(SERIALIZED_NAME_TOT)
  @javax.annotation.Nonnull
  private MdfeSefazTot tot;

  public static final String SERIALIZED_NAME_LACRES = "lacres";
  @SerializedName(SERIALIZED_NAME_LACRES)
  @javax.annotation.Nullable
  private List<MdfeSefazLacres> lacres = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUT_X_M_L = "autXML";
  @SerializedName(SERIALIZED_NAME_AUT_X_M_L)
  @javax.annotation.Nullable
  private List<MdfeSefazAutXML> autXML = new ArrayList<>();

  public static final String SERIALIZED_NAME_INF_ADIC = "infAdic";
  @SerializedName(SERIALIZED_NAME_INF_ADIC)
  @javax.annotation.Nullable
  private MdfeSefazInfAdic infAdic;

  public static final String SERIALIZED_NAME_INF_RESP_TEC = "infRespTec";
  @SerializedName(SERIALIZED_NAME_INF_RESP_TEC)
  @javax.annotation.Nullable
  private MdfeSefazRespTec infRespTec;

  public static final String SERIALIZED_NAME_INF_SOLIC_N_F_F = "infSolicNFF";
  @SerializedName(SERIALIZED_NAME_INF_SOLIC_N_F_F)
  @javax.annotation.Nullable
  private MdfeSefazInfSolicNFF infSolicNFF;

  public MdfeSefazInfMDFe() {
  }

  public MdfeSefazInfMDFe versao(@javax.annotation.Nullable String versao) {
    this.versao = versao;
    return this;
  }

  /**
   * Versão do leiaute.  Ex: \&quot;3.00\&quot;.
   * @return versao
   */
  @javax.annotation.Nullable
  public String getVersao() {
    return versao;
  }

  public void setVersao(@javax.annotation.Nullable String versao) {
    this.versao = versao;
  }


  public MdfeSefazInfMDFe id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Identificador da tag a ser assinada.  Informar a chave de acesso do MDF-e e precedida do literal \&quot;MDFe\&quot;.    *Geramos automaticamente quando nenhum valor é informado.*
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public MdfeSefazInfMDFe ide(@javax.annotation.Nonnull MdfeSefazIde ide) {
    this.ide = ide;
    return this;
  }

  /**
   * Get ide
   * @return ide
   */
  @javax.annotation.Nonnull
  public MdfeSefazIde getIde() {
    return ide;
  }

  public void setIde(@javax.annotation.Nonnull MdfeSefazIde ide) {
    this.ide = ide;
  }


  public MdfeSefazInfMDFe emit(@javax.annotation.Nonnull MdfeSefazEmit emit) {
    this.emit = emit;
    return this;
  }

  /**
   * Get emit
   * @return emit
   */
  @javax.annotation.Nonnull
  public MdfeSefazEmit getEmit() {
    return emit;
  }

  public void setEmit(@javax.annotation.Nonnull MdfeSefazEmit emit) {
    this.emit = emit;
  }


  public MdfeSefazInfMDFe infModal(@javax.annotation.Nonnull MdfeSefazInfModal infModal) {
    this.infModal = infModal;
    return this;
  }

  /**
   * Get infModal
   * @return infModal
   */
  @javax.annotation.Nonnull
  public MdfeSefazInfModal getInfModal() {
    return infModal;
  }

  public void setInfModal(@javax.annotation.Nonnull MdfeSefazInfModal infModal) {
    this.infModal = infModal;
  }


  public MdfeSefazInfMDFe infDoc(@javax.annotation.Nonnull MdfeSefazInfDoc infDoc) {
    this.infDoc = infDoc;
    return this;
  }

  /**
   * Get infDoc
   * @return infDoc
   */
  @javax.annotation.Nonnull
  public MdfeSefazInfDoc getInfDoc() {
    return infDoc;
  }

  public void setInfDoc(@javax.annotation.Nonnull MdfeSefazInfDoc infDoc) {
    this.infDoc = infDoc;
  }


  public MdfeSefazInfMDFe seg(@javax.annotation.Nullable List<MdfeSefazSeg> seg) {
    this.seg = seg;
    return this;
  }

  public MdfeSefazInfMDFe addSegItem(MdfeSefazSeg segItem) {
    if (this.seg == null) {
      this.seg = new ArrayList<>();
    }
    this.seg.add(segItem);
    return this;
  }

  /**
   * Get seg
   * @return seg
   */
  @javax.annotation.Nullable
  public List<MdfeSefazSeg> getSeg() {
    return seg;
  }

  public void setSeg(@javax.annotation.Nullable List<MdfeSefazSeg> seg) {
    this.seg = seg;
  }


  public MdfeSefazInfMDFe prodPred(@javax.annotation.Nullable MdfeSefazProdPred prodPred) {
    this.prodPred = prodPred;
    return this;
  }

  /**
   * Get prodPred
   * @return prodPred
   */
  @javax.annotation.Nullable
  public MdfeSefazProdPred getProdPred() {
    return prodPred;
  }

  public void setProdPred(@javax.annotation.Nullable MdfeSefazProdPred prodPred) {
    this.prodPred = prodPred;
  }


  public MdfeSefazInfMDFe tot(@javax.annotation.Nonnull MdfeSefazTot tot) {
    this.tot = tot;
    return this;
  }

  /**
   * Get tot
   * @return tot
   */
  @javax.annotation.Nonnull
  public MdfeSefazTot getTot() {
    return tot;
  }

  public void setTot(@javax.annotation.Nonnull MdfeSefazTot tot) {
    this.tot = tot;
  }


  public MdfeSefazInfMDFe lacres(@javax.annotation.Nullable List<MdfeSefazLacres> lacres) {
    this.lacres = lacres;
    return this;
  }

  public MdfeSefazInfMDFe addLacresItem(MdfeSefazLacres lacresItem) {
    if (this.lacres == null) {
      this.lacres = new ArrayList<>();
    }
    this.lacres.add(lacresItem);
    return this;
  }

  /**
   * Get lacres
   * @return lacres
   */
  @javax.annotation.Nullable
  public List<MdfeSefazLacres> getLacres() {
    return lacres;
  }

  public void setLacres(@javax.annotation.Nullable List<MdfeSefazLacres> lacres) {
    this.lacres = lacres;
  }


  public MdfeSefazInfMDFe autXML(@javax.annotation.Nullable List<MdfeSefazAutXML> autXML) {
    this.autXML = autXML;
    return this;
  }

  public MdfeSefazInfMDFe addAutXMLItem(MdfeSefazAutXML autXMLItem) {
    if (this.autXML == null) {
      this.autXML = new ArrayList<>();
    }
    this.autXML.add(autXMLItem);
    return this;
  }

  /**
   * Get autXML
   * @return autXML
   */
  @javax.annotation.Nullable
  public List<MdfeSefazAutXML> getAutXML() {
    return autXML;
  }

  public void setAutXML(@javax.annotation.Nullable List<MdfeSefazAutXML> autXML) {
    this.autXML = autXML;
  }


  public MdfeSefazInfMDFe infAdic(@javax.annotation.Nullable MdfeSefazInfAdic infAdic) {
    this.infAdic = infAdic;
    return this;
  }

  /**
   * Get infAdic
   * @return infAdic
   */
  @javax.annotation.Nullable
  public MdfeSefazInfAdic getInfAdic() {
    return infAdic;
  }

  public void setInfAdic(@javax.annotation.Nullable MdfeSefazInfAdic infAdic) {
    this.infAdic = infAdic;
  }


  public MdfeSefazInfMDFe infRespTec(@javax.annotation.Nullable MdfeSefazRespTec infRespTec) {
    this.infRespTec = infRespTec;
    return this;
  }

  /**
   * Get infRespTec
   * @return infRespTec
   */
  @javax.annotation.Nullable
  public MdfeSefazRespTec getInfRespTec() {
    return infRespTec;
  }

  public void setInfRespTec(@javax.annotation.Nullable MdfeSefazRespTec infRespTec) {
    this.infRespTec = infRespTec;
  }


  public MdfeSefazInfMDFe infSolicNFF(@javax.annotation.Nullable MdfeSefazInfSolicNFF infSolicNFF) {
    this.infSolicNFF = infSolicNFF;
    return this;
  }

  /**
   * Get infSolicNFF
   * @return infSolicNFF
   */
  @javax.annotation.Nullable
  public MdfeSefazInfSolicNFF getInfSolicNFF() {
    return infSolicNFF;
  }

  public void setInfSolicNFF(@javax.annotation.Nullable MdfeSefazInfSolicNFF infSolicNFF) {
    this.infSolicNFF = infSolicNFF;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MdfeSefazInfMDFe mdfeSefazInfMDFe = (MdfeSefazInfMDFe) o;
    return Objects.equals(this.versao, mdfeSefazInfMDFe.versao) &&
        Objects.equals(this.id, mdfeSefazInfMDFe.id) &&
        Objects.equals(this.ide, mdfeSefazInfMDFe.ide) &&
        Objects.equals(this.emit, mdfeSefazInfMDFe.emit) &&
        Objects.equals(this.infModal, mdfeSefazInfMDFe.infModal) &&
        Objects.equals(this.infDoc, mdfeSefazInfMDFe.infDoc) &&
        Objects.equals(this.seg, mdfeSefazInfMDFe.seg) &&
        Objects.equals(this.prodPred, mdfeSefazInfMDFe.prodPred) &&
        Objects.equals(this.tot, mdfeSefazInfMDFe.tot) &&
        Objects.equals(this.lacres, mdfeSefazInfMDFe.lacres) &&
        Objects.equals(this.autXML, mdfeSefazInfMDFe.autXML) &&
        Objects.equals(this.infAdic, mdfeSefazInfMDFe.infAdic) &&
        Objects.equals(this.infRespTec, mdfeSefazInfMDFe.infRespTec) &&
        Objects.equals(this.infSolicNFF, mdfeSefazInfMDFe.infSolicNFF);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(versao, id, ide, emit, infModal, infDoc, seg, prodPred, tot, lacres, autXML, infAdic, infRespTec, infSolicNFF);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MdfeSefazInfMDFe {\n");
    sb.append("    versao: ").append(toIndentedString(versao)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ide: ").append(toIndentedString(ide)).append("\n");
    sb.append("    emit: ").append(toIndentedString(emit)).append("\n");
    sb.append("    infModal: ").append(toIndentedString(infModal)).append("\n");
    sb.append("    infDoc: ").append(toIndentedString(infDoc)).append("\n");
    sb.append("    seg: ").append(toIndentedString(seg)).append("\n");
    sb.append("    prodPred: ").append(toIndentedString(prodPred)).append("\n");
    sb.append("    tot: ").append(toIndentedString(tot)).append("\n");
    sb.append("    lacres: ").append(toIndentedString(lacres)).append("\n");
    sb.append("    autXML: ").append(toIndentedString(autXML)).append("\n");
    sb.append("    infAdic: ").append(toIndentedString(infAdic)).append("\n");
    sb.append("    infRespTec: ").append(toIndentedString(infRespTec)).append("\n");
    sb.append("    infSolicNFF: ").append(toIndentedString(infSolicNFF)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("versao");
    openapiFields.add("Id");
    openapiFields.add("ide");
    openapiFields.add("emit");
    openapiFields.add("infModal");
    openapiFields.add("infDoc");
    openapiFields.add("seg");
    openapiFields.add("prodPred");
    openapiFields.add("tot");
    openapiFields.add("lacres");
    openapiFields.add("autXML");
    openapiFields.add("infAdic");
    openapiFields.add("infRespTec");
    openapiFields.add("infSolicNFF");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("versao");
    openapiRequiredFields.add("ide");
    openapiRequiredFields.add("emit");
    openapiRequiredFields.add("infModal");
    openapiRequiredFields.add("infDoc");
    openapiRequiredFields.add("tot");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MdfeSefazInfMDFe
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MdfeSefazInfMDFe.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MdfeSefazInfMDFe is not found in the empty JSON string", MdfeSefazInfMDFe.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MdfeSefazInfMDFe.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MdfeSefazInfMDFe` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MdfeSefazInfMDFe.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("versao") != null && !jsonObj.get("versao").isJsonNull()) && !jsonObj.get("versao").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versao` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versao").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      // validate the required field `ide`
      MdfeSefazIde.validateJsonElement(jsonObj.get("ide"));
      // validate the required field `emit`
      MdfeSefazEmit.validateJsonElement(jsonObj.get("emit"));
      // validate the required field `infModal`
      MdfeSefazInfModal.validateJsonElement(jsonObj.get("infModal"));
      // validate the required field `infDoc`
      MdfeSefazInfDoc.validateJsonElement(jsonObj.get("infDoc"));
      if (jsonObj.get("seg") != null && !jsonObj.get("seg").isJsonNull()) {
        JsonArray jsonArrayseg = jsonObj.getAsJsonArray("seg");
        if (jsonArrayseg != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seg").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seg` to be an array in the JSON string but got `%s`", jsonObj.get("seg").toString()));
          }

          // validate the optional field `seg` (array)
          for (int i = 0; i < jsonArrayseg.size(); i++) {
            MdfeSefazSeg.validateJsonElement(jsonArrayseg.get(i));
          };
        }
      }
      // validate the optional field `prodPred`
      if (jsonObj.get("prodPred") != null && !jsonObj.get("prodPred").isJsonNull()) {
        MdfeSefazProdPred.validateJsonElement(jsonObj.get("prodPred"));
      }
      // validate the required field `tot`
      MdfeSefazTot.validateJsonElement(jsonObj.get("tot"));
      if (jsonObj.get("lacres") != null && !jsonObj.get("lacres").isJsonNull()) {
        JsonArray jsonArraylacres = jsonObj.getAsJsonArray("lacres");
        if (jsonArraylacres != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lacres").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lacres` to be an array in the JSON string but got `%s`", jsonObj.get("lacres").toString()));
          }

          // validate the optional field `lacres` (array)
          for (int i = 0; i < jsonArraylacres.size(); i++) {
            MdfeSefazLacres.validateJsonElement(jsonArraylacres.get(i));
          };
        }
      }
      if (jsonObj.get("autXML") != null && !jsonObj.get("autXML").isJsonNull()) {
        JsonArray jsonArrayautXML = jsonObj.getAsJsonArray("autXML");
        if (jsonArrayautXML != null) {
          // ensure the json data is an array
          if (!jsonObj.get("autXML").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `autXML` to be an array in the JSON string but got `%s`", jsonObj.get("autXML").toString()));
          }

          // validate the optional field `autXML` (array)
          for (int i = 0; i < jsonArrayautXML.size(); i++) {
            MdfeSefazAutXML.validateJsonElement(jsonArrayautXML.get(i));
          };
        }
      }
      // validate the optional field `infAdic`
      if (jsonObj.get("infAdic") != null && !jsonObj.get("infAdic").isJsonNull()) {
        MdfeSefazInfAdic.validateJsonElement(jsonObj.get("infAdic"));
      }
      // validate the optional field `infRespTec`
      if (jsonObj.get("infRespTec") != null && !jsonObj.get("infRespTec").isJsonNull()) {
        MdfeSefazRespTec.validateJsonElement(jsonObj.get("infRespTec"));
      }
      // validate the optional field `infSolicNFF`
      if (jsonObj.get("infSolicNFF") != null && !jsonObj.get("infSolicNFF").isJsonNull()) {
        MdfeSefazInfSolicNFF.validateJsonElement(jsonObj.get("infSolicNFF"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MdfeSefazInfMDFe.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MdfeSefazInfMDFe' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MdfeSefazInfMDFe> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MdfeSefazInfMDFe.class));

       return (TypeAdapter<T>) new TypeAdapter<MdfeSefazInfMDFe>() {
           @Override
           public void write(JsonWriter out, MdfeSefazInfMDFe value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MdfeSefazInfMDFe read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MdfeSefazInfMDFe given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MdfeSefazInfMDFe
   * @throws IOException if the JSON string is invalid with respect to MdfeSefazInfMDFe
   */
  public static MdfeSefazInfMDFe fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MdfeSefazInfMDFe.class);
  }

  /**
   * Convert an instance of MdfeSefazInfMDFe to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

