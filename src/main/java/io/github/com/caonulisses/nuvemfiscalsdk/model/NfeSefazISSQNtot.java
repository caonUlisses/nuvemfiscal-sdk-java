/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Totais referentes ao ISSQN.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazISSQNtot {
  public static final String SERIALIZED_NAME_V_SERV = "vServ";
  @SerializedName(SERIALIZED_NAME_V_SERV)
  @javax.annotation.Nullable
  private BigDecimal vServ;

  public static final String SERIALIZED_NAME_V_B_C = "vBC";
  @SerializedName(SERIALIZED_NAME_V_B_C)
  @javax.annotation.Nullable
  private BigDecimal vBC;

  public static final String SERIALIZED_NAME_V_I_S_S = "vISS";
  @SerializedName(SERIALIZED_NAME_V_I_S_S)
  @javax.annotation.Nullable
  private BigDecimal vISS;

  public static final String SERIALIZED_NAME_V_P_I_S = "vPIS";
  @SerializedName(SERIALIZED_NAME_V_P_I_S)
  @javax.annotation.Nullable
  private BigDecimal vPIS;

  public static final String SERIALIZED_NAME_V_C_O_F_I_N_S = "vCOFINS";
  @SerializedName(SERIALIZED_NAME_V_C_O_F_I_N_S)
  @javax.annotation.Nullable
  private BigDecimal vCOFINS;

  public static final String SERIALIZED_NAME_D_COMPET = "dCompet";
  @SerializedName(SERIALIZED_NAME_D_COMPET)
  @javax.annotation.Nullable
  private LocalDate dCompet;

  public static final String SERIALIZED_NAME_V_DEDUCAO = "vDeducao";
  @SerializedName(SERIALIZED_NAME_V_DEDUCAO)
  @javax.annotation.Nullable
  private BigDecimal vDeducao;

  public static final String SERIALIZED_NAME_V_OUTRO = "vOutro";
  @SerializedName(SERIALIZED_NAME_V_OUTRO)
  @javax.annotation.Nullable
  private BigDecimal vOutro;

  public static final String SERIALIZED_NAME_V_DESC_INCOND = "vDescIncond";
  @SerializedName(SERIALIZED_NAME_V_DESC_INCOND)
  @javax.annotation.Nullable
  private BigDecimal vDescIncond;

  public static final String SERIALIZED_NAME_V_DESC_COND = "vDescCond";
  @SerializedName(SERIALIZED_NAME_V_DESC_COND)
  @javax.annotation.Nullable
  private BigDecimal vDescCond;

  public static final String SERIALIZED_NAME_V_I_S_S_RET = "vISSRet";
  @SerializedName(SERIALIZED_NAME_V_I_S_S_RET)
  @javax.annotation.Nullable
  private BigDecimal vISSRet;

  public static final String SERIALIZED_NAME_C_REG_TRIB = "cRegTrib";
  @SerializedName(SERIALIZED_NAME_C_REG_TRIB)
  @javax.annotation.Nullable
  private Integer cRegTrib;

  public NfeSefazISSQNtot() {
  }

  public NfeSefazISSQNtot vServ(@javax.annotation.Nullable BigDecimal vServ) {
    this.vServ = vServ;
    return this;
  }

  /**
   * Valor Total dos Serviços sob não-incidência ou não tributados pelo ICMS.
   * minimum: 0
   * @return vServ
   */
  @javax.annotation.Nullable
  public BigDecimal getvServ() {
    return vServ;
  }

  public void setvServ(@javax.annotation.Nullable BigDecimal vServ) {
    this.vServ = vServ;
  }


  public NfeSefazISSQNtot vBC(@javax.annotation.Nullable BigDecimal vBC) {
    this.vBC = vBC;
    return this;
  }

  /**
   * Base de Cálculo do ISS.
   * minimum: 0
   * @return vBC
   */
  @javax.annotation.Nullable
  public BigDecimal getvBC() {
    return vBC;
  }

  public void setvBC(@javax.annotation.Nullable BigDecimal vBC) {
    this.vBC = vBC;
  }


  public NfeSefazISSQNtot vISS(@javax.annotation.Nullable BigDecimal vISS) {
    this.vISS = vISS;
    return this;
  }

  /**
   * Valor Total do ISS.
   * minimum: 0
   * @return vISS
   */
  @javax.annotation.Nullable
  public BigDecimal getvISS() {
    return vISS;
  }

  public void setvISS(@javax.annotation.Nullable BigDecimal vISS) {
    this.vISS = vISS;
  }


  public NfeSefazISSQNtot vPIS(@javax.annotation.Nullable BigDecimal vPIS) {
    this.vPIS = vPIS;
    return this;
  }

  /**
   * Valor do PIS sobre serviços.
   * minimum: 0
   * @return vPIS
   */
  @javax.annotation.Nullable
  public BigDecimal getvPIS() {
    return vPIS;
  }

  public void setvPIS(@javax.annotation.Nullable BigDecimal vPIS) {
    this.vPIS = vPIS;
  }


  public NfeSefazISSQNtot vCOFINS(@javax.annotation.Nullable BigDecimal vCOFINS) {
    this.vCOFINS = vCOFINS;
    return this;
  }

  /**
   * Valor do COFINS sobre serviços.
   * minimum: 0
   * @return vCOFINS
   */
  @javax.annotation.Nullable
  public BigDecimal getvCOFINS() {
    return vCOFINS;
  }

  public void setvCOFINS(@javax.annotation.Nullable BigDecimal vCOFINS) {
    this.vCOFINS = vCOFINS;
  }


  public NfeSefazISSQNtot dCompet(@javax.annotation.Nullable LocalDate dCompet) {
    this.dCompet = dCompet;
    return this;
  }

  /**
   * Data da prestação do serviço  (AAAA-MM-DD).
   * @return dCompet
   */
  @javax.annotation.Nullable
  public LocalDate getdCompet() {
    return dCompet;
  }

  public void setdCompet(@javax.annotation.Nullable LocalDate dCompet) {
    this.dCompet = dCompet;
  }


  public NfeSefazISSQNtot vDeducao(@javax.annotation.Nullable BigDecimal vDeducao) {
    this.vDeducao = vDeducao;
    return this;
  }

  /**
   * Valor dedução para redução da base de cálculo.
   * minimum: 0
   * @return vDeducao
   */
  @javax.annotation.Nullable
  public BigDecimal getvDeducao() {
    return vDeducao;
  }

  public void setvDeducao(@javax.annotation.Nullable BigDecimal vDeducao) {
    this.vDeducao = vDeducao;
  }


  public NfeSefazISSQNtot vOutro(@javax.annotation.Nullable BigDecimal vOutro) {
    this.vOutro = vOutro;
    return this;
  }

  /**
   * Valor outras retenções.
   * minimum: 0
   * @return vOutro
   */
  @javax.annotation.Nullable
  public BigDecimal getvOutro() {
    return vOutro;
  }

  public void setvOutro(@javax.annotation.Nullable BigDecimal vOutro) {
    this.vOutro = vOutro;
  }


  public NfeSefazISSQNtot vDescIncond(@javax.annotation.Nullable BigDecimal vDescIncond) {
    this.vDescIncond = vDescIncond;
    return this;
  }

  /**
   * Valor desconto incondicionado.
   * minimum: 0
   * @return vDescIncond
   */
  @javax.annotation.Nullable
  public BigDecimal getvDescIncond() {
    return vDescIncond;
  }

  public void setvDescIncond(@javax.annotation.Nullable BigDecimal vDescIncond) {
    this.vDescIncond = vDescIncond;
  }


  public NfeSefazISSQNtot vDescCond(@javax.annotation.Nullable BigDecimal vDescCond) {
    this.vDescCond = vDescCond;
    return this;
  }

  /**
   * Valor desconto condicionado.
   * minimum: 0
   * @return vDescCond
   */
  @javax.annotation.Nullable
  public BigDecimal getvDescCond() {
    return vDescCond;
  }

  public void setvDescCond(@javax.annotation.Nullable BigDecimal vDescCond) {
    this.vDescCond = vDescCond;
  }


  public NfeSefazISSQNtot vISSRet(@javax.annotation.Nullable BigDecimal vISSRet) {
    this.vISSRet = vISSRet;
    return this;
  }

  /**
   * Valor Total Retenção ISS.
   * minimum: 0
   * @return vISSRet
   */
  @javax.annotation.Nullable
  public BigDecimal getvISSRet() {
    return vISSRet;
  }

  public void setvISSRet(@javax.annotation.Nullable BigDecimal vISSRet) {
    this.vISSRet = vISSRet;
  }


  public NfeSefazISSQNtot cRegTrib(@javax.annotation.Nullable Integer cRegTrib) {
    this.cRegTrib = cRegTrib;
    return this;
  }

  /**
   * Código do regime especial de tributação.
   * @return cRegTrib
   */
  @javax.annotation.Nullable
  public Integer getcRegTrib() {
    return cRegTrib;
  }

  public void setcRegTrib(@javax.annotation.Nullable Integer cRegTrib) {
    this.cRegTrib = cRegTrib;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazISSQNtot nfeSefazISSQNtot = (NfeSefazISSQNtot) o;
    return Objects.equals(this.vServ, nfeSefazISSQNtot.vServ) &&
        Objects.equals(this.vBC, nfeSefazISSQNtot.vBC) &&
        Objects.equals(this.vISS, nfeSefazISSQNtot.vISS) &&
        Objects.equals(this.vPIS, nfeSefazISSQNtot.vPIS) &&
        Objects.equals(this.vCOFINS, nfeSefazISSQNtot.vCOFINS) &&
        Objects.equals(this.dCompet, nfeSefazISSQNtot.dCompet) &&
        Objects.equals(this.vDeducao, nfeSefazISSQNtot.vDeducao) &&
        Objects.equals(this.vOutro, nfeSefazISSQNtot.vOutro) &&
        Objects.equals(this.vDescIncond, nfeSefazISSQNtot.vDescIncond) &&
        Objects.equals(this.vDescCond, nfeSefazISSQNtot.vDescCond) &&
        Objects.equals(this.vISSRet, nfeSefazISSQNtot.vISSRet) &&
        Objects.equals(this.cRegTrib, nfeSefazISSQNtot.cRegTrib);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(vServ, vBC, vISS, vPIS, vCOFINS, dCompet, vDeducao, vOutro, vDescIncond, vDescCond, vISSRet, cRegTrib);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazISSQNtot {\n");
    sb.append("    vServ: ").append(toIndentedString(vServ)).append("\n");
    sb.append("    vBC: ").append(toIndentedString(vBC)).append("\n");
    sb.append("    vISS: ").append(toIndentedString(vISS)).append("\n");
    sb.append("    vPIS: ").append(toIndentedString(vPIS)).append("\n");
    sb.append("    vCOFINS: ").append(toIndentedString(vCOFINS)).append("\n");
    sb.append("    dCompet: ").append(toIndentedString(dCompet)).append("\n");
    sb.append("    vDeducao: ").append(toIndentedString(vDeducao)).append("\n");
    sb.append("    vOutro: ").append(toIndentedString(vOutro)).append("\n");
    sb.append("    vDescIncond: ").append(toIndentedString(vDescIncond)).append("\n");
    sb.append("    vDescCond: ").append(toIndentedString(vDescCond)).append("\n");
    sb.append("    vISSRet: ").append(toIndentedString(vISSRet)).append("\n");
    sb.append("    cRegTrib: ").append(toIndentedString(cRegTrib)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("vServ");
    openapiFields.add("vBC");
    openapiFields.add("vISS");
    openapiFields.add("vPIS");
    openapiFields.add("vCOFINS");
    openapiFields.add("dCompet");
    openapiFields.add("vDeducao");
    openapiFields.add("vOutro");
    openapiFields.add("vDescIncond");
    openapiFields.add("vDescCond");
    openapiFields.add("vISSRet");
    openapiFields.add("cRegTrib");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dCompet");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazISSQNtot
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazISSQNtot.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazISSQNtot is not found in the empty JSON string", NfeSefazISSQNtot.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazISSQNtot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazISSQNtot` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfeSefazISSQNtot.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazISSQNtot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazISSQNtot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazISSQNtot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazISSQNtot.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazISSQNtot>() {
           @Override
           public void write(JsonWriter out, NfeSefazISSQNtot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazISSQNtot read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazISSQNtot given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazISSQNtot
   * @throws IOException if the JSON string is invalid with respect to NfeSefazISSQNtot
   */
  public static NfeSefazISSQNtot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazISSQNtot.class);
  }

  /**
   * Convert an instance of NfeSefazISSQNtot to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

