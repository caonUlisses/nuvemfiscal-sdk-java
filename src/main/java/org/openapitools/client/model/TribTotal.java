/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.TribTotalMonet;
import org.openapitools.client.model.TribTotalPercent;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Grupo de informações para totais aproximados dos tributos relacionados ao serviço prestado.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class TribTotal {
  public static final String SERIALIZED_NAME_V_TOT_TRIB = "vTotTrib";
  @SerializedName(SERIALIZED_NAME_V_TOT_TRIB)
  @javax.annotation.Nullable
  private TribTotalMonet vTotTrib;

  public static final String SERIALIZED_NAME_P_TOT_TRIB = "pTotTrib";
  @SerializedName(SERIALIZED_NAME_P_TOT_TRIB)
  @javax.annotation.Nullable
  private TribTotalPercent pTotTrib;

  public static final String SERIALIZED_NAME_IND_TOT_TRIB = "indTotTrib";
  @SerializedName(SERIALIZED_NAME_IND_TOT_TRIB)
  @javax.annotation.Nullable
  private Integer indTotTrib;

  public static final String SERIALIZED_NAME_P_TOT_TRIB_S_N = "pTotTribSN";
  @SerializedName(SERIALIZED_NAME_P_TOT_TRIB_S_N)
  @javax.annotation.Nullable
  private BigDecimal pTotTribSN;

  public TribTotal() {
  }

  public TribTotal vTotTrib(@javax.annotation.Nullable TribTotalMonet vTotTrib) {
    this.vTotTrib = vTotTrib;
    return this;
  }

  /**
   * Get vTotTrib
   * @return vTotTrib
   */
  @javax.annotation.Nullable
  public TribTotalMonet getvTotTrib() {
    return vTotTrib;
  }

  public void setvTotTrib(@javax.annotation.Nullable TribTotalMonet vTotTrib) {
    this.vTotTrib = vTotTrib;
  }


  public TribTotal pTotTrib(@javax.annotation.Nullable TribTotalPercent pTotTrib) {
    this.pTotTrib = pTotTrib;
    return this;
  }

  /**
   * Get pTotTrib
   * @return pTotTrib
   */
  @javax.annotation.Nullable
  public TribTotalPercent getpTotTrib() {
    return pTotTrib;
  }

  public void setpTotTrib(@javax.annotation.Nullable TribTotalPercent pTotTrib) {
    this.pTotTrib = pTotTrib;
  }


  public TribTotal indTotTrib(@javax.annotation.Nullable Integer indTotTrib) {
    this.indTotTrib = indTotTrib;
    return this;
  }

  /**
   * Indicador de informação de valor total de tributos. Possui valor fixo igual a zero (indTotTrib&#x3D;0).  Não informar nenhum valor estimado para os Tributos (Decreto 8.264/2014).  * 0 - Não
   * @return indTotTrib
   */
  @javax.annotation.Nullable
  public Integer getIndTotTrib() {
    return indTotTrib;
  }

  public void setIndTotTrib(@javax.annotation.Nullable Integer indTotTrib) {
    this.indTotTrib = indTotTrib;
  }


  public TribTotal pTotTribSN(@javax.annotation.Nullable BigDecimal pTotTribSN) {
    this.pTotTribSN = pTotTribSN;
    return this;
  }

  /**
   * Valor percentual aproximado do total dos tributos da alíquota do Simples Nacional (%%).
   * minimum: 0
   * @return pTotTribSN
   */
  @javax.annotation.Nullable
  public BigDecimal getpTotTribSN() {
    return pTotTribSN;
  }

  public void setpTotTribSN(@javax.annotation.Nullable BigDecimal pTotTribSN) {
    this.pTotTribSN = pTotTribSN;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TribTotal tribTotal = (TribTotal) o;
    return Objects.equals(this.vTotTrib, tribTotal.vTotTrib) &&
        Objects.equals(this.pTotTrib, tribTotal.pTotTrib) &&
        Objects.equals(this.indTotTrib, tribTotal.indTotTrib) &&
        Objects.equals(this.pTotTribSN, tribTotal.pTotTribSN);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(vTotTrib, pTotTrib, indTotTrib, pTotTribSN);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TribTotal {\n");
    sb.append("    vTotTrib: ").append(toIndentedString(vTotTrib)).append("\n");
    sb.append("    pTotTrib: ").append(toIndentedString(pTotTrib)).append("\n");
    sb.append("    indTotTrib: ").append(toIndentedString(indTotTrib)).append("\n");
    sb.append("    pTotTribSN: ").append(toIndentedString(pTotTribSN)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("vTotTrib");
    openapiFields.add("pTotTrib");
    openapiFields.add("indTotTrib");
    openapiFields.add("pTotTribSN");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TribTotal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TribTotal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TribTotal is not found in the empty JSON string", TribTotal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TribTotal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TribTotal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `vTotTrib`
      if (jsonObj.get("vTotTrib") != null && !jsonObj.get("vTotTrib").isJsonNull()) {
        TribTotalMonet.validateJsonElement(jsonObj.get("vTotTrib"));
      }
      // validate the optional field `pTotTrib`
      if (jsonObj.get("pTotTrib") != null && !jsonObj.get("pTotTrib").isJsonNull()) {
        TribTotalPercent.validateJsonElement(jsonObj.get("pTotTrib"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TribTotal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TribTotal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TribTotal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TribTotal.class));

       return (TypeAdapter<T>) new TypeAdapter<TribTotal>() {
           @Override
           public void write(JsonWriter out, TribTotal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TribTotal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TribTotal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TribTotal
   * @throws IOException if the JSON string is invalid with respect to TribTotal
   */
  public static TribTotal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TribTotal.class);
  }

  /**
   * Convert an instance of TribTotal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

