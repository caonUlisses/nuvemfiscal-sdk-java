/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CteSefazInfTotAP;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Preenchido quando for  transporte de produtos classificados pela ONU como perigosos.  O preenchimento desses campos não desobriga a empresa aérea de emitir os demais documentos que constam na legislação vigente.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazPeri {
  public static final String SERIALIZED_NAME_N_O_N_U = "nONU";
  @SerializedName(SERIALIZED_NAME_N_O_N_U)
  @javax.annotation.Nullable
  private String nONU;

  public static final String SERIALIZED_NAME_Q_TOT_EMB = "qTotEmb";
  @SerializedName(SERIALIZED_NAME_Q_TOT_EMB)
  @javax.annotation.Nullable
  private String qTotEmb;

  public static final String SERIALIZED_NAME_INF_TOT_A_P = "infTotAP";
  @SerializedName(SERIALIZED_NAME_INF_TOT_A_P)
  @javax.annotation.Nonnull
  private CteSefazInfTotAP infTotAP;

  public CteSefazPeri() {
  }

  public CteSefazPeri nONU(@javax.annotation.Nullable String nONU) {
    this.nONU = nONU;
    return this;
  }

  /**
   * Número ONU/UN.  Ver a legislação de transporte de produtos perigosos aplicadas ao modal.
   * @return nONU
   */
  @javax.annotation.Nullable
  public String getnONU() {
    return nONU;
  }

  public void setnONU(@javax.annotation.Nullable String nONU) {
    this.nONU = nONU;
  }


  public CteSefazPeri qTotEmb(@javax.annotation.Nullable String qTotEmb) {
    this.qTotEmb = qTotEmb;
    return this;
  }

  /**
   * Quantidade total de volumes contendo artigos perigosos.  Preencher com o número de volumes (unidades) de artigos perigosos, ou seja, cada embalagem devidamente marcada e etiquetada (por ex.: número de caixas, de tambores, de bombonas, dentre outros). Não deve ser preenchido com o número de ULD, pallets ou containers.
   * @return qTotEmb
   */
  @javax.annotation.Nullable
  public String getqTotEmb() {
    return qTotEmb;
  }

  public void setqTotEmb(@javax.annotation.Nullable String qTotEmb) {
    this.qTotEmb = qTotEmb;
  }


  public CteSefazPeri infTotAP(@javax.annotation.Nonnull CteSefazInfTotAP infTotAP) {
    this.infTotAP = infTotAP;
    return this;
  }

  /**
   * Get infTotAP
   * @return infTotAP
   */
  @javax.annotation.Nonnull
  public CteSefazInfTotAP getInfTotAP() {
    return infTotAP;
  }

  public void setInfTotAP(@javax.annotation.Nonnull CteSefazInfTotAP infTotAP) {
    this.infTotAP = infTotAP;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazPeri cteSefazPeri = (CteSefazPeri) o;
    return Objects.equals(this.nONU, cteSefazPeri.nONU) &&
        Objects.equals(this.qTotEmb, cteSefazPeri.qTotEmb) &&
        Objects.equals(this.infTotAP, cteSefazPeri.infTotAP);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nONU, qTotEmb, infTotAP);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazPeri {\n");
    sb.append("    nONU: ").append(toIndentedString(nONU)).append("\n");
    sb.append("    qTotEmb: ").append(toIndentedString(qTotEmb)).append("\n");
    sb.append("    infTotAP: ").append(toIndentedString(infTotAP)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nONU");
    openapiFields.add("qTotEmb");
    openapiFields.add("infTotAP");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nONU");
    openapiRequiredFields.add("qTotEmb");
    openapiRequiredFields.add("infTotAP");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazPeri
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazPeri.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazPeri is not found in the empty JSON string", CteSefazPeri.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazPeri.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazPeri` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CteSefazPeri.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nONU") != null && !jsonObj.get("nONU").isJsonNull()) && !jsonObj.get("nONU").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nONU` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nONU").toString()));
      }
      if ((jsonObj.get("qTotEmb") != null && !jsonObj.get("qTotEmb").isJsonNull()) && !jsonObj.get("qTotEmb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qTotEmb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qTotEmb").toString()));
      }
      // validate the required field `infTotAP`
      CteSefazInfTotAP.validateJsonElement(jsonObj.get("infTotAP"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazPeri.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazPeri' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazPeri> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazPeri.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazPeri>() {
           @Override
           public void write(JsonWriter out, CteSefazPeri value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazPeri read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazPeri given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazPeri
   * @throws IOException if the JSON string is invalid with respect to CteSefazPeri
   */
  public static CteSefazPeri fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazPeri.class);
  }

  /**
   * Convert an instance of CteSefazPeri to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

