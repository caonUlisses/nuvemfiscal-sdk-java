/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.api;

import io.github.com.caonulisses.nuvemfiscalsdk.ApiException;
import io.github.com.caonulisses.nuvemfiscalsdk.model.Dfe;
import io.github.com.caonulisses.nuvemfiscalsdk.model.DfeCancelamento;
import io.github.com.caonulisses.nuvemfiscalsdk.model.DfeEvento;
import io.github.com.caonulisses.nuvemfiscalsdk.model.DfeEventoListagem;
import io.github.com.caonulisses.nuvemfiscalsdk.model.DfeInutilizacao;
import io.github.com.caonulisses.nuvemfiscalsdk.model.DfeListagem;
import io.github.com.caonulisses.nuvemfiscalsdk.model.DfeLote;
import io.github.com.caonulisses.nuvemfiscalsdk.model.DfeLoteListagem;
import io.github.com.caonulisses.nuvemfiscalsdk.model.DfePedidoEnvioEmail;
import io.github.com.caonulisses.nuvemfiscalsdk.model.DfePedidoInutilizacao;
import io.github.com.caonulisses.nuvemfiscalsdk.model.DfeSefazStatus;
import io.github.com.caonulisses.nuvemfiscalsdk.model.DfeSincronizacao;
import io.github.com.caonulisses.nuvemfiscalsdk.model.EmailStatusResponse;
import java.io.File;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfePedidoCancelamento;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfePedidoEmissao;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfePedidoEmissaoLote;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NfceApi
 */
@Disabled
public class NfceApiTest {

    private final NfceApi api = new NfceApi();

    /**
     * Comandos ESC/POS para impressão do DANFCE
     *
     * ESC/POS é um sistema de comando criado pela Epson usado em diversos sistemas de impressoras POS.    Com o formato ESC/POS, você poderá imprimir nativamente em uma vasta quantidade de modelos de impressora térmicas utilizadas no Brasil e no mundo. Com ela, você consegue fazer o envio de comandos em ESC/POS direto para a porta da impressora.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarEscPosNfceTest() throws ApiException {
        String id = null;
        Integer modelo = null;
        Integer colunas = null;
        Boolean qrcodeLateral = null;
        File response = api.baixarEscPosNfce(id, modelo, colunas, qrcodeLateral);
        // TODO: test validations
    }

    /**
     * Baixar PDF do cancelamento
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarPdfCancelamentoNfceTest() throws ApiException {
        String id = null;
        File response = api.baixarPdfCancelamentoNfce(id);
        // TODO: test validations
    }

    /**
     * Baixar PDF do evento
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarPdfEventoNfceTest() throws ApiException {
        String id = null;
        File response = api.baixarPdfEventoNfce(id);
        // TODO: test validations
    }

    /**
     * Baixar PDF da inutilização
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarPdfInutilizacaoNfceTest() throws ApiException {
        String id = null;
        File response = api.baixarPdfInutilizacaoNfce(id);
        // TODO: test validations
    }

    /**
     * Baixar PDF do DANFCE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarPdfNfceTest() throws ApiException {
        String id = null;
        Boolean logotipo = null;
        Boolean nomeFantasia = null;
        String mensagemRodape = null;
        Boolean resumido = null;
        Boolean qrcodeLateral = null;
        Integer largura = null;
        String margem = null;
        File response = api.baixarPdfNfce(id, logotipo, nomeFantasia, mensagemRodape, resumido, qrcodeLateral, largura, margem);
        // TODO: test validations
    }

    /**
     * Prévia do PDF do DANFCE
     *
     * Através desse endpoint, é possível enviar os dados de uma NFC-e e gerar uma prévia do DANFCE.    Os dados de entrada são os mesmos do endpoint de emissão de NFC-e (&#x60;POST /nfce&#x60;).    **Atenção**: O DANFE gerado por este endpoint é apenas para fins de visualização e não possui valor fiscal. Para a emissão de uma NF-e com valor fiscal, utilize o processo de emissão padrão descrito na documentação.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarPreviaPdfNfceTest() throws ApiException {
        NfePedidoEmissao body = null;
        Boolean logotipo = null;
        Boolean nomeFantasia = null;
        String mensagemRodape = null;
        Boolean resumido = null;
        Boolean qrcodeLateral = null;
        Integer largura = null;
        String margem = null;
        File response = api.baixarPreviaPdfNfce(body, logotipo, nomeFantasia, mensagemRodape, resumido, qrcodeLateral, largura, margem);
        // TODO: test validations
    }

    /**
     * Prévia do XML da NFC-e
     *
     * Através desse endpoint, é possível enviar os dados de uma NFC-e e gerar uma prévia do XML, sem a assinatura digital.    Os dados de entrada são os mesmos do endpoint de emissão de NFC-e (&#x60;POST /nfce&#x60;).    **Atenção**: O XML gerado por este endpoint é apenas para fins de visualização e não possui valor fiscal. Para a emissão de uma NF-e com valor fiscal, utilize o processo de emissão padrão descrito na documentação.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarPreviaXmlNfceTest() throws ApiException {
        NfePedidoEmissao body = null;
        File response = api.baixarPreviaXmlNfce(body);
        // TODO: test validations
    }

    /**
     * Baixar XML do cancelamento
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarXmlCancelamentoNfceTest() throws ApiException {
        String id = null;
        File response = api.baixarXmlCancelamentoNfce(id);
        // TODO: test validations
    }

    /**
     * Baixar XML do evento
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarXmlEventoNfceTest() throws ApiException {
        String id = null;
        File response = api.baixarXmlEventoNfce(id);
        // TODO: test validations
    }

    /**
     * Baixar XML da inutilização
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarXmlInutilizacaoNfceTest() throws ApiException {
        String id = null;
        File response = api.baixarXmlInutilizacaoNfce(id);
        // TODO: test validations
    }

    /**
     * Baixar XML da NFC-e processada
     *
     * Utilize esse endpoint para obter o XML da nota enviado para a SEFAZ, complementado com a informação do protocolo de autorização ou denegação de uso (TAG raiz &#x60;nfeProc&#x60;).    O XML só estará disponível nesse endpoint caso a nota tenha sido autorizada ou denegada pela SEFAZ. Para obter o XML nos demais casos, utilize o endpoint &#x60;GET /nfce/{id}/xml/nota&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarXmlNfceTest() throws ApiException {
        String id = null;
        File response = api.baixarXmlNfce(id);
        // TODO: test validations
    }

    /**
     * Baixar XML da NFC-e
     *
     * Utilize esse endpoint para obter o XML da nota enviado para a SEFAZ.    O XML estará disponível nesse endpoint mesmo em casos que a nota tenha sido rejeitada.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarXmlNfceNotaTest() throws ApiException {
        String id = null;
        File response = api.baixarXmlNfceNota(id);
        // TODO: test validations
    }

    /**
     * Baixar XML do Protocolo da SEFAZ
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarXmlNfceProtocoloTest() throws ApiException {
        String id = null;
        File response = api.baixarXmlNfceProtocolo(id);
        // TODO: test validations
    }

    /**
     * Cancelar uma NFC-e autorizada
     *
     * **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelarNfceTest() throws ApiException {
        String id = null;
        NfePedidoCancelamento body = null;
        DfeCancelamento response = api.cancelarNfce(id, body);
        // TODO: test validations
    }

    /**
     * Consultar o cancelamento da NFC-e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarCancelamentoNfceTest() throws ApiException {
        String id = null;
        DfeCancelamento response = api.consultarCancelamentoNfce(id);
        // TODO: test validations
    }

    /**
     * Consultar evento
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarEventoNfceTest() throws ApiException {
        String id = null;
        DfeEvento response = api.consultarEventoNfce(id);
        // TODO: test validations
    }

    /**
     * Consultar a inutilização de sequência de numeração
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarInutilizacaoNfceTest() throws ApiException {
        String id = null;
        DfeInutilizacao response = api.consultarInutilizacaoNfce(id);
        // TODO: test validations
    }

    /**
     * Consultar lote de NFC-e
     *
     * Consulta os detalhes de um lote já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de lotes e a Nuvem Fiscal irá retornar as informações do lote correspondente.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarLoteNfceTest() throws ApiException {
        String id = null;
        DfeLote response = api.consultarLoteNfce(id);
        // TODO: test validations
    }

    /**
     * Consultar NFC-e
     *
     * Consulta os detalhes de uma NFC-e já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de notas e a Nuvem Fiscal irá retornar as informações da nota correspondente.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarNfceTest() throws ApiException {
        String id = null;
        Dfe response = api.consultarNfce(id);
        // TODO: test validations
    }

    /**
     * Consulta do Status do Serviço na SEFAZ Autorizadora
     *
     * Consulta do status do serviço prestado pelo Portal da Secretaria de Fazenda Estadual.    A Nuvem Fiscal mantém a última consulta em cache por 5 minutos, evitando sobrecarregar desnecessariamente os servidores da SEFAZ (conforme orientação do MOC - versão 7.0, item 5.5.3). Dessa forma, você poderá chamar esse endpoint quantas vezes quiser, sem preocupar-se em ter o seu CNPJ bloqueado por consumo indevido (Rejeição 656).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarStatusSefazNfceTest() throws ApiException {
        String cpfCnpj = null;
        String autorizador = null;
        DfeSefazStatus response = api.consultarStatusSefazNfce(cpfCnpj, autorizador);
        // TODO: test validations
    }

    /**
     * Emitir lote de NFC-e
     *
     * **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por NFC-e.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void emitirLoteNfceTest() throws ApiException {
        NfePedidoEmissaoLote body = null;
        DfeLote response = api.emitirLoteNfce(body);
        // TODO: test validations
    }

    /**
     * Emitir NFC-e
     *
     * **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void emitirNfceTest() throws ApiException {
        NfePedidoEmissao body = null;
        Dfe response = api.emitirNfce(body);
        // TODO: test validations
    }

    /**
     * Enviar e-mail
     *
     * Envia o XML e PDF da nota via email.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enviarEmailNfceTest() throws ApiException {
        String id = null;
        DfePedidoEnvioEmail body = null;
        EmailStatusResponse response = api.enviarEmailNfce(id, body);
        // TODO: test validations
    }

    /**
     * Inutilizar uma sequência de numeração de NFC-e
     *
     * **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inutilizarNumeracaoNfceTest() throws ApiException {
        DfePedidoInutilizacao body = null;
        DfeInutilizacao response = api.inutilizarNumeracaoNfce(body);
        // TODO: test validations
    }

    /**
     * Listar eventos
     *
     * Retorna a lista de eventos vinculados a um documento fiscal de acordo com os critérios de busca utilizados. Os eventos são retornados ordenados pela data da criação, com as mais recentes aparecendo primeiro.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listarEventosNfceTest() throws ApiException {
        String dfeId = null;
        Integer $top = null;
        Integer $skip = null;
        Boolean $inlinecount = null;
        DfeEventoListagem response = api.listarEventosNfce(dfeId, $top, $skip, $inlinecount);
        // TODO: test validations
    }

    /**
     * Listar lotes de NFC-e
     *
     * Retorna a lista dos lotes de acordo com os critérios de busca utilizados. Os lotes são retornados ordenados pela data da criação, com os mais recentes aparecendo primeiro.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listarLotesNfceTest() throws ApiException {
        String cpfCnpj = null;
        String ambiente = null;
        Integer $top = null;
        Integer $skip = null;
        Boolean $inlinecount = null;
        String referencia = null;
        DfeLoteListagem response = api.listarLotesNfce(cpfCnpj, ambiente, $top, $skip, $inlinecount, referencia);
        // TODO: test validations
    }

    /**
     * Listar NFC-e
     *
     * Retorna a lista de notas de acordo com os critérios de busca utilizados. As notas são retornadas ordenadas pela data da criação, com as mais recentes aparecendo primeiro.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listarNfceTest() throws ApiException {
        String cpfCnpj = null;
        String ambiente = null;
        Integer $top = null;
        Integer $skip = null;
        Boolean $inlinecount = null;
        String referencia = null;
        String chave = null;
        String serie = null;
        DfeListagem response = api.listarNfce(cpfCnpj, ambiente, $top, $skip, $inlinecount, referencia, chave, serie);
        // TODO: test validations
    }

    /**
     * Sincroniza dados na NFC-e a partir da SEFAZ
     *
     * Realiza a sincronização dos dados a partir da consulta da situação atual da NFC-e na Base de Dados do Portal da Secretaria de Fazenda Estadual.    **Cenários de uso**:  * Sincronizar uma nota que se encontra com o status &#x60;erro&#x60; na Nuvem Fiscal, mas está autorizada na SEFAZ (útil em casos de erros de transmissão com a SEFAZ, como instabilidades e timeouts).  * Sincronizar uma nota que se encontra com o status &#x60;autorizado&#x60;na Nuvem Fiscal, mas está cancelada na SEFAZ.  * Sincronizar todos os eventos de Cancelamento, Carta de Correção e EPEC de uma nota que porventura não tenham sido feitos a partir da Nuvem Fiscal.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por evento sincronizado ou requisição.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sincronizarNfceTest() throws ApiException {
        String id = null;
        DfeSincronizacao response = api.sincronizarNfce(id);
        // TODO: test validations
    }

}
