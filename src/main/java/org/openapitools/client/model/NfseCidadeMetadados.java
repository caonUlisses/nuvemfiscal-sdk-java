/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NfseCidadeMetadados
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfseCidadeMetadados {
  public static final String SERIALIZED_NAME_CODIGO_IBGE = "codigo_ibge";
  @SerializedName(SERIALIZED_NAME_CODIGO_IBGE)
  @javax.annotation.Nullable
  private String codigoIbge;

  public static final String SERIALIZED_NAME_UF = "uf";
  @SerializedName(SERIALIZED_NAME_UF)
  @javax.annotation.Nullable
  private String uf;

  public static final String SERIALIZED_NAME_MUNICIPIO = "municipio";
  @SerializedName(SERIALIZED_NAME_MUNICIPIO)
  @javax.annotation.Nullable
  private String municipio;

  public static final String SERIALIZED_NAME_PROVEDOR = "provedor";
  @SerializedName(SERIALIZED_NAME_PROVEDOR)
  @javax.annotation.Nullable
  private String provedor;

  /**
   * Gets or Sets ambientes
   */
  @JsonAdapter(AmbientesEnum.Adapter.class)
  public enum AmbientesEnum {
    HOMOLOGACAO("homologacao"),
    
    PRODUCAO("producao");

    private String value;

    AmbientesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AmbientesEnum fromValue(String value) {
      for (AmbientesEnum b : AmbientesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AmbientesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AmbientesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AmbientesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AmbientesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AmbientesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AMBIENTES = "ambientes";
  @SerializedName(SERIALIZED_NAME_AMBIENTES)
  @javax.annotation.Nullable
  private List<AmbientesEnum> ambientes = new ArrayList<>();

  /**
   * Gets or Sets credenciais
   */
  @JsonAdapter(CredenciaisEnum.Adapter.class)
  public enum CredenciaisEnum {
    CERTIFICADO("certificado"),
    
    LOGIN_SENHA("login_senha"),
    
    TOKEN("token");

    private String value;

    CredenciaisEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CredenciaisEnum fromValue(String value) {
      for (CredenciaisEnum b : CredenciaisEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CredenciaisEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CredenciaisEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CredenciaisEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CredenciaisEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CredenciaisEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREDENCIAIS = "credenciais";
  @SerializedName(SERIALIZED_NAME_CREDENCIAIS)
  @javax.annotation.Nullable
  private List<CredenciaisEnum> credenciais = new ArrayList<>();

  public NfseCidadeMetadados() {
  }

  public NfseCidadeMetadados codigoIbge(@javax.annotation.Nullable String codigoIbge) {
    this.codigoIbge = codigoIbge;
    return this;
  }

  /**
   * Código IBGE do município.
   * @return codigoIbge
   */
  @javax.annotation.Nullable
  public String getCodigoIbge() {
    return codigoIbge;
  }

  public void setCodigoIbge(@javax.annotation.Nullable String codigoIbge) {
    this.codigoIbge = codigoIbge;
  }


  public NfseCidadeMetadados uf(@javax.annotation.Nullable String uf) {
    this.uf = uf;
    return this;
  }

  /**
   * UF do município.
   * @return uf
   */
  @javax.annotation.Nullable
  public String getUf() {
    return uf;
  }

  public void setUf(@javax.annotation.Nullable String uf) {
    this.uf = uf;
  }


  public NfseCidadeMetadados municipio(@javax.annotation.Nullable String municipio) {
    this.municipio = municipio;
    return this;
  }

  /**
   * Nome do município.
   * @return municipio
   */
  @javax.annotation.Nullable
  public String getMunicipio() {
    return municipio;
  }

  public void setMunicipio(@javax.annotation.Nullable String municipio) {
    this.municipio = municipio;
  }


  public NfseCidadeMetadados provedor(@javax.annotation.Nullable String provedor) {
    this.provedor = provedor;
    return this;
  }

  /**
   * Provedor do município.
   * @return provedor
   */
  @javax.annotation.Nullable
  public String getProvedor() {
    return provedor;
  }

  public void setProvedor(@javax.annotation.Nullable String provedor) {
    this.provedor = provedor;
  }


  public NfseCidadeMetadados ambientes(@javax.annotation.Nullable List<AmbientesEnum> ambientes) {
    this.ambientes = ambientes;
    return this;
  }

  public NfseCidadeMetadados addAmbientesItem(AmbientesEnum ambientesItem) {
    if (this.ambientes == null) {
      this.ambientes = new ArrayList<>();
    }
    this.ambientes.add(ambientesItem);
    return this;
  }

  /**
   * Ambientes disponíveis no provedor.
   * @return ambientes
   */
  @javax.annotation.Nullable
  public List<AmbientesEnum> getAmbientes() {
    return ambientes;
  }

  public void setAmbientes(@javax.annotation.Nullable List<AmbientesEnum> ambientes) {
    this.ambientes = ambientes;
  }


  public NfseCidadeMetadados credenciais(@javax.annotation.Nullable List<CredenciaisEnum> credenciais) {
    this.credenciais = credenciais;
    return this;
  }

  public NfseCidadeMetadados addCredenciaisItem(CredenciaisEnum credenciaisItem) {
    if (this.credenciais == null) {
      this.credenciais = new ArrayList<>();
    }
    this.credenciais.add(credenciaisItem);
    return this;
  }

  /**
   * Credenciais requeridas para autenticação no provedor.
   * @return credenciais
   */
  @javax.annotation.Nullable
  public List<CredenciaisEnum> getCredenciais() {
    return credenciais;
  }

  public void setCredenciais(@javax.annotation.Nullable List<CredenciaisEnum> credenciais) {
    this.credenciais = credenciais;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfseCidadeMetadados nfseCidadeMetadados = (NfseCidadeMetadados) o;
    return Objects.equals(this.codigoIbge, nfseCidadeMetadados.codigoIbge) &&
        Objects.equals(this.uf, nfseCidadeMetadados.uf) &&
        Objects.equals(this.municipio, nfseCidadeMetadados.municipio) &&
        Objects.equals(this.provedor, nfseCidadeMetadados.provedor) &&
        Objects.equals(this.ambientes, nfseCidadeMetadados.ambientes) &&
        Objects.equals(this.credenciais, nfseCidadeMetadados.credenciais);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codigoIbge, uf, municipio, provedor, ambientes, credenciais);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfseCidadeMetadados {\n");
    sb.append("    codigoIbge: ").append(toIndentedString(codigoIbge)).append("\n");
    sb.append("    uf: ").append(toIndentedString(uf)).append("\n");
    sb.append("    municipio: ").append(toIndentedString(municipio)).append("\n");
    sb.append("    provedor: ").append(toIndentedString(provedor)).append("\n");
    sb.append("    ambientes: ").append(toIndentedString(ambientes)).append("\n");
    sb.append("    credenciais: ").append(toIndentedString(credenciais)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("codigo_ibge");
    openapiFields.add("uf");
    openapiFields.add("municipio");
    openapiFields.add("provedor");
    openapiFields.add("ambientes");
    openapiFields.add("credenciais");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfseCidadeMetadados
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfseCidadeMetadados.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfseCidadeMetadados is not found in the empty JSON string", NfseCidadeMetadados.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfseCidadeMetadados.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfseCidadeMetadados` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("codigo_ibge") != null && !jsonObj.get("codigo_ibge").isJsonNull()) && !jsonObj.get("codigo_ibge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codigo_ibge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codigo_ibge").toString()));
      }
      if ((jsonObj.get("uf") != null && !jsonObj.get("uf").isJsonNull()) && !jsonObj.get("uf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uf").toString()));
      }
      if ((jsonObj.get("municipio") != null && !jsonObj.get("municipio").isJsonNull()) && !jsonObj.get("municipio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `municipio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("municipio").toString()));
      }
      if ((jsonObj.get("provedor") != null && !jsonObj.get("provedor").isJsonNull()) && !jsonObj.get("provedor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provedor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provedor").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ambientes") != null && !jsonObj.get("ambientes").isJsonNull() && !jsonObj.get("ambientes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ambientes` to be an array in the JSON string but got `%s`", jsonObj.get("ambientes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("credenciais") != null && !jsonObj.get("credenciais").isJsonNull() && !jsonObj.get("credenciais").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `credenciais` to be an array in the JSON string but got `%s`", jsonObj.get("credenciais").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfseCidadeMetadados.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfseCidadeMetadados' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfseCidadeMetadados> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfseCidadeMetadados.class));

       return (TypeAdapter<T>) new TypeAdapter<NfseCidadeMetadados>() {
           @Override
           public void write(JsonWriter out, NfseCidadeMetadados value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfseCidadeMetadados read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfseCidadeMetadados given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfseCidadeMetadados
   * @throws IOException if the JSON string is invalid with respect to NfseCidadeMetadados
   */
  public static NfseCidadeMetadados fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfseCidadeMetadados.class);
  }

  /**
   * Convert an instance of NfseCidadeMetadados to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

