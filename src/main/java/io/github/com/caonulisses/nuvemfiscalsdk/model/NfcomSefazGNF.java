/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Informação da NF modelo 21/22 referenciada.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfcomSefazGNF {
  public static final String SERIALIZED_NAME_C_N_P_J = "CNPJ";
  @SerializedName(SERIALIZED_NAME_C_N_P_J)
  @javax.annotation.Nullable
  private String CNPJ;

  public static final String SERIALIZED_NAME_MOD = "mod";
  @SerializedName(SERIALIZED_NAME_MOD)
  @javax.annotation.Nullable
  private Integer mod;

  public static final String SERIALIZED_NAME_SERIE = "serie";
  @SerializedName(SERIALIZED_NAME_SERIE)
  @javax.annotation.Nullable
  private String serie;

  public static final String SERIALIZED_NAME_N_N_F = "nNF";
  @SerializedName(SERIALIZED_NAME_N_N_F)
  @javax.annotation.Nullable
  private Integer nNF;

  public static final String SERIALIZED_NAME_COMPET_EMIS = "CompetEmis";
  @SerializedName(SERIALIZED_NAME_COMPET_EMIS)
  @javax.annotation.Nullable
  private String competEmis;

  public static final String SERIALIZED_NAME_HASH115 = "hash115";
  @SerializedName(SERIALIZED_NAME_HASH115)
  @javax.annotation.Nullable
  private String hash115;

  public NfcomSefazGNF() {
  }

  public NfcomSefazGNF CNPJ(@javax.annotation.Nullable String CNPJ) {
    this.CNPJ = CNPJ;
    return this;
  }

  /**
   * CNPJ do Emitente.  Informar o CNPJ do emitente do Documento Fiscal.
   * @return CNPJ
   */
  @javax.annotation.Nullable
  public String getCNPJ() {
    return CNPJ;
  }

  public void setCNPJ(@javax.annotation.Nullable String CNPJ) {
    this.CNPJ = CNPJ;
  }


  public NfcomSefazGNF mod(@javax.annotation.Nullable Integer mod) {
    this.mod = mod;
    return this;
  }

  /**
   * Modelo do documento.  21 ou 22.
   * @return mod
   */
  @javax.annotation.Nullable
  public Integer getMod() {
    return mod;
  }

  public void setMod(@javax.annotation.Nullable Integer mod) {
    this.mod = mod;
  }


  public NfcomSefazGNF serie(@javax.annotation.Nullable String serie) {
    this.serie = serie;
    return this;
  }

  /**
   * Serie do documento fiscal.
   * @return serie
   */
  @javax.annotation.Nullable
  public String getSerie() {
    return serie;
  }

  public void setSerie(@javax.annotation.Nullable String serie) {
    this.serie = serie;
  }


  public NfcomSefazGNF nNF(@javax.annotation.Nullable Integer nNF) {
    this.nNF = nNF;
    return this;
  }

  /**
   * Número do documento fiscal.
   * minimum: 1
   * maximum: 999999999
   * @return nNF
   */
  @javax.annotation.Nullable
  public Integer getnNF() {
    return nNF;
  }

  public void setnNF(@javax.annotation.Nullable Integer nNF) {
    this.nNF = nNF;
  }


  public NfcomSefazGNF competEmis(@javax.annotation.Nullable String competEmis) {
    this.competEmis = competEmis;
    return this;
  }

  /**
   * Ano e mês da emissão da NF (AAAAMM).
   * @return competEmis
   */
  @javax.annotation.Nullable
  public String getCompetEmis() {
    return competEmis;
  }

  public void setCompetEmis(@javax.annotation.Nullable String competEmis) {
    this.competEmis = competEmis;
  }


  public NfcomSefazGNF hash115(@javax.annotation.Nullable String hash115) {
    this.hash115 = hash115;
    return this;
  }

  /**
   * Hash do registro no arquivo do convênio 115.  Campo poderá ser exigido a critério da UF - campo 36 do arquivo MESTRE DE DOCUMENTO FISCAL (Anexo Único, item 5 do Conv. 115/03).
   * @return hash115
   */
  @javax.annotation.Nullable
  public String getHash115() {
    return hash115;
  }

  public void setHash115(@javax.annotation.Nullable String hash115) {
    this.hash115 = hash115;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfcomSefazGNF nfcomSefazGNF = (NfcomSefazGNF) o;
    return Objects.equals(this.CNPJ, nfcomSefazGNF.CNPJ) &&
        Objects.equals(this.mod, nfcomSefazGNF.mod) &&
        Objects.equals(this.serie, nfcomSefazGNF.serie) &&
        Objects.equals(this.nNF, nfcomSefazGNF.nNF) &&
        Objects.equals(this.competEmis, nfcomSefazGNF.competEmis) &&
        Objects.equals(this.hash115, nfcomSefazGNF.hash115);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(CNPJ, mod, serie, nNF, competEmis, hash115);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfcomSefazGNF {\n");
    sb.append("    CNPJ: ").append(toIndentedString(CNPJ)).append("\n");
    sb.append("    mod: ").append(toIndentedString(mod)).append("\n");
    sb.append("    serie: ").append(toIndentedString(serie)).append("\n");
    sb.append("    nNF: ").append(toIndentedString(nNF)).append("\n");
    sb.append("    competEmis: ").append(toIndentedString(competEmis)).append("\n");
    sb.append("    hash115: ").append(toIndentedString(hash115)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CNPJ");
    openapiFields.add("mod");
    openapiFields.add("serie");
    openapiFields.add("nNF");
    openapiFields.add("CompetEmis");
    openapiFields.add("hash115");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CNPJ");
    openapiRequiredFields.add("mod");
    openapiRequiredFields.add("serie");
    openapiRequiredFields.add("nNF");
    openapiRequiredFields.add("CompetEmis");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfcomSefazGNF
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfcomSefazGNF.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfcomSefazGNF is not found in the empty JSON string", NfcomSefazGNF.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfcomSefazGNF.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfcomSefazGNF` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfcomSefazGNF.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CNPJ") != null && !jsonObj.get("CNPJ").isJsonNull()) && !jsonObj.get("CNPJ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CNPJ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CNPJ").toString()));
      }
      if ((jsonObj.get("serie") != null && !jsonObj.get("serie").isJsonNull()) && !jsonObj.get("serie").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serie` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serie").toString()));
      }
      if ((jsonObj.get("CompetEmis") != null && !jsonObj.get("CompetEmis").isJsonNull()) && !jsonObj.get("CompetEmis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompetEmis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompetEmis").toString()));
      }
      if ((jsonObj.get("hash115") != null && !jsonObj.get("hash115").isJsonNull()) && !jsonObj.get("hash115").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash115` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash115").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfcomSefazGNF.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfcomSefazGNF' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfcomSefazGNF> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfcomSefazGNF.class));

       return (TypeAdapter<T>) new TypeAdapter<NfcomSefazGNF>() {
           @Override
           public void write(JsonWriter out, NfcomSefazGNF value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfcomSefazGNF read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfcomSefazGNF given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfcomSefazGNF
   * @throws IOException if the JSON string is invalid with respect to NfcomSefazGNF
   */
  public static NfcomSefazGNF fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfcomSefazGNF.class);
  }

  /**
   * Convert an instance of NfcomSefazGNF to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

