/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Identificação da NFCom.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfcomSefazIde {
  public static final String SERIALIZED_NAME_C_U_F = "cUF";
  @SerializedName(SERIALIZED_NAME_C_U_F)
  @javax.annotation.Nullable
  private Integer cUF;

  public static final String SERIALIZED_NAME_TP_AMB = "tpAmb";
  @SerializedName(SERIALIZED_NAME_TP_AMB)
  @javax.annotation.Nullable
  private Integer tpAmb;

  public static final String SERIALIZED_NAME_MOD = "mod";
  @SerializedName(SERIALIZED_NAME_MOD)
  @javax.annotation.Nullable
  private Integer mod;

  public static final String SERIALIZED_NAME_SERIE = "serie";
  @SerializedName(SERIALIZED_NAME_SERIE)
  @javax.annotation.Nullable
  private Integer serie;

  public static final String SERIALIZED_NAME_N_N_F = "nNF";
  @SerializedName(SERIALIZED_NAME_N_N_F)
  @javax.annotation.Nullable
  private Integer nNF;

  public static final String SERIALIZED_NAME_C_N_F = "cNF";
  @SerializedName(SERIALIZED_NAME_C_N_F)
  @javax.annotation.Nullable
  private String cNF;

  public static final String SERIALIZED_NAME_C_D_V = "cDV";
  @SerializedName(SERIALIZED_NAME_C_D_V)
  @javax.annotation.Nullable
  private Integer cDV;

  public static final String SERIALIZED_NAME_DH_EMI = "dhEmi";
  @SerializedName(SERIALIZED_NAME_DH_EMI)
  @javax.annotation.Nullable
  private OffsetDateTime dhEmi;

  public static final String SERIALIZED_NAME_TP_EMIS = "tpEmis";
  @SerializedName(SERIALIZED_NAME_TP_EMIS)
  @javax.annotation.Nullable
  private Integer tpEmis;

  public static final String SERIALIZED_NAME_N_SITE_AUTORIZ = "nSiteAutoriz";
  @SerializedName(SERIALIZED_NAME_N_SITE_AUTORIZ)
  @javax.annotation.Nullable
  private Integer nSiteAutoriz;

  public static final String SERIALIZED_NAME_C_MUN_F_G = "cMunFG";
  @SerializedName(SERIALIZED_NAME_C_MUN_F_G)
  @javax.annotation.Nullable
  private String cMunFG;

  public static final String SERIALIZED_NAME_FIN_N_F_COM = "finNFCom";
  @SerializedName(SERIALIZED_NAME_FIN_N_F_COM)
  @javax.annotation.Nullable
  private Integer finNFCom;

  public static final String SERIALIZED_NAME_TP_FAT = "tpFat";
  @SerializedName(SERIALIZED_NAME_TP_FAT)
  @javax.annotation.Nullable
  private Integer tpFat;

  public static final String SERIALIZED_NAME_VER_PROC = "verProc";
  @SerializedName(SERIALIZED_NAME_VER_PROC)
  @javax.annotation.Nullable
  private String verProc;

  public static final String SERIALIZED_NAME_IND_PRE_PAGO = "indPrePago";
  @SerializedName(SERIALIZED_NAME_IND_PRE_PAGO)
  @javax.annotation.Nullable
  private Integer indPrePago;

  public static final String SERIALIZED_NAME_IND_CESSAO_MEIOS_REDE = "indCessaoMeiosRede";
  @SerializedName(SERIALIZED_NAME_IND_CESSAO_MEIOS_REDE)
  @javax.annotation.Nullable
  private Integer indCessaoMeiosRede;

  public static final String SERIALIZED_NAME_IND_NOTA_ENTRADA = "indNotaEntrada";
  @SerializedName(SERIALIZED_NAME_IND_NOTA_ENTRADA)
  @javax.annotation.Nullable
  private Integer indNotaEntrada;

  public static final String SERIALIZED_NAME_DH_CONT = "dhCont";
  @SerializedName(SERIALIZED_NAME_DH_CONT)
  @javax.annotation.Nullable
  private OffsetDateTime dhCont;

  public static final String SERIALIZED_NAME_X_JUST = "xJust";
  @SerializedName(SERIALIZED_NAME_X_JUST)
  @javax.annotation.Nullable
  private String xJust;

  public NfcomSefazIde() {
  }

  public NfcomSefazIde cUF(@javax.annotation.Nullable Integer cUF) {
    this.cUF = cUF;
    return this;
  }

  /**
   * Código da UF de emissão e autorização da NFCom.  Código da UF de emissão e autorização do Documento Fiscal. Utilizar a  Tabela do IBGE de código de unidades da federação.
   * @return cUF
   */
  @javax.annotation.Nullable
  public Integer getcUF() {
    return cUF;
  }

  public void setcUF(@javax.annotation.Nullable Integer cUF) {
    this.cUF = cUF;
  }


  public NfcomSefazIde tpAmb(@javax.annotation.Nullable Integer tpAmb) {
    this.tpAmb = tpAmb;
    return this;
  }

  /**
   * Tipo do Ambiente:  * 1 - Produção  * 2 - Homologação
   * @return tpAmb
   */
  @javax.annotation.Nullable
  public Integer getTpAmb() {
    return tpAmb;
  }

  public void setTpAmb(@javax.annotation.Nullable Integer tpAmb) {
    this.tpAmb = tpAmb;
  }


  public NfcomSefazIde mod(@javax.annotation.Nullable Integer mod) {
    this.mod = mod;
    return this;
  }

  /**
   * Modelo da NFCom.  Utilizar o código 62 para identificação da NFCom.
   * @return mod
   */
  @javax.annotation.Nullable
  public Integer getMod() {
    return mod;
  }

  public void setMod(@javax.annotation.Nullable Integer mod) {
    this.mod = mod;
  }


  public NfcomSefazIde serie(@javax.annotation.Nullable Integer serie) {
    this.serie = serie;
    return this;
  }

  /**
   * Série do documento fiscal.  Informar a série do documento fiscal (informar zero para série única).
   * minimum: 0
   * maximum: 999
   * @return serie
   */
  @javax.annotation.Nullable
  public Integer getSerie() {
    return serie;
  }

  public void setSerie(@javax.annotation.Nullable Integer serie) {
    this.serie = serie;
  }


  public NfcomSefazIde nNF(@javax.annotation.Nullable Integer nNF) {
    this.nNF = nNF;
    return this;
  }

  /**
   * Número do documento fiscal.  Número que identifica o documento fiscal 1 a 999999999.
   * minimum: 1
   * maximum: 999999999
   * @return nNF
   */
  @javax.annotation.Nullable
  public Integer getnNF() {
    return nNF;
  }

  public void setnNF(@javax.annotation.Nullable Integer nNF) {
    this.nNF = nNF;
  }


  public NfcomSefazIde cNF(@javax.annotation.Nullable String cNF) {
    this.cNF = cNF;
    return this;
  }

  /**
   * Código numérico que compõe a Chave de Acesso.  Código aleatório gerado pelo emitente, com o objetivo de evitar acessos indevidos ao documento.    *Geramos automaticamente quando nenhum valor é informado.*
   * @return cNF
   */
  @javax.annotation.Nullable
  public String getcNF() {
    return cNF;
  }

  public void setcNF(@javax.annotation.Nullable String cNF) {
    this.cNF = cNF;
  }


  public NfcomSefazIde cDV(@javax.annotation.Nullable Integer cDV) {
    this.cDV = cDV;
    return this;
  }

  /**
   * Digito verificador da chave de acesso.  Informar o dígito  de controle da chave de acesso documento fiscal, que deve ser calculado com a aplicação do algoritmo módulo 11 (base 2,9) da chave de acesso.    *Geramos automaticamente quando nenhum valor é informado.*
   * minimum: 0
   * maximum: 9
   * @return cDV
   */
  @javax.annotation.Nullable
  public Integer getcDV() {
    return cDV;
  }

  public void setcDV(@javax.annotation.Nullable Integer cDV) {
    this.cDV = cDV;
  }


  public NfcomSefazIde dhEmi(@javax.annotation.Nullable OffsetDateTime dhEmi) {
    this.dhEmi = dhEmi;
    return this;
  }

  /**
   * Data e hora de emissão do documento fiscal.  Formato AAAA-MM-DDTHH:MM:DD TZD.
   * @return dhEmi
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDhEmi() {
    return dhEmi;
  }

  public void setDhEmi(@javax.annotation.Nullable OffsetDateTime dhEmi) {
    this.dhEmi = dhEmi;
  }


  public NfcomSefazIde tpEmis(@javax.annotation.Nullable Integer tpEmis) {
    this.tpEmis = tpEmis;
    return this;
  }

  /**
   * Forma de emissão do Documento Fiscal.  * 1 - Normal  * 2 - Contingência
   * @return tpEmis
   */
  @javax.annotation.Nullable
  public Integer getTpEmis() {
    return tpEmis;
  }

  public void setTpEmis(@javax.annotation.Nullable Integer tpEmis) {
    this.tpEmis = tpEmis;
  }


  public NfcomSefazIde nSiteAutoriz(@javax.annotation.Nullable Integer nSiteAutoriz) {
    this.nSiteAutoriz = nSiteAutoriz;
    return this;
  }

  /**
   * Identificação do número do Site do Autorizador de recepção da NFCom.  Se o autorizador da NFCom possuir apenas um site deverá ser informado com Zero (0), em caso de Autorizador trabalhar com múltiplos sites indicar o número do site para qual foi endereçada a NFCOM (1 a 9).  Observação: o ambiente autorizador que trabalhar com mais de um Site deverá divulgar para cada endereço de site qual número correspondente de nSiteAutoriz o contribuinte pode usar.
   * minimum: 0
   * maximum: 9
   * @return nSiteAutoriz
   */
  @javax.annotation.Nullable
  public Integer getnSiteAutoriz() {
    return nSiteAutoriz;
  }

  public void setnSiteAutoriz(@javax.annotation.Nullable Integer nSiteAutoriz) {
    this.nSiteAutoriz = nSiteAutoriz;
  }


  public NfcomSefazIde cMunFG(@javax.annotation.Nullable String cMunFG) {
    this.cMunFG = cMunFG;
    return this;
  }

  /**
   * Código do município de ocorrência do fato gerador.
   * @return cMunFG
   */
  @javax.annotation.Nullable
  public String getcMunFG() {
    return cMunFG;
  }

  public void setcMunFG(@javax.annotation.Nullable String cMunFG) {
    this.cMunFG = cMunFG;
  }


  public NfcomSefazIde finNFCom(@javax.annotation.Nullable Integer finNFCom) {
    this.finNFCom = finNFCom;
    return this;
  }

  /**
   * Finalidade de emissão da NFCom.  * 0 - NFCom Normal  * 3 - NFCom de Substituição  * 4 - NFCom de Ajuste
   * @return finNFCom
   */
  @javax.annotation.Nullable
  public Integer getFinNFCom() {
    return finNFCom;
  }

  public void setFinNFCom(@javax.annotation.Nullable Integer finNFCom) {
    this.finNFCom = finNFCom;
  }


  public NfcomSefazIde tpFat(@javax.annotation.Nullable Integer tpFat) {
    this.tpFat = tpFat;
    return this;
  }

  /**
   * Tipo de Faturamento da NFCom.  * 0 - Faturamento Normal  * 1 - Faturamento centralizado  * 2 - Cofaturamento
   * @return tpFat
   */
  @javax.annotation.Nullable
  public Integer getTpFat() {
    return tpFat;
  }

  public void setTpFat(@javax.annotation.Nullable Integer tpFat) {
    this.tpFat = tpFat;
  }


  public NfcomSefazIde verProc(@javax.annotation.Nullable String verProc) {
    this.verProc = verProc;
    return this;
  }

  /**
   * Versão do processo de emissão.  Informar a versão do aplicativo emissor de NFCom.
   * @return verProc
   */
  @javax.annotation.Nullable
  public String getVerProc() {
    return verProc;
  }

  public void setVerProc(@javax.annotation.Nullable String verProc) {
    this.verProc = verProc;
  }


  public NfcomSefazIde indPrePago(@javax.annotation.Nullable Integer indPrePago) {
    this.indPrePago = indPrePago;
    return this;
  }

  /**
   * Indicador de serviço pré-pago.  * 1 - Serviço pré-pago (informar a tag somente se a nota for referente a um serviço exclusivamente pré-pago)
   * @return indPrePago
   */
  @javax.annotation.Nullable
  public Integer getIndPrePago() {
    return indPrePago;
  }

  public void setIndPrePago(@javax.annotation.Nullable Integer indPrePago) {
    this.indPrePago = indPrePago;
  }


  public NfcomSefazIde indCessaoMeiosRede(@javax.annotation.Nullable Integer indCessaoMeiosRede) {
    this.indCessaoMeiosRede = indCessaoMeiosRede;
    return this;
  }

  /**
   * Indicador de Sessão de Meios de Rede.  Uma vez informado (valor &#x3D; 1), essa tag dispensa geração do grupo Fatura.  Apenas para notas dos tipos Normal e Substituição com tipo de faturamento normal.
   * @return indCessaoMeiosRede
   */
  @javax.annotation.Nullable
  public Integer getIndCessaoMeiosRede() {
    return indCessaoMeiosRede;
  }

  public void setIndCessaoMeiosRede(@javax.annotation.Nullable Integer indCessaoMeiosRede) {
    this.indCessaoMeiosRede = indCessaoMeiosRede;
  }


  public NfcomSefazIde indNotaEntrada(@javax.annotation.Nullable Integer indNotaEntrada) {
    this.indNotaEntrada = indNotaEntrada;
    return this;
  }

  /**
   * Indicador de nota de entrada.  * 1 - Informar quando for nota de ajuste e possuir itens com CFOP de entrada
   * @return indNotaEntrada
   */
  @javax.annotation.Nullable
  public Integer getIndNotaEntrada() {
    return indNotaEntrada;
  }

  public void setIndNotaEntrada(@javax.annotation.Nullable Integer indNotaEntrada) {
    this.indNotaEntrada = indNotaEntrada;
  }


  public NfcomSefazIde dhCont(@javax.annotation.Nullable OffsetDateTime dhCont) {
    this.dhCont = dhCont;
    return this;
  }

  /**
   * Data e Hora da entrada em contingência.  Informar a data e hora no formato AAAA-MM-DDTHH:MM:SS.
   * @return dhCont
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDhCont() {
    return dhCont;
  }

  public void setDhCont(@javax.annotation.Nullable OffsetDateTime dhCont) {
    this.dhCont = dhCont;
  }


  public NfcomSefazIde xJust(@javax.annotation.Nullable String xJust) {
    this.xJust = xJust;
    return this;
  }

  /**
   * Justificativa da entrada em contingência.
   * @return xJust
   */
  @javax.annotation.Nullable
  public String getxJust() {
    return xJust;
  }

  public void setxJust(@javax.annotation.Nullable String xJust) {
    this.xJust = xJust;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfcomSefazIde nfcomSefazIde = (NfcomSefazIde) o;
    return Objects.equals(this.cUF, nfcomSefazIde.cUF) &&
        Objects.equals(this.tpAmb, nfcomSefazIde.tpAmb) &&
        Objects.equals(this.mod, nfcomSefazIde.mod) &&
        Objects.equals(this.serie, nfcomSefazIde.serie) &&
        Objects.equals(this.nNF, nfcomSefazIde.nNF) &&
        Objects.equals(this.cNF, nfcomSefazIde.cNF) &&
        Objects.equals(this.cDV, nfcomSefazIde.cDV) &&
        Objects.equals(this.dhEmi, nfcomSefazIde.dhEmi) &&
        Objects.equals(this.tpEmis, nfcomSefazIde.tpEmis) &&
        Objects.equals(this.nSiteAutoriz, nfcomSefazIde.nSiteAutoriz) &&
        Objects.equals(this.cMunFG, nfcomSefazIde.cMunFG) &&
        Objects.equals(this.finNFCom, nfcomSefazIde.finNFCom) &&
        Objects.equals(this.tpFat, nfcomSefazIde.tpFat) &&
        Objects.equals(this.verProc, nfcomSefazIde.verProc) &&
        Objects.equals(this.indPrePago, nfcomSefazIde.indPrePago) &&
        Objects.equals(this.indCessaoMeiosRede, nfcomSefazIde.indCessaoMeiosRede) &&
        Objects.equals(this.indNotaEntrada, nfcomSefazIde.indNotaEntrada) &&
        Objects.equals(this.dhCont, nfcomSefazIde.dhCont) &&
        Objects.equals(this.xJust, nfcomSefazIde.xJust);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cUF, tpAmb, mod, serie, nNF, cNF, cDV, dhEmi, tpEmis, nSiteAutoriz, cMunFG, finNFCom, tpFat, verProc, indPrePago, indCessaoMeiosRede, indNotaEntrada, dhCont, xJust);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfcomSefazIde {\n");
    sb.append("    cUF: ").append(toIndentedString(cUF)).append("\n");
    sb.append("    tpAmb: ").append(toIndentedString(tpAmb)).append("\n");
    sb.append("    mod: ").append(toIndentedString(mod)).append("\n");
    sb.append("    serie: ").append(toIndentedString(serie)).append("\n");
    sb.append("    nNF: ").append(toIndentedString(nNF)).append("\n");
    sb.append("    cNF: ").append(toIndentedString(cNF)).append("\n");
    sb.append("    cDV: ").append(toIndentedString(cDV)).append("\n");
    sb.append("    dhEmi: ").append(toIndentedString(dhEmi)).append("\n");
    sb.append("    tpEmis: ").append(toIndentedString(tpEmis)).append("\n");
    sb.append("    nSiteAutoriz: ").append(toIndentedString(nSiteAutoriz)).append("\n");
    sb.append("    cMunFG: ").append(toIndentedString(cMunFG)).append("\n");
    sb.append("    finNFCom: ").append(toIndentedString(finNFCom)).append("\n");
    sb.append("    tpFat: ").append(toIndentedString(tpFat)).append("\n");
    sb.append("    verProc: ").append(toIndentedString(verProc)).append("\n");
    sb.append("    indPrePago: ").append(toIndentedString(indPrePago)).append("\n");
    sb.append("    indCessaoMeiosRede: ").append(toIndentedString(indCessaoMeiosRede)).append("\n");
    sb.append("    indNotaEntrada: ").append(toIndentedString(indNotaEntrada)).append("\n");
    sb.append("    dhCont: ").append(toIndentedString(dhCont)).append("\n");
    sb.append("    xJust: ").append(toIndentedString(xJust)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cUF");
    openapiFields.add("tpAmb");
    openapiFields.add("mod");
    openapiFields.add("serie");
    openapiFields.add("nNF");
    openapiFields.add("cNF");
    openapiFields.add("cDV");
    openapiFields.add("dhEmi");
    openapiFields.add("tpEmis");
    openapiFields.add("nSiteAutoriz");
    openapiFields.add("cMunFG");
    openapiFields.add("finNFCom");
    openapiFields.add("tpFat");
    openapiFields.add("verProc");
    openapiFields.add("indPrePago");
    openapiFields.add("indCessaoMeiosRede");
    openapiFields.add("indNotaEntrada");
    openapiFields.add("dhCont");
    openapiFields.add("xJust");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cUF");
    openapiRequiredFields.add("serie");
    openapiRequiredFields.add("nNF");
    openapiRequiredFields.add("dhEmi");
    openapiRequiredFields.add("tpEmis");
    openapiRequiredFields.add("nSiteAutoriz");
    openapiRequiredFields.add("cMunFG");
    openapiRequiredFields.add("finNFCom");
    openapiRequiredFields.add("tpFat");
    openapiRequiredFields.add("verProc");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfcomSefazIde
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfcomSefazIde.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfcomSefazIde is not found in the empty JSON string", NfcomSefazIde.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfcomSefazIde.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfcomSefazIde` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfcomSefazIde.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cNF") != null && !jsonObj.get("cNF").isJsonNull()) && !jsonObj.get("cNF").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cNF` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cNF").toString()));
      }
      if ((jsonObj.get("cMunFG") != null && !jsonObj.get("cMunFG").isJsonNull()) && !jsonObj.get("cMunFG").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cMunFG` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cMunFG").toString()));
      }
      if ((jsonObj.get("verProc") != null && !jsonObj.get("verProc").isJsonNull()) && !jsonObj.get("verProc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verProc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verProc").toString()));
      }
      if ((jsonObj.get("xJust") != null && !jsonObj.get("xJust").isJsonNull()) && !jsonObj.get("xJust").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xJust` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xJust").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfcomSefazIde.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfcomSefazIde' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfcomSefazIde> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfcomSefazIde.class));

       return (TypeAdapter<T>) new TypeAdapter<NfcomSefazIde>() {
           @Override
           public void write(JsonWriter out, NfcomSefazIde value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfcomSefazIde read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfcomSefazIde given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfcomSefazIde
   * @throws IOException if the JSON string is invalid with respect to NfcomSefazIde
   */
  public static NfcomSefazIde fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfcomSefazIde.class);
  }

  /**
   * Convert an instance of NfcomSefazIde to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

