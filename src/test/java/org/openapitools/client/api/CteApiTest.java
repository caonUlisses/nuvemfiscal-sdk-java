/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.api;

import io.github.com.caonulisses.nuvemfiscalsdk.ApiException;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CteCartaCorrecao;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CtePedidoCancelamento;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CtePedidoCartaCorrecao;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CtePedidoEmissao;
import io.github.com.caonulisses.nuvemfiscalsdk.model.Dfe;
import io.github.com.caonulisses.nuvemfiscalsdk.model.DfeCancelamento;
import io.github.com.caonulisses.nuvemfiscalsdk.model.DfeEvento;
import io.github.com.caonulisses.nuvemfiscalsdk.model.DfeListagem;
import io.github.com.caonulisses.nuvemfiscalsdk.model.DfeSefazStatus;
import io.github.com.caonulisses.nuvemfiscalsdk.model.DfeSincronizacao;
import java.io.File;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CteApi
 */
@Disabled
public class CteApiTest {

    private final CteApi api = new CteApi();

    /**
     * Baixar PDF do cancelamento
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarPdfCancelamentoCteTest() throws ApiException {
        String id = null;
        File response = api.baixarPdfCancelamentoCte(id);
        // TODO: test validations
    }

    /**
     * Baixar PDF da carta de correção
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarPdfCartaCorrecaoCteTest() throws ApiException {
        String id = null;
        File response = api.baixarPdfCartaCorrecaoCte(id);
        // TODO: test validations
    }

    /**
     * Baixar PDF do DACTE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarPdfCteTest() throws ApiException {
        String id = null;
        Boolean logotipo = null;
        File response = api.baixarPdfCte(id, logotipo);
        // TODO: test validations
    }

    /**
     * Baixar PDF do evento
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarPdfEventoCteTest() throws ApiException {
        String id = null;
        File response = api.baixarPdfEventoCte(id);
        // TODO: test validations
    }

    /**
     * Baixar XML do cancelamento
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarXmlCancelamentoCteTest() throws ApiException {
        String id = null;
        File response = api.baixarXmlCancelamentoCte(id);
        // TODO: test validations
    }

    /**
     * Baixar XML da carta de correção
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarXmlCartaCorrecaoCteTest() throws ApiException {
        String id = null;
        File response = api.baixarXmlCartaCorrecaoCte(id);
        // TODO: test validations
    }

    /**
     * Baixar XML do CT-e processado
     *
     * Utilize esse endpoint para obter o XML do conhecimento enviado para a SEFAZ, complementado com a informação do protocolo de autorização de uso (TAG raiz &#x60;cteProc&#x60;).    O XML só estará disponível nesse endpoint caso o conhecimento tenha sido autorizado pela SEFAZ. Para obter o XML nos demais casos, utilize o endpoint &#x60;GET /cte/{id}/xml/conhecimento&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarXmlCteTest() throws ApiException {
        String id = null;
        File response = api.baixarXmlCte(id);
        // TODO: test validations
    }

    /**
     * Baixar XML do CT-e
     *
     * Utilize esse endpoint para obter o XML do conhecimento enviado para a SEFAZ.    O XML estará disponível nesse endpoint mesmo em casos que o conhecimento tenha sido rejeitado.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarXmlCteConhecimentoTest() throws ApiException {
        String id = null;
        File response = api.baixarXmlCteConhecimento(id);
        // TODO: test validations
    }

    /**
     * Baixar XML do Protocolo da SEFAZ
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarXmlCteProtocoloTest() throws ApiException {
        String id = null;
        File response = api.baixarXmlCteProtocolo(id);
        // TODO: test validations
    }

    /**
     * Baixar XML do evento
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarXmlEventoCteTest() throws ApiException {
        String id = null;
        File response = api.baixarXmlEventoCte(id);
        // TODO: test validations
    }

    /**
     * Cancelar um CT-e autorizado
     *
     * **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelarCteTest() throws ApiException {
        String id = null;
        CtePedidoCancelamento body = null;
        DfeCancelamento response = api.cancelarCte(id, body);
        // TODO: test validations
    }

    /**
     * Consultar o cancelamento do CT-e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarCancelamentoCteTest() throws ApiException {
        String id = null;
        DfeCancelamento response = api.consultarCancelamentoCte(id);
        // TODO: test validations
    }

    /**
     * Consultar a solicitação de correção do CT-e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarCartaCorrecaoCteTest() throws ApiException {
        String id = null;
        CteCartaCorrecao response = api.consultarCartaCorrecaoCte(id);
        // TODO: test validations
    }

    /**
     * Consultar CT-e
     *
     * Consulta os detalhes de um CT-e já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de CT-e e a Nuvem Fiscal irá retornar as informações do CT-e correspondente.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarCteTest() throws ApiException {
        String id = null;
        Dfe response = api.consultarCte(id);
        // TODO: test validations
    }

    /**
     * Consultar evento
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarEventoCteTest() throws ApiException {
        String id = null;
        DfeEvento response = api.consultarEventoCte(id);
        // TODO: test validations
    }

    /**
     * Consulta do Status do Serviço na SEFAZ Autorizadora
     *
     * Consulta do status do serviço prestado pelo Portal da Secretaria de Fazenda Estadual.    A Nuvem Fiscal mantém a última consulta em cache por 5 minutos, evitando sobrecarregar desnecessariamente os servidores da SEFAZ (conforme orientação do MOC - versão 3.0.0a, item 4.6.3). Dessa forma, você poderá chamar esse endpoint quantas vezes quiser, sem preocupar-se em ter o seu CNPJ bloqueado por consumo indevido (Rejeição 656).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarStatusSefazCteTest() throws ApiException {
        String cpfCnpj = null;
        String autorizador = null;
        DfeSefazStatus response = api.consultarStatusSefazCte(cpfCnpj, autorizador);
        // TODO: test validations
    }

    /**
     * Solicitar correção do CT-e
     *
     * É possível enviar até 20 correções diferentes, sendo que será válido sempre a última correção enviada.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void criarCartaCorrecaoCteTest() throws ApiException {
        String id = null;
        CtePedidoCartaCorrecao body = null;
        CteCartaCorrecao response = api.criarCartaCorrecaoCte(id, body);
        // TODO: test validations
    }

    /**
     * Emitir CT-e
     *
     * **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void emitirCteTest() throws ApiException {
        CtePedidoEmissao body = null;
        Dfe response = api.emitirCte(body);
        // TODO: test validations
    }

    /**
     * Listar CT-e
     *
     * Retorna a lista de CT-e de acordo com os critérios de busca utilizados. Os CT-e são retornados ordenados pela data da criação, com os mais recentes aparecendo primeiro.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listarCteTest() throws ApiException {
        String cpfCnpj = null;
        String ambiente = null;
        Integer $top = null;
        Integer $skip = null;
        Boolean $inlinecount = null;
        String referencia = null;
        String chave = null;
        String serie = null;
        DfeListagem response = api.listarCte(cpfCnpj, ambiente, $top, $skip, $inlinecount, referencia, chave, serie);
        // TODO: test validations
    }

    /**
     * Sincroniza dados no CT-e a partir da SEFAZ
     *
     * Realiza a sincronização dos dados a partir da consulta da situação atual da CT-e na Base de Dados do Portal da Secretaria de Fazenda Estadual.    **Cenários de uso**:  * Sincronizar um CT-e que se encontra com o status &#x60;erro&#x60; na Nuvem Fiscal, mas está autorizado na SEFAZ (útil em casos de erros de transmissão com a SEFAZ, como instabilidades e timeouts).  * Sincronizar um CT-e que se encontra com o status &#x60;autorizado&#x60;na Nuvem Fiscal, mas está cancelado na SEFAZ.  * Sincronizar todos os eventos de Cancelamento e Carta de Correção de um CT-e que porventura não tenham sido feitos a partir da Nuvem Fiscal.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por evento sincronizado ou requisição.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sincronizarCteTest() throws ApiException {
        String id = null;
        DfeSincronizacao response = api.sincronizarCte(id);
        // TODO: test validations
    }

}
