/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Grupo de Cartões, PIX, Boletos e outros Pagamentos Eletrônicos.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazCard {
  public static final String SERIALIZED_NAME_TP_INTEGRA = "tpIntegra";
  @SerializedName(SERIALIZED_NAME_TP_INTEGRA)
  @javax.annotation.Nullable
  private Integer tpIntegra;

  public static final String SERIALIZED_NAME_C_N_P_J = "CNPJ";
  @SerializedName(SERIALIZED_NAME_C_N_P_J)
  @javax.annotation.Nullable
  private String CNPJ;

  public static final String SERIALIZED_NAME_T_BAND = "tBand";
  @SerializedName(SERIALIZED_NAME_T_BAND)
  @javax.annotation.Nullable
  private String tBand;

  public static final String SERIALIZED_NAME_C_AUT = "cAut";
  @SerializedName(SERIALIZED_NAME_C_AUT)
  @javax.annotation.Nullable
  private String cAut;

  public static final String SERIALIZED_NAME_CN_P_J_RECEB = "CNPJReceb";
  @SerializedName(SERIALIZED_NAME_CN_P_J_RECEB)
  @javax.annotation.Nullable
  private String cnPJReceb;

  public static final String SERIALIZED_NAME_ID_TERM_PAG = "idTermPag";
  @SerializedName(SERIALIZED_NAME_ID_TERM_PAG)
  @javax.annotation.Nullable
  private String idTermPag;

  public NfeSefazCard() {
  }

  public NfeSefazCard tpIntegra(@javax.annotation.Nullable Integer tpIntegra) {
    this.tpIntegra = tpIntegra;
    return this;
  }

  /**
   * Tipo de Integração do processo de pagamento com o sistema de automação da empresa:  * 1 - Pagamento integrado com o sistema de automação da empresa (Ex.: equipamento TEF, Comércio Eletrônico, POS Integrado)  * 2 - Pagamento não integrado com o sistema de automação da empresa (Ex.: equipamento POS Simples)
   * @return tpIntegra
   */
  @javax.annotation.Nullable
  public Integer getTpIntegra() {
    return tpIntegra;
  }

  public void setTpIntegra(@javax.annotation.Nullable Integer tpIntegra) {
    this.tpIntegra = tpIntegra;
  }


  public NfeSefazCard CNPJ(@javax.annotation.Nullable String CNPJ) {
    this.CNPJ = CNPJ;
    return this;
  }

  /**
   * CNPJ da instituição de pagamento.
   * @return CNPJ
   */
  @javax.annotation.Nullable
  public String getCNPJ() {
    return CNPJ;
  }

  public void setCNPJ(@javax.annotation.Nullable String CNPJ) {
    this.CNPJ = CNPJ;
  }


  public NfeSefazCard tBand(@javax.annotation.Nullable String tBand) {
    this.tBand = tBand;
    return this;
  }

  /**
   * Bandeira da operadora de cartão.
   * @return tBand
   */
  @javax.annotation.Nullable
  public String gettBand() {
    return tBand;
  }

  public void settBand(@javax.annotation.Nullable String tBand) {
    this.tBand = tBand;
  }


  public NfeSefazCard cAut(@javax.annotation.Nullable String cAut) {
    this.cAut = cAut;
    return this;
  }

  /**
   * Número de autorização da operação com cartões, PIX, boletos e outros pagamentos eletrônicos.
   * @return cAut
   */
  @javax.annotation.Nullable
  public String getcAut() {
    return cAut;
  }

  public void setcAut(@javax.annotation.Nullable String cAut) {
    this.cAut = cAut;
  }


  public NfeSefazCard cnPJReceb(@javax.annotation.Nullable String cnPJReceb) {
    this.cnPJReceb = cnPJReceb;
    return this;
  }

  /**
   * CNPJ do beneficiário do pagamento.
   * @return cnPJReceb
   */
  @javax.annotation.Nullable
  public String getCnPJReceb() {
    return cnPJReceb;
  }

  public void setCnPJReceb(@javax.annotation.Nullable String cnPJReceb) {
    this.cnPJReceb = cnPJReceb;
  }


  public NfeSefazCard idTermPag(@javax.annotation.Nullable String idTermPag) {
    this.idTermPag = idTermPag;
    return this;
  }

  /**
   * Identificador do terminal de pagamento.
   * @return idTermPag
   */
  @javax.annotation.Nullable
  public String getIdTermPag() {
    return idTermPag;
  }

  public void setIdTermPag(@javax.annotation.Nullable String idTermPag) {
    this.idTermPag = idTermPag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazCard nfeSefazCard = (NfeSefazCard) o;
    return Objects.equals(this.tpIntegra, nfeSefazCard.tpIntegra) &&
        Objects.equals(this.CNPJ, nfeSefazCard.CNPJ) &&
        Objects.equals(this.tBand, nfeSefazCard.tBand) &&
        Objects.equals(this.cAut, nfeSefazCard.cAut) &&
        Objects.equals(this.cnPJReceb, nfeSefazCard.cnPJReceb) &&
        Objects.equals(this.idTermPag, nfeSefazCard.idTermPag);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tpIntegra, CNPJ, tBand, cAut, cnPJReceb, idTermPag);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazCard {\n");
    sb.append("    tpIntegra: ").append(toIndentedString(tpIntegra)).append("\n");
    sb.append("    CNPJ: ").append(toIndentedString(CNPJ)).append("\n");
    sb.append("    tBand: ").append(toIndentedString(tBand)).append("\n");
    sb.append("    cAut: ").append(toIndentedString(cAut)).append("\n");
    sb.append("    cnPJReceb: ").append(toIndentedString(cnPJReceb)).append("\n");
    sb.append("    idTermPag: ").append(toIndentedString(idTermPag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tpIntegra");
    openapiFields.add("CNPJ");
    openapiFields.add("tBand");
    openapiFields.add("cAut");
    openapiFields.add("CNPJReceb");
    openapiFields.add("idTermPag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tpIntegra");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazCard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazCard is not found in the empty JSON string", NfeSefazCard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazCard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfeSefazCard.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CNPJ") != null && !jsonObj.get("CNPJ").isJsonNull()) && !jsonObj.get("CNPJ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CNPJ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CNPJ").toString()));
      }
      if ((jsonObj.get("tBand") != null && !jsonObj.get("tBand").isJsonNull()) && !jsonObj.get("tBand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tBand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tBand").toString()));
      }
      if ((jsonObj.get("cAut") != null && !jsonObj.get("cAut").isJsonNull()) && !jsonObj.get("cAut").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cAut` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cAut").toString()));
      }
      if ((jsonObj.get("CNPJReceb") != null && !jsonObj.get("CNPJReceb").isJsonNull()) && !jsonObj.get("CNPJReceb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CNPJReceb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CNPJReceb").toString()));
      }
      if ((jsonObj.get("idTermPag") != null && !jsonObj.get("idTermPag").isJsonNull()) && !jsonObj.get("idTermPag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idTermPag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idTermPag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazCard.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazCard>() {
           @Override
           public void write(JsonWriter out, NfeSefazCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazCard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazCard
   * @throws IOException if the JSON string is invalid with respect to NfeSefazCard
   */
  public static NfeSefazCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazCard.class);
  }

  /**
   * Convert an instance of NfeSefazCard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

