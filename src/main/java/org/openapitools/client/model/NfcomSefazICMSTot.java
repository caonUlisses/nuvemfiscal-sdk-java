/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Totais referentes ao ICMS.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfcomSefazICMSTot {
  public static final String SERIALIZED_NAME_V_B_C = "vBC";
  @SerializedName(SERIALIZED_NAME_V_B_C)
  @javax.annotation.Nullable
  private BigDecimal vBC;

  public static final String SERIALIZED_NAME_V_I_C_M_S = "vICMS";
  @SerializedName(SERIALIZED_NAME_V_I_C_M_S)
  @javax.annotation.Nullable
  private BigDecimal vICMS;

  public static final String SERIALIZED_NAME_V_I_C_M_S_DESON = "vICMSDeson";
  @SerializedName(SERIALIZED_NAME_V_I_C_M_S_DESON)
  @javax.annotation.Nullable
  private BigDecimal vICMSDeson;

  public static final String SERIALIZED_NAME_V_F_C_P = "vFCP";
  @SerializedName(SERIALIZED_NAME_V_F_C_P)
  @javax.annotation.Nullable
  private BigDecimal vFCP;

  public NfcomSefazICMSTot() {
  }

  public NfcomSefazICMSTot vBC(@javax.annotation.Nullable BigDecimal vBC) {
    this.vBC = vBC;
    return this;
  }

  /**
   * BC do ICMS.
   * minimum: 0
   * @return vBC
   */
  @javax.annotation.Nullable
  public BigDecimal getvBC() {
    return vBC;
  }

  public void setvBC(@javax.annotation.Nullable BigDecimal vBC) {
    this.vBC = vBC;
  }


  public NfcomSefazICMSTot vICMS(@javax.annotation.Nullable BigDecimal vICMS) {
    this.vICMS = vICMS;
    return this;
  }

  /**
   * Valor Total do ICMS.
   * minimum: 0
   * @return vICMS
   */
  @javax.annotation.Nullable
  public BigDecimal getvICMS() {
    return vICMS;
  }

  public void setvICMS(@javax.annotation.Nullable BigDecimal vICMS) {
    this.vICMS = vICMS;
  }


  public NfcomSefazICMSTot vICMSDeson(@javax.annotation.Nullable BigDecimal vICMSDeson) {
    this.vICMSDeson = vICMSDeson;
    return this;
  }

  /**
   * Valor Total do ICMS desonerado.
   * minimum: 0
   * @return vICMSDeson
   */
  @javax.annotation.Nullable
  public BigDecimal getvICMSDeson() {
    return vICMSDeson;
  }

  public void setvICMSDeson(@javax.annotation.Nullable BigDecimal vICMSDeson) {
    this.vICMSDeson = vICMSDeson;
  }


  public NfcomSefazICMSTot vFCP(@javax.annotation.Nullable BigDecimal vFCP) {
    this.vFCP = vFCP;
    return this;
  }

  /**
   * Valor Total do FCP (Fundo de Combate à Pobreza).
   * minimum: 0
   * @return vFCP
   */
  @javax.annotation.Nullable
  public BigDecimal getvFCP() {
    return vFCP;
  }

  public void setvFCP(@javax.annotation.Nullable BigDecimal vFCP) {
    this.vFCP = vFCP;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfcomSefazICMSTot nfcomSefazICMSTot = (NfcomSefazICMSTot) o;
    return Objects.equals(this.vBC, nfcomSefazICMSTot.vBC) &&
        Objects.equals(this.vICMS, nfcomSefazICMSTot.vICMS) &&
        Objects.equals(this.vICMSDeson, nfcomSefazICMSTot.vICMSDeson) &&
        Objects.equals(this.vFCP, nfcomSefazICMSTot.vFCP);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vBC, vICMS, vICMSDeson, vFCP);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfcomSefazICMSTot {\n");
    sb.append("    vBC: ").append(toIndentedString(vBC)).append("\n");
    sb.append("    vICMS: ").append(toIndentedString(vICMS)).append("\n");
    sb.append("    vICMSDeson: ").append(toIndentedString(vICMSDeson)).append("\n");
    sb.append("    vFCP: ").append(toIndentedString(vFCP)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("vBC");
    openapiFields.add("vICMS");
    openapiFields.add("vICMSDeson");
    openapiFields.add("vFCP");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("vBC");
    openapiRequiredFields.add("vICMS");
    openapiRequiredFields.add("vICMSDeson");
    openapiRequiredFields.add("vFCP");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfcomSefazICMSTot
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfcomSefazICMSTot.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfcomSefazICMSTot is not found in the empty JSON string", NfcomSefazICMSTot.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfcomSefazICMSTot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfcomSefazICMSTot` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfcomSefazICMSTot.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfcomSefazICMSTot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfcomSefazICMSTot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfcomSefazICMSTot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfcomSefazICMSTot.class));

       return (TypeAdapter<T>) new TypeAdapter<NfcomSefazICMSTot>() {
           @Override
           public void write(JsonWriter out, NfcomSefazICMSTot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfcomSefazICMSTot read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfcomSefazICMSTot given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfcomSefazICMSTot
   * @throws IOException if the JSON string is invalid with respect to NfcomSefazICMSTot
   */
  public static NfcomSefazICMSTot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfcomSefazICMSTot.class);
  }

  /**
   * Convert an instance of NfcomSefazICMSTot to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

