/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.ListaDocDedRed;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Grupo de informações relativas ao valores para dedução/redução do valor da base de cálculo (valor do serviço).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class InfoDedRed {
  public static final String SERIALIZED_NAME_P_D_R = "pDR";
  @SerializedName(SERIALIZED_NAME_P_D_R)
  @javax.annotation.Nullable
  private BigDecimal pDR;

  public static final String SERIALIZED_NAME_V_D_R = "vDR";
  @SerializedName(SERIALIZED_NAME_V_D_R)
  @javax.annotation.Nullable
  private BigDecimal vDR;

  public static final String SERIALIZED_NAME_DOCUMENTOS = "documentos";
  @SerializedName(SERIALIZED_NAME_DOCUMENTOS)
  @javax.annotation.Nullable
  private ListaDocDedRed documentos;

  public InfoDedRed() {
  }

  public InfoDedRed pDR(@javax.annotation.Nullable BigDecimal pDR) {
    this.pDR = pDR;
    return this;
  }

  /**
   * Valor percentual padrão para dedução/redução do valor do serviço.
   * minimum: 0
   * @return pDR
   */
  @javax.annotation.Nullable
  public BigDecimal getpDR() {
    return pDR;
  }

  public void setpDR(@javax.annotation.Nullable BigDecimal pDR) {
    this.pDR = pDR;
  }


  public InfoDedRed vDR(@javax.annotation.Nullable BigDecimal vDR) {
    this.vDR = vDR;
    return this;
  }

  /**
   * Valor monetário padrão para dedução/redução do valor do serviço.
   * minimum: 0
   * @return vDR
   */
  @javax.annotation.Nullable
  public BigDecimal getvDR() {
    return vDR;
  }

  public void setvDR(@javax.annotation.Nullable BigDecimal vDR) {
    this.vDR = vDR;
  }


  public InfoDedRed documentos(@javax.annotation.Nullable ListaDocDedRed documentos) {
    this.documentos = documentos;
    return this;
  }

  /**
   * Get documentos
   * @return documentos
   */
  @javax.annotation.Nullable
  public ListaDocDedRed getDocumentos() {
    return documentos;
  }

  public void setDocumentos(@javax.annotation.Nullable ListaDocDedRed documentos) {
    this.documentos = documentos;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfoDedRed infoDedRed = (InfoDedRed) o;
    return Objects.equals(this.pDR, infoDedRed.pDR) &&
        Objects.equals(this.vDR, infoDedRed.vDR) &&
        Objects.equals(this.documentos, infoDedRed.documentos);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pDR, vDR, documentos);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfoDedRed {\n");
    sb.append("    pDR: ").append(toIndentedString(pDR)).append("\n");
    sb.append("    vDR: ").append(toIndentedString(vDR)).append("\n");
    sb.append("    documentos: ").append(toIndentedString(documentos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pDR");
    openapiFields.add("vDR");
    openapiFields.add("documentos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InfoDedRed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InfoDedRed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InfoDedRed is not found in the empty JSON string", InfoDedRed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InfoDedRed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InfoDedRed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `documentos`
      if (jsonObj.get("documentos") != null && !jsonObj.get("documentos").isJsonNull()) {
        ListaDocDedRed.validateJsonElement(jsonObj.get("documentos"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InfoDedRed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InfoDedRed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InfoDedRed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InfoDedRed.class));

       return (TypeAdapter<T>) new TypeAdapter<InfoDedRed>() {
           @Override
           public void write(JsonWriter out, InfoDedRed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InfoDedRed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InfoDedRed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InfoDedRed
   * @throws IOException if the JSON string is invalid with respect to InfoDedRed
   */
  public static InfoDedRed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InfoDedRed.class);
  }

  /**
   * Convert an instance of InfoDedRed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

