/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import io.github.com.caonulisses.nuvemfiscalsdk.model.InfoIntermediario;
import io.github.com.caonulisses.nuvemfiscalsdk.model.InfoPrestador;
import io.github.com.caonulisses.nuvemfiscalsdk.model.InfoTomador;
import io.github.com.caonulisses.nuvemfiscalsdk.model.InfoValores;
import io.github.com.caonulisses.nuvemfiscalsdk.model.Serv;
import io.github.com.caonulisses.nuvemfiscalsdk.model.Substituicao;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Grupo de informações da DPS relativas ao serviço prestado.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class InfDPS {
  public static final String SERIALIZED_NAME_TP_AMB = "tpAmb";
  @SerializedName(SERIALIZED_NAME_TP_AMB)
  @javax.annotation.Nullable
  private Integer tpAmb;

  public static final String SERIALIZED_NAME_DH_EMI = "dhEmi";
  @SerializedName(SERIALIZED_NAME_DH_EMI)
  @javax.annotation.Nullable
  private OffsetDateTime dhEmi;

  public static final String SERIALIZED_NAME_VER_APLIC = "verAplic";
  @SerializedName(SERIALIZED_NAME_VER_APLIC)
  @javax.annotation.Nullable
  private String verAplic;

  public static final String SERIALIZED_NAME_D_COMPET = "dCompet";
  @SerializedName(SERIALIZED_NAME_D_COMPET)
  @javax.annotation.Nullable
  private LocalDate dCompet;

  public static final String SERIALIZED_NAME_SUBST = "subst";
  @SerializedName(SERIALIZED_NAME_SUBST)
  @javax.annotation.Nullable
  private Substituicao subst;

  public static final String SERIALIZED_NAME_PREST = "prest";
  @SerializedName(SERIALIZED_NAME_PREST)
  @javax.annotation.Nonnull
  private InfoPrestador prest;

  public static final String SERIALIZED_NAME_TOMA = "toma";
  @SerializedName(SERIALIZED_NAME_TOMA)
  @javax.annotation.Nullable
  private InfoTomador toma;

  public static final String SERIALIZED_NAME_INTERM = "interm";
  @SerializedName(SERIALIZED_NAME_INTERM)
  @javax.annotation.Nullable
  private InfoIntermediario interm;

  public static final String SERIALIZED_NAME_SERV = "serv";
  @SerializedName(SERIALIZED_NAME_SERV)
  @javax.annotation.Nonnull
  private Serv serv;

  public static final String SERIALIZED_NAME_VALORES = "valores";
  @SerializedName(SERIALIZED_NAME_VALORES)
  @javax.annotation.Nonnull
  private InfoValores valores;

  public InfDPS() {
  }

  public InfDPS tpAmb(@javax.annotation.Nullable Integer tpAmb) {
    this.tpAmb = tpAmb;
    return this;
  }

  /**
   * Identificação do Ambiente:  * 1 - Produção  * 2 - Homologação
   * @return tpAmb
   */
  @javax.annotation.Nullable
  public Integer getTpAmb() {
    return tpAmb;
  }

  public void setTpAmb(@javax.annotation.Nullable Integer tpAmb) {
    this.tpAmb = tpAmb;
  }


  public InfDPS dhEmi(@javax.annotation.Nullable OffsetDateTime dhEmi) {
    this.dhEmi = dhEmi;
    return this;
  }

  /**
   * Data e hora da emissão do DPS. Data e hora no formato UTC (Universal Coordinated Time): AAAA-MM-DDThh:mm:ssTZD.
   * @return dhEmi
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDhEmi() {
    return dhEmi;
  }

  public void setDhEmi(@javax.annotation.Nullable OffsetDateTime dhEmi) {
    this.dhEmi = dhEmi;
  }


  public InfDPS verAplic(@javax.annotation.Nullable String verAplic) {
    this.verAplic = verAplic;
    return this;
  }

  /**
   * Versão do aplicativo que gerou o DPS.
   * @return verAplic
   */
  @javax.annotation.Nullable
  public String getVerAplic() {
    return verAplic;
  }

  public void setVerAplic(@javax.annotation.Nullable String verAplic) {
    this.verAplic = verAplic;
  }


  public InfDPS dCompet(@javax.annotation.Nullable LocalDate dCompet) {
    this.dCompet = dCompet;
    return this;
  }

  /**
   * Data em que se iniciou a prestação do serviço: Dia, mês e ano (AAAAMMDD). (AAAA-MM-DDThh:mm:ssTZD).      *Geramos automaticamente quando nenhum valor é informado.*
   * @return dCompet
   */
  @javax.annotation.Nullable
  public LocalDate getdCompet() {
    return dCompet;
  }

  public void setdCompet(@javax.annotation.Nullable LocalDate dCompet) {
    this.dCompet = dCompet;
  }


  public InfDPS subst(@javax.annotation.Nullable Substituicao subst) {
    this.subst = subst;
    return this;
  }

  /**
   * Get subst
   * @return subst
   */
  @javax.annotation.Nullable
  public Substituicao getSubst() {
    return subst;
  }

  public void setSubst(@javax.annotation.Nullable Substituicao subst) {
    this.subst = subst;
  }


  public InfDPS prest(@javax.annotation.Nonnull InfoPrestador prest) {
    this.prest = prest;
    return this;
  }

  /**
   * Get prest
   * @return prest
   */
  @javax.annotation.Nonnull
  public InfoPrestador getPrest() {
    return prest;
  }

  public void setPrest(@javax.annotation.Nonnull InfoPrestador prest) {
    this.prest = prest;
  }


  public InfDPS toma(@javax.annotation.Nullable InfoTomador toma) {
    this.toma = toma;
    return this;
  }

  /**
   * Get toma
   * @return toma
   */
  @javax.annotation.Nullable
  public InfoTomador getToma() {
    return toma;
  }

  public void setToma(@javax.annotation.Nullable InfoTomador toma) {
    this.toma = toma;
  }


  public InfDPS interm(@javax.annotation.Nullable InfoIntermediario interm) {
    this.interm = interm;
    return this;
  }

  /**
   * Get interm
   * @return interm
   */
  @javax.annotation.Nullable
  public InfoIntermediario getInterm() {
    return interm;
  }

  public void setInterm(@javax.annotation.Nullable InfoIntermediario interm) {
    this.interm = interm;
  }


  public InfDPS serv(@javax.annotation.Nonnull Serv serv) {
    this.serv = serv;
    return this;
  }

  /**
   * Get serv
   * @return serv
   */
  @javax.annotation.Nonnull
  public Serv getServ() {
    return serv;
  }

  public void setServ(@javax.annotation.Nonnull Serv serv) {
    this.serv = serv;
  }


  public InfDPS valores(@javax.annotation.Nonnull InfoValores valores) {
    this.valores = valores;
    return this;
  }

  /**
   * Get valores
   * @return valores
   */
  @javax.annotation.Nonnull
  public InfoValores getValores() {
    return valores;
  }

  public void setValores(@javax.annotation.Nonnull InfoValores valores) {
    this.valores = valores;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfDPS infDPS = (InfDPS) o;
    return Objects.equals(this.tpAmb, infDPS.tpAmb) &&
        Objects.equals(this.dhEmi, infDPS.dhEmi) &&
        Objects.equals(this.verAplic, infDPS.verAplic) &&
        Objects.equals(this.dCompet, infDPS.dCompet) &&
        Objects.equals(this.subst, infDPS.subst) &&
        Objects.equals(this.prest, infDPS.prest) &&
        Objects.equals(this.toma, infDPS.toma) &&
        Objects.equals(this.interm, infDPS.interm) &&
        Objects.equals(this.serv, infDPS.serv) &&
        Objects.equals(this.valores, infDPS.valores);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tpAmb, dhEmi, verAplic, dCompet, subst, prest, toma, interm, serv, valores);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfDPS {\n");
    sb.append("    tpAmb: ").append(toIndentedString(tpAmb)).append("\n");
    sb.append("    dhEmi: ").append(toIndentedString(dhEmi)).append("\n");
    sb.append("    verAplic: ").append(toIndentedString(verAplic)).append("\n");
    sb.append("    dCompet: ").append(toIndentedString(dCompet)).append("\n");
    sb.append("    subst: ").append(toIndentedString(subst)).append("\n");
    sb.append("    prest: ").append(toIndentedString(prest)).append("\n");
    sb.append("    toma: ").append(toIndentedString(toma)).append("\n");
    sb.append("    interm: ").append(toIndentedString(interm)).append("\n");
    sb.append("    serv: ").append(toIndentedString(serv)).append("\n");
    sb.append("    valores: ").append(toIndentedString(valores)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tpAmb");
    openapiFields.add("dhEmi");
    openapiFields.add("verAplic");
    openapiFields.add("dCompet");
    openapiFields.add("subst");
    openapiFields.add("prest");
    openapiFields.add("toma");
    openapiFields.add("interm");
    openapiFields.add("serv");
    openapiFields.add("valores");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dhEmi");
    openapiRequiredFields.add("prest");
    openapiRequiredFields.add("serv");
    openapiRequiredFields.add("valores");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InfDPS
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InfDPS.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InfDPS is not found in the empty JSON string", InfDPS.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InfDPS.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InfDPS` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InfDPS.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("verAplic") != null && !jsonObj.get("verAplic").isJsonNull()) && !jsonObj.get("verAplic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verAplic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verAplic").toString()));
      }
      // validate the optional field `subst`
      if (jsonObj.get("subst") != null && !jsonObj.get("subst").isJsonNull()) {
        Substituicao.validateJsonElement(jsonObj.get("subst"));
      }
      // validate the required field `prest`
      InfoPrestador.validateJsonElement(jsonObj.get("prest"));
      // validate the optional field `toma`
      if (jsonObj.get("toma") != null && !jsonObj.get("toma").isJsonNull()) {
        InfoTomador.validateJsonElement(jsonObj.get("toma"));
      }
      // validate the optional field `interm`
      if (jsonObj.get("interm") != null && !jsonObj.get("interm").isJsonNull()) {
        InfoIntermediario.validateJsonElement(jsonObj.get("interm"));
      }
      // validate the required field `serv`
      Serv.validateJsonElement(jsonObj.get("serv"));
      // validate the required field `valores`
      InfoValores.validateJsonElement(jsonObj.get("valores"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InfDPS.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InfDPS' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InfDPS> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InfDPS.class));

       return (TypeAdapter<T>) new TypeAdapter<InfDPS>() {
           @Override
           public void write(JsonWriter out, InfDPS value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InfDPS read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InfDPS given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InfDPS
   * @throws IOException if the JSON string is invalid with respect to InfDPS
   */
  public static InfDPS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InfDPS.class);
  }

  /**
   * Convert an instance of InfDPS to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

