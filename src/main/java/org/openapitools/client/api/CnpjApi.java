/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CnpjEmpresa;
import org.openapitools.client.model.CnpjListagem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CnpjApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CnpjApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CnpjApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for consultarCnpj
     * @param cnpj CNPJ sem máscara. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarCnpjCall(String cnpj, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cnpj/{Cnpj}"
            .replace("{" + "Cnpj" + "}", localVarApiClient.escapeString(cnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consultarCnpjValidateBeforeCall(String cnpj, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cnpj' is set
        if (cnpj == null) {
            throw new ApiException("Missing the required parameter 'cnpj' when calling consultarCnpj(Async)");
        }

        return consultarCnpjCall(cnpj, _callback);

    }

    /**
     * Consultar dados do CNPJ
     * **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#cnpj-consultas\&quot;&gt;cnpj-consultas&lt;/a&gt;  - Consumo: 1 unidade por requisição.
     * @param cnpj CNPJ sem máscara. (required)
     * @return CnpjEmpresa
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CnpjEmpresa consultarCnpj(String cnpj) throws ApiException {
        ApiResponse<CnpjEmpresa> localVarResp = consultarCnpjWithHttpInfo(cnpj);
        return localVarResp.getData();
    }

    /**
     * Consultar dados do CNPJ
     * **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#cnpj-consultas\&quot;&gt;cnpj-consultas&lt;/a&gt;  - Consumo: 1 unidade por requisição.
     * @param cnpj CNPJ sem máscara. (required)
     * @return ApiResponse&lt;CnpjEmpresa&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CnpjEmpresa> consultarCnpjWithHttpInfo(String cnpj) throws ApiException {
        okhttp3.Call localVarCall = consultarCnpjValidateBeforeCall(cnpj, null);
        Type localVarReturnType = new TypeToken<CnpjEmpresa>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Consultar dados do CNPJ (asynchronously)
     * **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#cnpj-consultas\&quot;&gt;cnpj-consultas&lt;/a&gt;  - Consumo: 1 unidade por requisição.
     * @param cnpj CNPJ sem máscara. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarCnpjAsync(String cnpj, final ApiCallback<CnpjEmpresa> _callback) throws ApiException {

        okhttp3.Call localVarCall = consultarCnpjValidateBeforeCall(cnpj, _callback);
        Type localVarReturnType = new TypeToken<CnpjEmpresa>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listarCnpj
     * @param cnaePrincipal Filtro pelo código CNAE da atividade principal do estabelecimento.  Utilize o valor sem máscara. (required)
     * @param municipio Filtro pelo código IBGE ou TOM (Tabela de Órgãos e Municípios) do município do estabelecimento.  Utilize o valor sem máscara. (required)
     * @param naturezaJuridica Filtro pela natureza jurídica do estabelecimento   Utilize o valor de quatro dígitos sem máscara. (required)
     * @param $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listarCnpjCall(String cnaePrincipal, String municipio, String naturezaJuridica, Integer $top, Integer $skip, Boolean $inlinecount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cnpj";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($inlinecount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$inlinecount", $inlinecount));
        }

        if (cnaePrincipal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cnae_principal", cnaePrincipal));
        }

        if (municipio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("municipio", municipio));
        }

        if (naturezaJuridica != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("natureza_juridica", naturezaJuridica));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listarCnpjValidateBeforeCall(String cnaePrincipal, String municipio, String naturezaJuridica, Integer $top, Integer $skip, Boolean $inlinecount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cnaePrincipal' is set
        if (cnaePrincipal == null) {
            throw new ApiException("Missing the required parameter 'cnaePrincipal' when calling listarCnpj(Async)");
        }

        // verify the required parameter 'municipio' is set
        if (municipio == null) {
            throw new ApiException("Missing the required parameter 'municipio' when calling listarCnpj(Async)");
        }

        // verify the required parameter 'naturezaJuridica' is set
        if (naturezaJuridica == null) {
            throw new ApiException("Missing the required parameter 'naturezaJuridica' when calling listarCnpj(Async)");
        }

        return listarCnpjCall(cnaePrincipal, municipio, naturezaJuridica, $top, $skip, $inlinecount, _callback);

    }

    /**
     * Listar estabelecimentos ativos a partir da base de CNPJ
     * Retorna uma lista de estabelecimentos de acordo com os critérios de busca utilizados.  Somente serão retornados estabelecimentos com situação cadastral \&quot;Ativa\&quot;.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#cnpj-listagem\&quot;&gt;cnpj-listagem&lt;/a&gt;  - Consumo: 1 unidade por estabelecimento listado ou requisição.
     * @param cnaePrincipal Filtro pelo código CNAE da atividade principal do estabelecimento.  Utilize o valor sem máscara. (required)
     * @param municipio Filtro pelo código IBGE ou TOM (Tabela de Órgãos e Municípios) do município do estabelecimento.  Utilize o valor sem máscara. (required)
     * @param naturezaJuridica Filtro pela natureza jurídica do estabelecimento   Utilize o valor de quatro dígitos sem máscara. (required)
     * @param $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @return CnpjListagem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CnpjListagem listarCnpj(String cnaePrincipal, String municipio, String naturezaJuridica, Integer $top, Integer $skip, Boolean $inlinecount) throws ApiException {
        ApiResponse<CnpjListagem> localVarResp = listarCnpjWithHttpInfo(cnaePrincipal, municipio, naturezaJuridica, $top, $skip, $inlinecount);
        return localVarResp.getData();
    }

    /**
     * Listar estabelecimentos ativos a partir da base de CNPJ
     * Retorna uma lista de estabelecimentos de acordo com os critérios de busca utilizados.  Somente serão retornados estabelecimentos com situação cadastral \&quot;Ativa\&quot;.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#cnpj-listagem\&quot;&gt;cnpj-listagem&lt;/a&gt;  - Consumo: 1 unidade por estabelecimento listado ou requisição.
     * @param cnaePrincipal Filtro pelo código CNAE da atividade principal do estabelecimento.  Utilize o valor sem máscara. (required)
     * @param municipio Filtro pelo código IBGE ou TOM (Tabela de Órgãos e Municípios) do município do estabelecimento.  Utilize o valor sem máscara. (required)
     * @param naturezaJuridica Filtro pela natureza jurídica do estabelecimento   Utilize o valor de quatro dígitos sem máscara. (required)
     * @param $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @return ApiResponse&lt;CnpjListagem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CnpjListagem> listarCnpjWithHttpInfo(String cnaePrincipal, String municipio, String naturezaJuridica, Integer $top, Integer $skip, Boolean $inlinecount) throws ApiException {
        okhttp3.Call localVarCall = listarCnpjValidateBeforeCall(cnaePrincipal, municipio, naturezaJuridica, $top, $skip, $inlinecount, null);
        Type localVarReturnType = new TypeToken<CnpjListagem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listar estabelecimentos ativos a partir da base de CNPJ (asynchronously)
     * Retorna uma lista de estabelecimentos de acordo com os critérios de busca utilizados.  Somente serão retornados estabelecimentos com situação cadastral \&quot;Ativa\&quot;.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#cnpj-listagem\&quot;&gt;cnpj-listagem&lt;/a&gt;  - Consumo: 1 unidade por estabelecimento listado ou requisição.
     * @param cnaePrincipal Filtro pelo código CNAE da atividade principal do estabelecimento.  Utilize o valor sem máscara. (required)
     * @param municipio Filtro pelo código IBGE ou TOM (Tabela de Órgãos e Municípios) do município do estabelecimento.  Utilize o valor sem máscara. (required)
     * @param naturezaJuridica Filtro pela natureza jurídica do estabelecimento   Utilize o valor de quatro dígitos sem máscara. (required)
     * @param $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listarCnpjAsync(String cnaePrincipal, String municipio, String naturezaJuridica, Integer $top, Integer $skip, Boolean $inlinecount, final ApiCallback<CnpjListagem> _callback) throws ApiException {

        okhttp3.Call localVarCall = listarCnpjValidateBeforeCall(cnaePrincipal, municipio, naturezaJuridica, $top, $skip, $inlinecount, _callback);
        Type localVarReturnType = new TypeToken<CnpjListagem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
