/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Grupo do Cupom Fiscal vinculado à NF-e.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazRefECF {
  public static final String SERIALIZED_NAME_MOD = "mod";
  @SerializedName(SERIALIZED_NAME_MOD)
  @javax.annotation.Nullable
  private String mod;

  public static final String SERIALIZED_NAME_N_E_C_F = "nECF";
  @SerializedName(SERIALIZED_NAME_N_E_C_F)
  @javax.annotation.Nullable
  private Integer nECF;

  public static final String SERIALIZED_NAME_N_C_O_O = "nCOO";
  @SerializedName(SERIALIZED_NAME_N_C_O_O)
  @javax.annotation.Nullable
  private Integer nCOO;

  public NfeSefazRefECF() {
  }

  public NfeSefazRefECF mod(@javax.annotation.Nullable String mod) {
    this.mod = mod;
    return this;
  }

  /**
   * Código do modelo do Documento Fiscal  Preencher com \&quot;2B\&quot;, quando se tratar de Cupom Fiscal emitido por máquina registradora (não ECF), com \&quot;2C\&quot;, quando se tratar de Cupom Fiscal PDV, ou \&quot;2D\&quot;, quando se tratar de Cupom Fiscal (emitido por ECF).
   * @return mod
   */
  @javax.annotation.Nullable
  public String getMod() {
    return mod;
  }

  public void setMod(@javax.annotation.Nullable String mod) {
    this.mod = mod;
  }


  public NfeSefazRefECF nECF(@javax.annotation.Nullable Integer nECF) {
    this.nECF = nECF;
    return this;
  }

  /**
   * Informar o número de ordem seqüencial do ECF que emitiu o Cupom Fiscal vinculado à NF-e.
   * minimum: 0
   * maximum: 999
   * @return nECF
   */
  @javax.annotation.Nullable
  public Integer getnECF() {
    return nECF;
  }

  public void setnECF(@javax.annotation.Nullable Integer nECF) {
    this.nECF = nECF;
  }


  public NfeSefazRefECF nCOO(@javax.annotation.Nullable Integer nCOO) {
    this.nCOO = nCOO;
    return this;
  }

  /**
   * Informar o Número do Contador de Ordem de Operação - COO vinculado à NF-e.
   * minimum: 0
   * maximum: 999999
   * @return nCOO
   */
  @javax.annotation.Nullable
  public Integer getnCOO() {
    return nCOO;
  }

  public void setnCOO(@javax.annotation.Nullable Integer nCOO) {
    this.nCOO = nCOO;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazRefECF nfeSefazRefECF = (NfeSefazRefECF) o;
    return Objects.equals(this.mod, nfeSefazRefECF.mod) &&
        Objects.equals(this.nECF, nfeSefazRefECF.nECF) &&
        Objects.equals(this.nCOO, nfeSefazRefECF.nCOO);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mod, nECF, nCOO);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazRefECF {\n");
    sb.append("    mod: ").append(toIndentedString(mod)).append("\n");
    sb.append("    nECF: ").append(toIndentedString(nECF)).append("\n");
    sb.append("    nCOO: ").append(toIndentedString(nCOO)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mod");
    openapiFields.add("nECF");
    openapiFields.add("nCOO");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mod");
    openapiRequiredFields.add("nECF");
    openapiRequiredFields.add("nCOO");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazRefECF
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazRefECF.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazRefECF is not found in the empty JSON string", NfeSefazRefECF.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazRefECF.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazRefECF` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfeSefazRefECF.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mod") != null && !jsonObj.get("mod").isJsonNull()) && !jsonObj.get("mod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazRefECF.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazRefECF' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazRefECF> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazRefECF.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazRefECF>() {
           @Override
           public void write(JsonWriter out, NfeSefazRefECF value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazRefECF read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazRefECF given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazRefECF
   * @throws IOException if the JSON string is invalid with respect to NfeSefazRefECF
   */
  public static NfeSefazRefECF fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazRefECF.class);
  }

  /**
   * Convert an instance of NfeSefazRefECF to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

