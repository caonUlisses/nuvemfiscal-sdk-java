/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CteSefazToma3;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CteSefazToma4;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Identificação do CT-e.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazIde {
  public static final String SERIALIZED_NAME_C_U_F = "cUF";
  @SerializedName(SERIALIZED_NAME_C_U_F)
  @javax.annotation.Nullable
  private Integer cUF;

  public static final String SERIALIZED_NAME_C_C_T = "cCT";
  @SerializedName(SERIALIZED_NAME_C_C_T)
  @javax.annotation.Nullable
  private String cCT;

  public static final String SERIALIZED_NAME_C_F_O_P = "CFOP";
  @SerializedName(SERIALIZED_NAME_C_F_O_P)
  @javax.annotation.Nullable
  private String CFOP;

  public static final String SERIALIZED_NAME_NAT_OP = "natOp";
  @SerializedName(SERIALIZED_NAME_NAT_OP)
  @javax.annotation.Nullable
  private String natOp;

  public static final String SERIALIZED_NAME_MOD = "mod";
  @SerializedName(SERIALIZED_NAME_MOD)
  @javax.annotation.Nullable
  private Integer mod;

  public static final String SERIALIZED_NAME_SERIE = "serie";
  @SerializedName(SERIALIZED_NAME_SERIE)
  @javax.annotation.Nullable
  private Integer serie;

  public static final String SERIALIZED_NAME_N_C_T = "nCT";
  @SerializedName(SERIALIZED_NAME_N_C_T)
  @javax.annotation.Nullable
  private Integer nCT;

  public static final String SERIALIZED_NAME_DH_EMI = "dhEmi";
  @SerializedName(SERIALIZED_NAME_DH_EMI)
  @javax.annotation.Nullable
  private OffsetDateTime dhEmi;

  public static final String SERIALIZED_NAME_TP_IMP = "tpImp";
  @SerializedName(SERIALIZED_NAME_TP_IMP)
  @javax.annotation.Nullable
  private Integer tpImp;

  public static final String SERIALIZED_NAME_TP_EMIS = "tpEmis";
  @SerializedName(SERIALIZED_NAME_TP_EMIS)
  @javax.annotation.Nullable
  private Integer tpEmis;

  public static final String SERIALIZED_NAME_C_D_V = "cDV";
  @SerializedName(SERIALIZED_NAME_C_D_V)
  @javax.annotation.Nullable
  private Integer cDV;

  public static final String SERIALIZED_NAME_TP_AMB = "tpAmb";
  @SerializedName(SERIALIZED_NAME_TP_AMB)
  @javax.annotation.Nullable
  private Integer tpAmb;

  public static final String SERIALIZED_NAME_TP_C_TE = "tpCTe";
  @SerializedName(SERIALIZED_NAME_TP_C_TE)
  @javax.annotation.Nullable
  private Integer tpCTe;

  public static final String SERIALIZED_NAME_PROC_EMI = "procEmi";
  @SerializedName(SERIALIZED_NAME_PROC_EMI)
  @javax.annotation.Nullable
  private Integer procEmi;

  public static final String SERIALIZED_NAME_VER_PROC = "verProc";
  @SerializedName(SERIALIZED_NAME_VER_PROC)
  @javax.annotation.Nullable
  private String verProc;

  public static final String SERIALIZED_NAME_IND_GLOBALIZADO = "indGlobalizado";
  @SerializedName(SERIALIZED_NAME_IND_GLOBALIZADO)
  @javax.annotation.Nullable
  private Integer indGlobalizado;

  public static final String SERIALIZED_NAME_C_MUN_ENV = "cMunEnv";
  @SerializedName(SERIALIZED_NAME_C_MUN_ENV)
  @javax.annotation.Nullable
  private String cMunEnv;

  public static final String SERIALIZED_NAME_X_MUN_ENV = "xMunEnv";
  @SerializedName(SERIALIZED_NAME_X_MUN_ENV)
  @javax.annotation.Nullable
  private String xMunEnv;

  public static final String SERIALIZED_NAME_UF_ENV = "UFEnv";
  @SerializedName(SERIALIZED_NAME_UF_ENV)
  @javax.annotation.Nullable
  private String ufEnv;

  public static final String SERIALIZED_NAME_MODAL = "modal";
  @SerializedName(SERIALIZED_NAME_MODAL)
  @javax.annotation.Nullable
  private String modal;

  public static final String SERIALIZED_NAME_TP_SERV = "tpServ";
  @SerializedName(SERIALIZED_NAME_TP_SERV)
  @javax.annotation.Nullable
  private Integer tpServ;

  public static final String SERIALIZED_NAME_C_MUN_INI = "cMunIni";
  @SerializedName(SERIALIZED_NAME_C_MUN_INI)
  @javax.annotation.Nullable
  private String cMunIni;

  public static final String SERIALIZED_NAME_X_MUN_INI = "xMunIni";
  @SerializedName(SERIALIZED_NAME_X_MUN_INI)
  @javax.annotation.Nullable
  private String xMunIni;

  public static final String SERIALIZED_NAME_UF_INI = "UFIni";
  @SerializedName(SERIALIZED_NAME_UF_INI)
  @javax.annotation.Nullable
  private String ufIni;

  public static final String SERIALIZED_NAME_C_MUN_FIM = "cMunFim";
  @SerializedName(SERIALIZED_NAME_C_MUN_FIM)
  @javax.annotation.Nullable
  private String cMunFim;

  public static final String SERIALIZED_NAME_X_MUN_FIM = "xMunFim";
  @SerializedName(SERIALIZED_NAME_X_MUN_FIM)
  @javax.annotation.Nullable
  private String xMunFim;

  public static final String SERIALIZED_NAME_UF_FIM = "UFFim";
  @SerializedName(SERIALIZED_NAME_UF_FIM)
  @javax.annotation.Nullable
  private String ufFim;

  public static final String SERIALIZED_NAME_RETIRA = "retira";
  @SerializedName(SERIALIZED_NAME_RETIRA)
  @javax.annotation.Nullable
  private Integer retira;

  public static final String SERIALIZED_NAME_X_DET_RETIRA = "xDetRetira";
  @SerializedName(SERIALIZED_NAME_X_DET_RETIRA)
  @javax.annotation.Nullable
  private String xDetRetira;

  public static final String SERIALIZED_NAME_IND_I_E_TOMA = "indIEToma";
  @SerializedName(SERIALIZED_NAME_IND_I_E_TOMA)
  @javax.annotation.Nullable
  private Integer indIEToma;

  public static final String SERIALIZED_NAME_TOMA3 = "toma3";
  @SerializedName(SERIALIZED_NAME_TOMA3)
  @javax.annotation.Nullable
  private CteSefazToma3 toma3;

  public static final String SERIALIZED_NAME_TOMA4 = "toma4";
  @SerializedName(SERIALIZED_NAME_TOMA4)
  @javax.annotation.Nullable
  private CteSefazToma4 toma4;

  public static final String SERIALIZED_NAME_DH_CONT = "dhCont";
  @SerializedName(SERIALIZED_NAME_DH_CONT)
  @javax.annotation.Nullable
  private OffsetDateTime dhCont;

  public static final String SERIALIZED_NAME_X_JUST = "xJust";
  @SerializedName(SERIALIZED_NAME_X_JUST)
  @javax.annotation.Nullable
  private String xJust;

  public CteSefazIde() {
  }

  public CteSefazIde cUF(@javax.annotation.Nullable Integer cUF) {
    this.cUF = cUF;
    return this;
  }

  /**
   * Código da UF do emitente do CT-e.  Utilizar a Tabela do IBGE.
   * @return cUF
   */
  @javax.annotation.Nullable
  public Integer getcUF() {
    return cUF;
  }

  public void setcUF(@javax.annotation.Nullable Integer cUF) {
    this.cUF = cUF;
  }


  public CteSefazIde cCT(@javax.annotation.Nullable String cCT) {
    this.cCT = cCT;
    return this;
  }

  /**
   * Código numérico que compõe a Chave de Acesso.  Número aleatório gerado pelo emitente para cada CT-e, com o objetivo de evitar acessos indevidos ao documento.    *Geramos automaticamente quando nenhum valor é informado.*
   * @return cCT
   */
  @javax.annotation.Nullable
  public String getcCT() {
    return cCT;
  }

  public void setcCT(@javax.annotation.Nullable String cCT) {
    this.cCT = cCT;
  }


  public CteSefazIde CFOP(@javax.annotation.Nullable String CFOP) {
    this.CFOP = CFOP;
    return this;
  }

  /**
   * Código Fiscal de Operações e Prestações.
   * @return CFOP
   */
  @javax.annotation.Nullable
  public String getCFOP() {
    return CFOP;
  }

  public void setCFOP(@javax.annotation.Nullable String CFOP) {
    this.CFOP = CFOP;
  }


  public CteSefazIde natOp(@javax.annotation.Nullable String natOp) {
    this.natOp = natOp;
    return this;
  }

  /**
   * Natureza da Operação.
   * @return natOp
   */
  @javax.annotation.Nullable
  public String getNatOp() {
    return natOp;
  }

  public void setNatOp(@javax.annotation.Nullable String natOp) {
    this.natOp = natOp;
  }


  public CteSefazIde mod(@javax.annotation.Nullable Integer mod) {
    this.mod = mod;
    return this;
  }

  /**
   * Modelo do documento fiscal.  Utilizar o código 57 para identificação do CT-e, emitido em substituição aos modelos de conhecimentos em papel.
   * @return mod
   */
  @javax.annotation.Nullable
  public Integer getMod() {
    return mod;
  }

  public void setMod(@javax.annotation.Nullable Integer mod) {
    this.mod = mod;
  }


  public CteSefazIde serie(@javax.annotation.Nullable Integer serie) {
    this.serie = serie;
    return this;
  }

  /**
   * Série do CT-e.  Preencher com \&quot;0\&quot; no caso de série única.
   * minimum: 0
   * maximum: 999
   * @return serie
   */
  @javax.annotation.Nullable
  public Integer getSerie() {
    return serie;
  }

  public void setSerie(@javax.annotation.Nullable Integer serie) {
    this.serie = serie;
  }


  public CteSefazIde nCT(@javax.annotation.Nullable Integer nCT) {
    this.nCT = nCT;
    return this;
  }

  /**
   * Número do CT-e.
   * minimum: 1
   * maximum: 999999999
   * @return nCT
   */
  @javax.annotation.Nullable
  public Integer getnCT() {
    return nCT;
  }

  public void setnCT(@javax.annotation.Nullable Integer nCT) {
    this.nCT = nCT;
  }


  public CteSefazIde dhEmi(@javax.annotation.Nullable OffsetDateTime dhEmi) {
    this.dhEmi = dhEmi;
    return this;
  }

  /**
   * Data e hora de emissão do CT-e.  Formato AAAA-MM-DDTHH:MM:DD TZD.
   * @return dhEmi
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDhEmi() {
    return dhEmi;
  }

  public void setDhEmi(@javax.annotation.Nullable OffsetDateTime dhEmi) {
    this.dhEmi = dhEmi;
  }


  public CteSefazIde tpImp(@javax.annotation.Nullable Integer tpImp) {
    this.tpImp = tpImp;
    return this;
  }

  /**
   * Formato de impressão do DACTE:  * 1 - Retrato  * 2 - Paisagem
   * @return tpImp
   */
  @javax.annotation.Nullable
  public Integer getTpImp() {
    return tpImp;
  }

  public void setTpImp(@javax.annotation.Nullable Integer tpImp) {
    this.tpImp = tpImp;
  }


  public CteSefazIde tpEmis(@javax.annotation.Nullable Integer tpEmis) {
    this.tpEmis = tpEmis;
    return this;
  }

  /**
   * Forma de emissão do CT-e.  Preencher com:  * 1 - Normal  * 3 - Regime Especial NFF  * 4 - EPEC pela SVC  * 5 - Contingência FSDA  * 7 - Autorização pela SVC-RS  * 8 - Autorização pela SVC-SP
   * @return tpEmis
   */
  @javax.annotation.Nullable
  public Integer getTpEmis() {
    return tpEmis;
  }

  public void setTpEmis(@javax.annotation.Nullable Integer tpEmis) {
    this.tpEmis = tpEmis;
  }


  public CteSefazIde cDV(@javax.annotation.Nullable Integer cDV) {
    this.cDV = cDV;
    return this;
  }

  /**
   * Digito Verificador da chave de acesso do CT-e.  Informar o dígito  de controle da chave de acesso do CT-e, que deve ser calculado com a aplicação do algoritmo módulo 11 (base 2,9) da chave de acesso.    *Geramos automaticamente quando nenhum valor é informado.*
   * minimum: 0
   * maximum: 9
   * @return cDV
   */
  @javax.annotation.Nullable
  public Integer getcDV() {
    return cDV;
  }

  public void setcDV(@javax.annotation.Nullable Integer cDV) {
    this.cDV = cDV;
  }


  public CteSefazIde tpAmb(@javax.annotation.Nullable Integer tpAmb) {
    this.tpAmb = tpAmb;
    return this;
  }

  /**
   * Tipo do Ambiente:  * 1 - Produção  * 2 - Homologação
   * @return tpAmb
   */
  @javax.annotation.Nullable
  public Integer getTpAmb() {
    return tpAmb;
  }

  public void setTpAmb(@javax.annotation.Nullable Integer tpAmb) {
    this.tpAmb = tpAmb;
  }


  public CteSefazIde tpCTe(@javax.annotation.Nullable Integer tpCTe) {
    this.tpCTe = tpCTe;
    return this;
  }

  /**
   * Tipo do CT-e.  Preencher com:  * 0 - CT-e Normal  * 1 - CT-e de Complemento de Valores  * 3 - CT-e de Substituição
   * @return tpCTe
   */
  @javax.annotation.Nullable
  public Integer getTpCTe() {
    return tpCTe;
  }

  public void setTpCTe(@javax.annotation.Nullable Integer tpCTe) {
    this.tpCTe = tpCTe;
  }


  public CteSefazIde procEmi(@javax.annotation.Nullable Integer procEmi) {
    this.procEmi = procEmi;
    return this;
  }

  /**
   * Identificador do processo de emissão do CT-e.  Preencher com:  * 0 - emissão de CT-e com aplicativo do contribuinte  * 3 - emissão CT-e pelo contribuinte com aplicativo fornecido pelo SEBRAE
   * @return procEmi
   */
  @javax.annotation.Nullable
  public Integer getProcEmi() {
    return procEmi;
  }

  public void setProcEmi(@javax.annotation.Nullable Integer procEmi) {
    this.procEmi = procEmi;
  }


  public CteSefazIde verProc(@javax.annotation.Nullable String verProc) {
    this.verProc = verProc;
    return this;
  }

  /**
   * Versão do processo de emissão.  Iinformar a versão do aplicativo emissor de CT-e.
   * @return verProc
   */
  @javax.annotation.Nullable
  public String getVerProc() {
    return verProc;
  }

  public void setVerProc(@javax.annotation.Nullable String verProc) {
    this.verProc = verProc;
  }


  public CteSefazIde indGlobalizado(@javax.annotation.Nullable Integer indGlobalizado) {
    this.indGlobalizado = indGlobalizado;
    return this;
  }

  /**
   * Indicador de CT-e Globalizado.  Informar valor 1 quando for Globalizado e não informar a tag quando não tratar de CT-e Globalizado.
   * @return indGlobalizado
   */
  @javax.annotation.Nullable
  public Integer getIndGlobalizado() {
    return indGlobalizado;
  }

  public void setIndGlobalizado(@javax.annotation.Nullable Integer indGlobalizado) {
    this.indGlobalizado = indGlobalizado;
  }


  public CteSefazIde cMunEnv(@javax.annotation.Nullable String cMunEnv) {
    this.cMunEnv = cMunEnv;
    return this;
  }

  /**
   * Código do Município de envio do CT-e (de onde o documento foi transmitido).  Utilizar a tabela do IBGE. Informar 9999999 para as operações com o exterior.
   * @return cMunEnv
   */
  @javax.annotation.Nullable
  public String getcMunEnv() {
    return cMunEnv;
  }

  public void setcMunEnv(@javax.annotation.Nullable String cMunEnv) {
    this.cMunEnv = cMunEnv;
  }


  public CteSefazIde xMunEnv(@javax.annotation.Nullable String xMunEnv) {
    this.xMunEnv = xMunEnv;
    return this;
  }

  /**
   * Nome do Município de envio do CT-e (de onde o documento foi transmitido).  Informar PAIS/Municipio para as operações com o exterior.
   * @return xMunEnv
   */
  @javax.annotation.Nullable
  public String getxMunEnv() {
    return xMunEnv;
  }

  public void setxMunEnv(@javax.annotation.Nullable String xMunEnv) {
    this.xMunEnv = xMunEnv;
  }


  public CteSefazIde ufEnv(@javax.annotation.Nullable String ufEnv) {
    this.ufEnv = ufEnv;
    return this;
  }

  /**
   * Sigla da UF de envio do CT-e (de onde o documento foi transmitido).  Informar &#39;EX&#39; para operações com o exterior.
   * @return ufEnv
   */
  @javax.annotation.Nullable
  public String getUfEnv() {
    return ufEnv;
  }

  public void setUfEnv(@javax.annotation.Nullable String ufEnv) {
    this.ufEnv = ufEnv;
  }


  public CteSefazIde modal(@javax.annotation.Nullable String modal) {
    this.modal = modal;
    return this;
  }

  /**
   * Modal. Preencher com:  * 01 - Rodoviário  * 02 - Aéreo  * 03 - Aquaviário  * 04 - Ferroviário  * 05 - Dutoviário  * 06 - Multimodal
   * @return modal
   */
  @javax.annotation.Nullable
  public String getModal() {
    return modal;
  }

  public void setModal(@javax.annotation.Nullable String modal) {
    this.modal = modal;
  }


  public CteSefazIde tpServ(@javax.annotation.Nullable Integer tpServ) {
    this.tpServ = tpServ;
    return this;
  }

  /**
   * Tipo do Serviço.  Preencher com:  * 0 - Normal  * 1 - Subcontratação  * 2 - Redespacho  * 3 - Redespacho Intermediário  * 4 - Serviço Vinculado a Multimodal
   * @return tpServ
   */
  @javax.annotation.Nullable
  public Integer getTpServ() {
    return tpServ;
  }

  public void setTpServ(@javax.annotation.Nullable Integer tpServ) {
    this.tpServ = tpServ;
  }


  public CteSefazIde cMunIni(@javax.annotation.Nullable String cMunIni) {
    this.cMunIni = cMunIni;
    return this;
  }

  /**
   * Código do Município de início da prestação.  Utilizar a tabela do IBGE. Informar 9999999 para operações com o exterior.
   * @return cMunIni
   */
  @javax.annotation.Nullable
  public String getcMunIni() {
    return cMunIni;
  }

  public void setcMunIni(@javax.annotation.Nullable String cMunIni) {
    this.cMunIni = cMunIni;
  }


  public CteSefazIde xMunIni(@javax.annotation.Nullable String xMunIni) {
    this.xMunIni = xMunIni;
    return this;
  }

  /**
   * Nome do Município do início da prestação.  Informar &#39;EXTERIOR&#39; para operações com o exterior.
   * @return xMunIni
   */
  @javax.annotation.Nullable
  public String getxMunIni() {
    return xMunIni;
  }

  public void setxMunIni(@javax.annotation.Nullable String xMunIni) {
    this.xMunIni = xMunIni;
  }


  public CteSefazIde ufIni(@javax.annotation.Nullable String ufIni) {
    this.ufIni = ufIni;
    return this;
  }

  /**
   * UF do início da prestação.  Informar &#39;EX&#39; para operações com o exterior.
   * @return ufIni
   */
  @javax.annotation.Nullable
  public String getUfIni() {
    return ufIni;
  }

  public void setUfIni(@javax.annotation.Nullable String ufIni) {
    this.ufIni = ufIni;
  }


  public CteSefazIde cMunFim(@javax.annotation.Nullable String cMunFim) {
    this.cMunFim = cMunFim;
    return this;
  }

  /**
   * Código do Município de término da prestação.  Utilizar a tabela do IBGE. Informar 9999999 para operações com o exterior.
   * @return cMunFim
   */
  @javax.annotation.Nullable
  public String getcMunFim() {
    return cMunFim;
  }

  public void setcMunFim(@javax.annotation.Nullable String cMunFim) {
    this.cMunFim = cMunFim;
  }


  public CteSefazIde xMunFim(@javax.annotation.Nullable String xMunFim) {
    this.xMunFim = xMunFim;
    return this;
  }

  /**
   * Nome do Município do término da prestação.  Informar &#39;EXTERIOR&#39; para operações com o exterior.
   * @return xMunFim
   */
  @javax.annotation.Nullable
  public String getxMunFim() {
    return xMunFim;
  }

  public void setxMunFim(@javax.annotation.Nullable String xMunFim) {
    this.xMunFim = xMunFim;
  }


  public CteSefazIde ufFim(@javax.annotation.Nullable String ufFim) {
    this.ufFim = ufFim;
    return this;
  }

  /**
   * UF do término da prestação.  Informar &#39;EX&#39; para operações com o exterior.
   * @return ufFim
   */
  @javax.annotation.Nullable
  public String getUfFim() {
    return ufFim;
  }

  public void setUfFim(@javax.annotation.Nullable String ufFim) {
    this.ufFim = ufFim;
  }


  public CteSefazIde retira(@javax.annotation.Nullable Integer retira) {
    this.retira = retira;
    return this;
  }

  /**
   * Indicador se o Recebedor retira no Aeroporto, Filial, Porto ou Estação de Destino? Preencher com:  * 0 - Sim  * 1 - Não
   * @return retira
   */
  @javax.annotation.Nullable
  public Integer getRetira() {
    return retira;
  }

  public void setRetira(@javax.annotation.Nullable Integer retira) {
    this.retira = retira;
  }


  public CteSefazIde xDetRetira(@javax.annotation.Nullable String xDetRetira) {
    this.xDetRetira = xDetRetira;
    return this;
  }

  /**
   * Detalhes do retira.
   * @return xDetRetira
   */
  @javax.annotation.Nullable
  public String getxDetRetira() {
    return xDetRetira;
  }

  public void setxDetRetira(@javax.annotation.Nullable String xDetRetira) {
    this.xDetRetira = xDetRetira;
  }


  public CteSefazIde indIEToma(@javax.annotation.Nullable Integer indIEToma) {
    this.indIEToma = indIEToma;
    return this;
  }

  /**
   * Indicador do papel do tomador na prestação do serviço:  * 1 - Contribuinte ICMS  * 2 - Contribuinte isento de inscrição  * 9 - Não Contribuinte  Aplica-se ao tomador que for indicado no toma3 ou toma4.
   * @return indIEToma
   */
  @javax.annotation.Nullable
  public Integer getIndIEToma() {
    return indIEToma;
  }

  public void setIndIEToma(@javax.annotation.Nullable Integer indIEToma) {
    this.indIEToma = indIEToma;
  }


  public CteSefazIde toma3(@javax.annotation.Nullable CteSefazToma3 toma3) {
    this.toma3 = toma3;
    return this;
  }

  /**
   * Get toma3
   * @return toma3
   */
  @javax.annotation.Nullable
  public CteSefazToma3 getToma3() {
    return toma3;
  }

  public void setToma3(@javax.annotation.Nullable CteSefazToma3 toma3) {
    this.toma3 = toma3;
  }


  public CteSefazIde toma4(@javax.annotation.Nullable CteSefazToma4 toma4) {
    this.toma4 = toma4;
    return this;
  }

  /**
   * Get toma4
   * @return toma4
   */
  @javax.annotation.Nullable
  public CteSefazToma4 getToma4() {
    return toma4;
  }

  public void setToma4(@javax.annotation.Nullable CteSefazToma4 toma4) {
    this.toma4 = toma4;
  }


  public CteSefazIde dhCont(@javax.annotation.Nullable OffsetDateTime dhCont) {
    this.dhCont = dhCont;
    return this;
  }

  /**
   * Data e Hora da entrada em contingência.  Informar a data e hora no formato AAAA-MM-DDTHH:MM:SS.
   * @return dhCont
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDhCont() {
    return dhCont;
  }

  public void setDhCont(@javax.annotation.Nullable OffsetDateTime dhCont) {
    this.dhCont = dhCont;
  }


  public CteSefazIde xJust(@javax.annotation.Nullable String xJust) {
    this.xJust = xJust;
    return this;
  }

  /**
   * Justificativa da entrada em contingência.
   * @return xJust
   */
  @javax.annotation.Nullable
  public String getxJust() {
    return xJust;
  }

  public void setxJust(@javax.annotation.Nullable String xJust) {
    this.xJust = xJust;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazIde cteSefazIde = (CteSefazIde) o;
    return Objects.equals(this.cUF, cteSefazIde.cUF) &&
        Objects.equals(this.cCT, cteSefazIde.cCT) &&
        Objects.equals(this.CFOP, cteSefazIde.CFOP) &&
        Objects.equals(this.natOp, cteSefazIde.natOp) &&
        Objects.equals(this.mod, cteSefazIde.mod) &&
        Objects.equals(this.serie, cteSefazIde.serie) &&
        Objects.equals(this.nCT, cteSefazIde.nCT) &&
        Objects.equals(this.dhEmi, cteSefazIde.dhEmi) &&
        Objects.equals(this.tpImp, cteSefazIde.tpImp) &&
        Objects.equals(this.tpEmis, cteSefazIde.tpEmis) &&
        Objects.equals(this.cDV, cteSefazIde.cDV) &&
        Objects.equals(this.tpAmb, cteSefazIde.tpAmb) &&
        Objects.equals(this.tpCTe, cteSefazIde.tpCTe) &&
        Objects.equals(this.procEmi, cteSefazIde.procEmi) &&
        Objects.equals(this.verProc, cteSefazIde.verProc) &&
        Objects.equals(this.indGlobalizado, cteSefazIde.indGlobalizado) &&
        Objects.equals(this.cMunEnv, cteSefazIde.cMunEnv) &&
        Objects.equals(this.xMunEnv, cteSefazIde.xMunEnv) &&
        Objects.equals(this.ufEnv, cteSefazIde.ufEnv) &&
        Objects.equals(this.modal, cteSefazIde.modal) &&
        Objects.equals(this.tpServ, cteSefazIde.tpServ) &&
        Objects.equals(this.cMunIni, cteSefazIde.cMunIni) &&
        Objects.equals(this.xMunIni, cteSefazIde.xMunIni) &&
        Objects.equals(this.ufIni, cteSefazIde.ufIni) &&
        Objects.equals(this.cMunFim, cteSefazIde.cMunFim) &&
        Objects.equals(this.xMunFim, cteSefazIde.xMunFim) &&
        Objects.equals(this.ufFim, cteSefazIde.ufFim) &&
        Objects.equals(this.retira, cteSefazIde.retira) &&
        Objects.equals(this.xDetRetira, cteSefazIde.xDetRetira) &&
        Objects.equals(this.indIEToma, cteSefazIde.indIEToma) &&
        Objects.equals(this.toma3, cteSefazIde.toma3) &&
        Objects.equals(this.toma4, cteSefazIde.toma4) &&
        Objects.equals(this.dhCont, cteSefazIde.dhCont) &&
        Objects.equals(this.xJust, cteSefazIde.xJust);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cUF, cCT, CFOP, natOp, mod, serie, nCT, dhEmi, tpImp, tpEmis, cDV, tpAmb, tpCTe, procEmi, verProc, indGlobalizado, cMunEnv, xMunEnv, ufEnv, modal, tpServ, cMunIni, xMunIni, ufIni, cMunFim, xMunFim, ufFim, retira, xDetRetira, indIEToma, toma3, toma4, dhCont, xJust);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazIde {\n");
    sb.append("    cUF: ").append(toIndentedString(cUF)).append("\n");
    sb.append("    cCT: ").append(toIndentedString(cCT)).append("\n");
    sb.append("    CFOP: ").append(toIndentedString(CFOP)).append("\n");
    sb.append("    natOp: ").append(toIndentedString(natOp)).append("\n");
    sb.append("    mod: ").append(toIndentedString(mod)).append("\n");
    sb.append("    serie: ").append(toIndentedString(serie)).append("\n");
    sb.append("    nCT: ").append(toIndentedString(nCT)).append("\n");
    sb.append("    dhEmi: ").append(toIndentedString(dhEmi)).append("\n");
    sb.append("    tpImp: ").append(toIndentedString(tpImp)).append("\n");
    sb.append("    tpEmis: ").append(toIndentedString(tpEmis)).append("\n");
    sb.append("    cDV: ").append(toIndentedString(cDV)).append("\n");
    sb.append("    tpAmb: ").append(toIndentedString(tpAmb)).append("\n");
    sb.append("    tpCTe: ").append(toIndentedString(tpCTe)).append("\n");
    sb.append("    procEmi: ").append(toIndentedString(procEmi)).append("\n");
    sb.append("    verProc: ").append(toIndentedString(verProc)).append("\n");
    sb.append("    indGlobalizado: ").append(toIndentedString(indGlobalizado)).append("\n");
    sb.append("    cMunEnv: ").append(toIndentedString(cMunEnv)).append("\n");
    sb.append("    xMunEnv: ").append(toIndentedString(xMunEnv)).append("\n");
    sb.append("    ufEnv: ").append(toIndentedString(ufEnv)).append("\n");
    sb.append("    modal: ").append(toIndentedString(modal)).append("\n");
    sb.append("    tpServ: ").append(toIndentedString(tpServ)).append("\n");
    sb.append("    cMunIni: ").append(toIndentedString(cMunIni)).append("\n");
    sb.append("    xMunIni: ").append(toIndentedString(xMunIni)).append("\n");
    sb.append("    ufIni: ").append(toIndentedString(ufIni)).append("\n");
    sb.append("    cMunFim: ").append(toIndentedString(cMunFim)).append("\n");
    sb.append("    xMunFim: ").append(toIndentedString(xMunFim)).append("\n");
    sb.append("    ufFim: ").append(toIndentedString(ufFim)).append("\n");
    sb.append("    retira: ").append(toIndentedString(retira)).append("\n");
    sb.append("    xDetRetira: ").append(toIndentedString(xDetRetira)).append("\n");
    sb.append("    indIEToma: ").append(toIndentedString(indIEToma)).append("\n");
    sb.append("    toma3: ").append(toIndentedString(toma3)).append("\n");
    sb.append("    toma4: ").append(toIndentedString(toma4)).append("\n");
    sb.append("    dhCont: ").append(toIndentedString(dhCont)).append("\n");
    sb.append("    xJust: ").append(toIndentedString(xJust)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cUF");
    openapiFields.add("cCT");
    openapiFields.add("CFOP");
    openapiFields.add("natOp");
    openapiFields.add("mod");
    openapiFields.add("serie");
    openapiFields.add("nCT");
    openapiFields.add("dhEmi");
    openapiFields.add("tpImp");
    openapiFields.add("tpEmis");
    openapiFields.add("cDV");
    openapiFields.add("tpAmb");
    openapiFields.add("tpCTe");
    openapiFields.add("procEmi");
    openapiFields.add("verProc");
    openapiFields.add("indGlobalizado");
    openapiFields.add("cMunEnv");
    openapiFields.add("xMunEnv");
    openapiFields.add("UFEnv");
    openapiFields.add("modal");
    openapiFields.add("tpServ");
    openapiFields.add("cMunIni");
    openapiFields.add("xMunIni");
    openapiFields.add("UFIni");
    openapiFields.add("cMunFim");
    openapiFields.add("xMunFim");
    openapiFields.add("UFFim");
    openapiFields.add("retira");
    openapiFields.add("xDetRetira");
    openapiFields.add("indIEToma");
    openapiFields.add("toma3");
    openapiFields.add("toma4");
    openapiFields.add("dhCont");
    openapiFields.add("xJust");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cUF");
    openapiRequiredFields.add("CFOP");
    openapiRequiredFields.add("natOp");
    openapiRequiredFields.add("serie");
    openapiRequiredFields.add("nCT");
    openapiRequiredFields.add("dhEmi");
    openapiRequiredFields.add("tpImp");
    openapiRequiredFields.add("tpEmis");
    openapiRequiredFields.add("tpCTe");
    openapiRequiredFields.add("procEmi");
    openapiRequiredFields.add("verProc");
    openapiRequiredFields.add("cMunEnv");
    openapiRequiredFields.add("xMunEnv");
    openapiRequiredFields.add("UFEnv");
    openapiRequiredFields.add("modal");
    openapiRequiredFields.add("tpServ");
    openapiRequiredFields.add("cMunIni");
    openapiRequiredFields.add("xMunIni");
    openapiRequiredFields.add("UFIni");
    openapiRequiredFields.add("cMunFim");
    openapiRequiredFields.add("xMunFim");
    openapiRequiredFields.add("UFFim");
    openapiRequiredFields.add("retira");
    openapiRequiredFields.add("indIEToma");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazIde
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazIde.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazIde is not found in the empty JSON string", CteSefazIde.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazIde.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazIde` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CteSefazIde.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cCT") != null && !jsonObj.get("cCT").isJsonNull()) && !jsonObj.get("cCT").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cCT` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cCT").toString()));
      }
      if ((jsonObj.get("CFOP") != null && !jsonObj.get("CFOP").isJsonNull()) && !jsonObj.get("CFOP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CFOP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CFOP").toString()));
      }
      if ((jsonObj.get("natOp") != null && !jsonObj.get("natOp").isJsonNull()) && !jsonObj.get("natOp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `natOp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("natOp").toString()));
      }
      if ((jsonObj.get("verProc") != null && !jsonObj.get("verProc").isJsonNull()) && !jsonObj.get("verProc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verProc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verProc").toString()));
      }
      if ((jsonObj.get("cMunEnv") != null && !jsonObj.get("cMunEnv").isJsonNull()) && !jsonObj.get("cMunEnv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cMunEnv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cMunEnv").toString()));
      }
      if ((jsonObj.get("xMunEnv") != null && !jsonObj.get("xMunEnv").isJsonNull()) && !jsonObj.get("xMunEnv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xMunEnv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xMunEnv").toString()));
      }
      if ((jsonObj.get("UFEnv") != null && !jsonObj.get("UFEnv").isJsonNull()) && !jsonObj.get("UFEnv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UFEnv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UFEnv").toString()));
      }
      if ((jsonObj.get("modal") != null && !jsonObj.get("modal").isJsonNull()) && !jsonObj.get("modal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modal").toString()));
      }
      if ((jsonObj.get("cMunIni") != null && !jsonObj.get("cMunIni").isJsonNull()) && !jsonObj.get("cMunIni").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cMunIni` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cMunIni").toString()));
      }
      if ((jsonObj.get("xMunIni") != null && !jsonObj.get("xMunIni").isJsonNull()) && !jsonObj.get("xMunIni").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xMunIni` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xMunIni").toString()));
      }
      if ((jsonObj.get("UFIni") != null && !jsonObj.get("UFIni").isJsonNull()) && !jsonObj.get("UFIni").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UFIni` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UFIni").toString()));
      }
      if ((jsonObj.get("cMunFim") != null && !jsonObj.get("cMunFim").isJsonNull()) && !jsonObj.get("cMunFim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cMunFim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cMunFim").toString()));
      }
      if ((jsonObj.get("xMunFim") != null && !jsonObj.get("xMunFim").isJsonNull()) && !jsonObj.get("xMunFim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xMunFim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xMunFim").toString()));
      }
      if ((jsonObj.get("UFFim") != null && !jsonObj.get("UFFim").isJsonNull()) && !jsonObj.get("UFFim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UFFim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UFFim").toString()));
      }
      if ((jsonObj.get("xDetRetira") != null && !jsonObj.get("xDetRetira").isJsonNull()) && !jsonObj.get("xDetRetira").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xDetRetira` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xDetRetira").toString()));
      }
      // validate the optional field `toma3`
      if (jsonObj.get("toma3") != null && !jsonObj.get("toma3").isJsonNull()) {
        CteSefazToma3.validateJsonElement(jsonObj.get("toma3"));
      }
      // validate the optional field `toma4`
      if (jsonObj.get("toma4") != null && !jsonObj.get("toma4").isJsonNull()) {
        CteSefazToma4.validateJsonElement(jsonObj.get("toma4"));
      }
      if ((jsonObj.get("xJust") != null && !jsonObj.get("xJust").isJsonNull()) && !jsonObj.get("xJust").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xJust` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xJust").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazIde.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazIde' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazIde> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazIde.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazIde>() {
           @Override
           public void write(JsonWriter out, CteSefazIde value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazIde read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazIde given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazIde
   * @throws IOException if the JSON string is invalid with respect to CteSefazIde
   */
  public static CteSefazIde fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazIde.class);
  }

  /**
   * Convert an instance of CteSefazIde to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

