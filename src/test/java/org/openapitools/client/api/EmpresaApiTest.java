/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.api;

import io.github.com.caonulisses.nuvemfiscalsdk.ApiException;
import io.github.com.caonulisses.nuvemfiscalsdk.model.Empresa;
import io.github.com.caonulisses.nuvemfiscalsdk.model.EmpresaCertificado;
import io.github.com.caonulisses.nuvemfiscalsdk.model.EmpresaConfigCte;
import io.github.com.caonulisses.nuvemfiscalsdk.model.EmpresaConfigDistribuicaoNfe;
import io.github.com.caonulisses.nuvemfiscalsdk.model.EmpresaConfigMdfe;
import io.github.com.caonulisses.nuvemfiscalsdk.model.EmpresaConfigNfce;
import io.github.com.caonulisses.nuvemfiscalsdk.model.EmpresaConfigNfcom;
import io.github.com.caonulisses.nuvemfiscalsdk.model.EmpresaConfigNfe;
import io.github.com.caonulisses.nuvemfiscalsdk.model.EmpresaConfigNfse;
import io.github.com.caonulisses.nuvemfiscalsdk.model.EmpresaListagem;
import io.github.com.caonulisses.nuvemfiscalsdk.model.EmpresaPedidoCadastroCertificado;
import java.io.File;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmpresaApi
 */
@Disabled
public class EmpresaApiTest {

    private final EmpresaApi api = new EmpresaApi();

    /**
     * Alterar configuração de CT-e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alterarConfigCteTest() throws ApiException {
        String cpfCnpj = null;
        EmpresaConfigCte body = null;
        EmpresaConfigCte response = api.alterarConfigCte(cpfCnpj, body);
        // TODO: test validations
    }

    /**
     * Alterar configuração de Distribuição de NF-e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alterarConfigDistribuicaoNfeTest() throws ApiException {
        String cpfCnpj = null;
        EmpresaConfigDistribuicaoNfe body = null;
        EmpresaConfigDistribuicaoNfe response = api.alterarConfigDistribuicaoNfe(cpfCnpj, body);
        // TODO: test validations
    }

    /**
     * Alterar configuração de MDF-e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alterarConfigMdfeTest() throws ApiException {
        String cpfCnpj = null;
        EmpresaConfigMdfe body = null;
        EmpresaConfigMdfe response = api.alterarConfigMdfe(cpfCnpj, body);
        // TODO: test validations
    }

    /**
     * Alterar configuração de NFC-e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alterarConfigNfceTest() throws ApiException {
        String cpfCnpj = null;
        EmpresaConfigNfce body = null;
        EmpresaConfigNfce response = api.alterarConfigNfce(cpfCnpj, body);
        // TODO: test validations
    }

    /**
     * Alterar configuração de NFCom
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alterarConfigNfcomTest() throws ApiException {
        String cpfCnpj = null;
        EmpresaConfigNfcom body = null;
        EmpresaConfigNfcom response = api.alterarConfigNfcom(cpfCnpj, body);
        // TODO: test validations
    }

    /**
     * Alterar configuração de NF-e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alterarConfigNfeTest() throws ApiException {
        String cpfCnpj = null;
        EmpresaConfigNfe body = null;
        EmpresaConfigNfe response = api.alterarConfigNfe(cpfCnpj, body);
        // TODO: test validations
    }

    /**
     * Alterar configuração de NFS-e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alterarConfigNfseTest() throws ApiException {
        String cpfCnpj = null;
        EmpresaConfigNfse body = null;
        EmpresaConfigNfse response = api.alterarConfigNfse(cpfCnpj, body);
        // TODO: test validations
    }

    /**
     * Alterar empresa
     *
     * Altera o cadastro de uma empresa (emitente/prestador) que esteja associada a sua conta.  Nesse método, por tratar-se de um PUT, caso algum campo não seja informado, o valor dele será apagado.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void atualizarEmpresaTest() throws ApiException {
        String cpfCnpj = null;
        Empresa body = null;
        Empresa response = api.atualizarEmpresa(cpfCnpj, body);
        // TODO: test validations
    }

    /**
     * Baixar logotipo
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarLogotipoEmpresaTest() throws ApiException {
        String cpfCnpj = null;
        File response = api.baixarLogotipoEmpresa(cpfCnpj);
        // TODO: test validations
    }

    /**
     * Cadastrar certificado
     *
     * Cadastre ou atualize um certificado digital e vincule a sua empresa, para que possa iniciar a emissão de notas.  * No parâmetro &#x60;certificado&#x60;, envie o binário do certificado digital (.pfx ou .p12) codificado em **base64**.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cadastrarCertificadoEmpresaTest() throws ApiException {
        String cpfCnpj = null;
        EmpresaPedidoCadastroCertificado body = null;
        EmpresaCertificado response = api.cadastrarCertificadoEmpresa(cpfCnpj, body);
        // TODO: test validations
    }

    /**
     * Consultar certificado
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarCertificadoEmpresaTest() throws ApiException {
        String cpfCnpj = null;
        EmpresaCertificado response = api.consultarCertificadoEmpresa(cpfCnpj);
        // TODO: test validations
    }

    /**
     * Consultar configuração de CT-e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarConfigCteTest() throws ApiException {
        String cpfCnpj = null;
        EmpresaConfigCte response = api.consultarConfigCte(cpfCnpj);
        // TODO: test validations
    }

    /**
     * Consultar configuração de Distribuição de NF-e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarConfigDistribuicaoNfeTest() throws ApiException {
        String cpfCnpj = null;
        EmpresaConfigDistribuicaoNfe response = api.consultarConfigDistribuicaoNfe(cpfCnpj);
        // TODO: test validations
    }

    /**
     * Consultar configuração de MDF-e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarConfigMdfeTest() throws ApiException {
        String cpfCnpj = null;
        EmpresaConfigMdfe response = api.consultarConfigMdfe(cpfCnpj);
        // TODO: test validations
    }

    /**
     * Consultar configuração de NFC-e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarConfigNfceTest() throws ApiException {
        String cpfCnpj = null;
        EmpresaConfigNfce response = api.consultarConfigNfce(cpfCnpj);
        // TODO: test validations
    }

    /**
     * Consultar configuração de NFCom
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarConfigNfcomTest() throws ApiException {
        String cpfCnpj = null;
        EmpresaConfigNfcom response = api.consultarConfigNfcom(cpfCnpj);
        // TODO: test validations
    }

    /**
     * Consultar configuração de NF-e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarConfigNfeTest() throws ApiException {
        String cpfCnpj = null;
        EmpresaConfigNfe response = api.consultarConfigNfe(cpfCnpj);
        // TODO: test validations
    }

    /**
     * Consultar configuração de NFS-e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarConfigNfseTest() throws ApiException {
        String cpfCnpj = null;
        EmpresaConfigNfse response = api.consultarConfigNfse(cpfCnpj);
        // TODO: test validations
    }

    /**
     * Consultar empresa
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarEmpresaTest() throws ApiException {
        String cpfCnpj = null;
        Empresa response = api.consultarEmpresa(cpfCnpj);
        // TODO: test validations
    }

    /**
     * Cadastrar empresa
     *
     * Cadastre uma nova empresa (emitente ou prestador) à sua conta.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void criarEmpresaTest() throws ApiException {
        Empresa body = null;
        Empresa response = api.criarEmpresa(body);
        // TODO: test validations
    }

    /**
     * Upload de certificado
     *
     * Cadastre ou atualize um certificado digital e vincule a sua empresa, para que possa iniciar a emissão de notas.  * Utilize o &#x60;content-type&#x60; igual a &#x60;multipart/form-data&#x60;.  * No parâmetro &#x60;file&#x60;, envie o binário do arquivo (.pfx ou .p12) do certificado digital.  * No parâmetro &#x60;password&#x60;, envie a senha do certificado.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enviarCertificadoEmpresaTest() throws ApiException {
        String cpfCnpj = null;
        File input = null;
        EmpresaCertificado response = api.enviarCertificadoEmpresa(cpfCnpj, input);
        // TODO: test validations
    }

    /**
     * Enviar logotipo
     *
     * Cadastre ou atualize um logotipo e vincule a sua empresa.    **Restrições:**  * Tipos de mídia (MIME) suportados: &#x60;image/png&#x60; e &#x60;image/jpeg&#x60;  * Tamanho máximo do arquivo: 200 KB    **Cenários de uso:**  * Quero que minhas notas sejam impressas com esse logotipo.  * Quero trocar o logotipo utilizado em minhas impressões.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enviarLogotipoEmpresaTest() throws ApiException {
        String cpfCnpj = null;
        File input = null;
        api.enviarLogotipoEmpresa(cpfCnpj, input);
        // TODO: test validations
    }

    /**
     * Deletar certificado
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void excluirCertificadoEmpresaTest() throws ApiException {
        String cpfCnpj = null;
        api.excluirCertificadoEmpresa(cpfCnpj);
        // TODO: test validations
    }

    /**
     * Deletar empresa
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void excluirEmpresaTest() throws ApiException {
        String cpfCnpj = null;
        api.excluirEmpresa(cpfCnpj);
        // TODO: test validations
    }

    /**
     * Deletar logotipo
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void excluirLogotipoEmpresaTest() throws ApiException {
        String cpfCnpj = null;
        api.excluirLogotipoEmpresa(cpfCnpj);
        // TODO: test validations
    }

    /**
     * Listar empresas
     *
     * Retorna a lista das empresas associadas à sua conta. As empresas são retornadas ordenadas pela data da criação, com as mais recentes aparecendo primeiro.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listarEmpresasTest() throws ApiException {
        Integer $top = null;
        Integer $skip = null;
        Boolean $inlinecount = null;
        String cpfCnpj = null;
        EmpresaListagem response = api.listarEmpresas($top, $skip, $inlinecount, cpfCnpj);
        // TODO: test validations
    }

}
