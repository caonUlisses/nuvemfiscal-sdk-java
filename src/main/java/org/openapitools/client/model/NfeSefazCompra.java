/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Informações de compras  (Nota de Empenho, Pedido e Contrato).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazCompra {
  public static final String SERIALIZED_NAME_X_N_EMP = "xNEmp";
  @SerializedName(SERIALIZED_NAME_X_N_EMP)
  @javax.annotation.Nullable
  private String xNEmp;

  public static final String SERIALIZED_NAME_X_PED = "xPed";
  @SerializedName(SERIALIZED_NAME_X_PED)
  @javax.annotation.Nullable
  private String xPed;

  public static final String SERIALIZED_NAME_X_CONT = "xCont";
  @SerializedName(SERIALIZED_NAME_X_CONT)
  @javax.annotation.Nullable
  private String xCont;

  public NfeSefazCompra() {
  }

  public NfeSefazCompra xNEmp(@javax.annotation.Nullable String xNEmp) {
    this.xNEmp = xNEmp;
    return this;
  }

  /**
   * Informação da Nota de Empenho de compras públicas (NT2011/004).
   * @return xNEmp
   */
  @javax.annotation.Nullable
  public String getxNEmp() {
    return xNEmp;
  }

  public void setxNEmp(@javax.annotation.Nullable String xNEmp) {
    this.xNEmp = xNEmp;
  }


  public NfeSefazCompra xPed(@javax.annotation.Nullable String xPed) {
    this.xPed = xPed;
    return this;
  }

  /**
   * Informação do pedido.
   * @return xPed
   */
  @javax.annotation.Nullable
  public String getxPed() {
    return xPed;
  }

  public void setxPed(@javax.annotation.Nullable String xPed) {
    this.xPed = xPed;
  }


  public NfeSefazCompra xCont(@javax.annotation.Nullable String xCont) {
    this.xCont = xCont;
    return this;
  }

  /**
   * Informação do contrato.
   * @return xCont
   */
  @javax.annotation.Nullable
  public String getxCont() {
    return xCont;
  }

  public void setxCont(@javax.annotation.Nullable String xCont) {
    this.xCont = xCont;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazCompra nfeSefazCompra = (NfeSefazCompra) o;
    return Objects.equals(this.xNEmp, nfeSefazCompra.xNEmp) &&
        Objects.equals(this.xPed, nfeSefazCompra.xPed) &&
        Objects.equals(this.xCont, nfeSefazCompra.xCont);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(xNEmp, xPed, xCont);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazCompra {\n");
    sb.append("    xNEmp: ").append(toIndentedString(xNEmp)).append("\n");
    sb.append("    xPed: ").append(toIndentedString(xPed)).append("\n");
    sb.append("    xCont: ").append(toIndentedString(xCont)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("xNEmp");
    openapiFields.add("xPed");
    openapiFields.add("xCont");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazCompra
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazCompra.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazCompra is not found in the empty JSON string", NfeSefazCompra.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazCompra.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazCompra` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("xNEmp") != null && !jsonObj.get("xNEmp").isJsonNull()) && !jsonObj.get("xNEmp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xNEmp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xNEmp").toString()));
      }
      if ((jsonObj.get("xPed") != null && !jsonObj.get("xPed").isJsonNull()) && !jsonObj.get("xPed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xPed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xPed").toString()));
      }
      if ((jsonObj.get("xCont") != null && !jsonObj.get("xCont").isJsonNull()) && !jsonObj.get("xCont").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xCont` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xCont").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazCompra.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazCompra' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazCompra> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazCompra.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazCompra>() {
           @Override
           public void write(JsonWriter out, NfeSefazCompra value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazCompra read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazCompra given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazCompra
   * @throws IOException if the JSON string is invalid with respect to NfeSefazCompra
   */
  public static NfeSefazCompra fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazCompra.class);
  }

  /**
   * Convert an instance of NfeSefazCompra to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

