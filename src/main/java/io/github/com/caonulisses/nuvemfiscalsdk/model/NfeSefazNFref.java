/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfeSefazRefECF;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfeSefazRefNF;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfeSefazRefNFP;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Grupo de infromações da NF referenciada.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazNFref {
  public static final String SERIALIZED_NAME_REF_N_FE = "refNFe";
  @SerializedName(SERIALIZED_NAME_REF_N_FE)
  @javax.annotation.Nullable
  private String refNFe;

  public static final String SERIALIZED_NAME_REF_N_FE_SIG = "refNFeSig";
  @SerializedName(SERIALIZED_NAME_REF_N_FE_SIG)
  @javax.annotation.Nullable
  private String refNFeSig;

  public static final String SERIALIZED_NAME_REF_N_F = "refNF";
  @SerializedName(SERIALIZED_NAME_REF_N_F)
  @javax.annotation.Nullable
  private NfeSefazRefNF refNF;

  public static final String SERIALIZED_NAME_REF_N_F_P = "refNFP";
  @SerializedName(SERIALIZED_NAME_REF_N_F_P)
  @javax.annotation.Nullable
  private NfeSefazRefNFP refNFP;

  public static final String SERIALIZED_NAME_REF_C_TE = "refCTe";
  @SerializedName(SERIALIZED_NAME_REF_C_TE)
  @javax.annotation.Nullable
  private String refCTe;

  public static final String SERIALIZED_NAME_REF_E_C_F = "refECF";
  @SerializedName(SERIALIZED_NAME_REF_E_C_F)
  @javax.annotation.Nullable
  private NfeSefazRefECF refECF;

  public NfeSefazNFref() {
  }

  public NfeSefazNFref refNFe(@javax.annotation.Nullable String refNFe) {
    this.refNFe = refNFe;
    return this;
  }

  /**
   * Chave de acesso das NF-e referenciadas. Chave de acesso compostas por Código da UF (tabela do IBGE) + AAMM da emissão + CNPJ do Emitente + modelo, série e número da NF-e Referenciada + Código Numérico + DV.
   * @return refNFe
   */
  @javax.annotation.Nullable
  public String getRefNFe() {
    return refNFe;
  }

  public void setRefNFe(@javax.annotation.Nullable String refNFe) {
    this.refNFe = refNFe;
  }


  public NfeSefazNFref refNFeSig(@javax.annotation.Nullable String refNFeSig) {
    this.refNFeSig = refNFeSig;
    return this;
  }

  /**
   * Referencia uma NF-e (modelo 55) emitida anteriormente pela sua Chave de Acesso com código numérico zerado, permitindo manter o sigilo da NF-e referenciada.
   * @return refNFeSig
   */
  @javax.annotation.Nullable
  public String getRefNFeSig() {
    return refNFeSig;
  }

  public void setRefNFeSig(@javax.annotation.Nullable String refNFeSig) {
    this.refNFeSig = refNFeSig;
  }


  public NfeSefazNFref refNF(@javax.annotation.Nullable NfeSefazRefNF refNF) {
    this.refNF = refNF;
    return this;
  }

  /**
   * Get refNF
   * @return refNF
   */
  @javax.annotation.Nullable
  public NfeSefazRefNF getRefNF() {
    return refNF;
  }

  public void setRefNF(@javax.annotation.Nullable NfeSefazRefNF refNF) {
    this.refNF = refNF;
  }


  public NfeSefazNFref refNFP(@javax.annotation.Nullable NfeSefazRefNFP refNFP) {
    this.refNFP = refNFP;
    return this;
  }

  /**
   * Get refNFP
   * @return refNFP
   */
  @javax.annotation.Nullable
  public NfeSefazRefNFP getRefNFP() {
    return refNFP;
  }

  public void setRefNFP(@javax.annotation.Nullable NfeSefazRefNFP refNFP) {
    this.refNFP = refNFP;
  }


  public NfeSefazNFref refCTe(@javax.annotation.Nullable String refCTe) {
    this.refCTe = refCTe;
    return this;
  }

  /**
   * Utilizar esta TAG para referenciar um CT-e emitido anteriormente, vinculada a NF-e atual.
   * @return refCTe
   */
  @javax.annotation.Nullable
  public String getRefCTe() {
    return refCTe;
  }

  public void setRefCTe(@javax.annotation.Nullable String refCTe) {
    this.refCTe = refCTe;
  }


  public NfeSefazNFref refECF(@javax.annotation.Nullable NfeSefazRefECF refECF) {
    this.refECF = refECF;
    return this;
  }

  /**
   * Get refECF
   * @return refECF
   */
  @javax.annotation.Nullable
  public NfeSefazRefECF getRefECF() {
    return refECF;
  }

  public void setRefECF(@javax.annotation.Nullable NfeSefazRefECF refECF) {
    this.refECF = refECF;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazNFref nfeSefazNFref = (NfeSefazNFref) o;
    return Objects.equals(this.refNFe, nfeSefazNFref.refNFe) &&
        Objects.equals(this.refNFeSig, nfeSefazNFref.refNFeSig) &&
        Objects.equals(this.refNF, nfeSefazNFref.refNF) &&
        Objects.equals(this.refNFP, nfeSefazNFref.refNFP) &&
        Objects.equals(this.refCTe, nfeSefazNFref.refCTe) &&
        Objects.equals(this.refECF, nfeSefazNFref.refECF);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(refNFe, refNFeSig, refNF, refNFP, refCTe, refECF);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazNFref {\n");
    sb.append("    refNFe: ").append(toIndentedString(refNFe)).append("\n");
    sb.append("    refNFeSig: ").append(toIndentedString(refNFeSig)).append("\n");
    sb.append("    refNF: ").append(toIndentedString(refNF)).append("\n");
    sb.append("    refNFP: ").append(toIndentedString(refNFP)).append("\n");
    sb.append("    refCTe: ").append(toIndentedString(refCTe)).append("\n");
    sb.append("    refECF: ").append(toIndentedString(refECF)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("refNFe");
    openapiFields.add("refNFeSig");
    openapiFields.add("refNF");
    openapiFields.add("refNFP");
    openapiFields.add("refCTe");
    openapiFields.add("refECF");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazNFref
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazNFref.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazNFref is not found in the empty JSON string", NfeSefazNFref.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazNFref.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazNFref` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("refNFe") != null && !jsonObj.get("refNFe").isJsonNull()) && !jsonObj.get("refNFe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refNFe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refNFe").toString()));
      }
      if ((jsonObj.get("refNFeSig") != null && !jsonObj.get("refNFeSig").isJsonNull()) && !jsonObj.get("refNFeSig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refNFeSig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refNFeSig").toString()));
      }
      // validate the optional field `refNF`
      if (jsonObj.get("refNF") != null && !jsonObj.get("refNF").isJsonNull()) {
        NfeSefazRefNF.validateJsonElement(jsonObj.get("refNF"));
      }
      // validate the optional field `refNFP`
      if (jsonObj.get("refNFP") != null && !jsonObj.get("refNFP").isJsonNull()) {
        NfeSefazRefNFP.validateJsonElement(jsonObj.get("refNFP"));
      }
      if ((jsonObj.get("refCTe") != null && !jsonObj.get("refCTe").isJsonNull()) && !jsonObj.get("refCTe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refCTe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refCTe").toString()));
      }
      // validate the optional field `refECF`
      if (jsonObj.get("refECF") != null && !jsonObj.get("refECF").isJsonNull()) {
        NfeSefazRefECF.validateJsonElement(jsonObj.get("refECF"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazNFref.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazNFref' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazNFref> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazNFref.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazNFref>() {
           @Override
           public void write(JsonWriter out, NfeSefazNFref value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazNFref read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazNFref given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazNFref
   * @throws IOException if the JSON string is invalid with respect to NfeSefazNFref
   */
  public static NfeSefazNFref fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazNFref.class);
  }

  /**
   * Convert an instance of NfeSefazNFref to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

