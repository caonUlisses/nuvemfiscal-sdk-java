/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CteSefazCobr;
import org.openapitools.client.model.CteSefazDocAnt;
import org.openapitools.client.model.CteSefazInfCarga;
import org.openapitools.client.model.CteSefazInfCteSub;
import org.openapitools.client.model.CteSefazInfDoc;
import org.openapitools.client.model.CteSefazInfGlobalizado;
import org.openapitools.client.model.CteSefazInfModal;
import org.openapitools.client.model.CteSefazInfServVinc;
import org.openapitools.client.model.CteSefazVeicNovos;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Grupo de informações do CT-e Normal e Substituto.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazInfCTeNorm {
  public static final String SERIALIZED_NAME_INF_CARGA = "infCarga";
  @SerializedName(SERIALIZED_NAME_INF_CARGA)
  @javax.annotation.Nonnull
  private CteSefazInfCarga infCarga;

  public static final String SERIALIZED_NAME_INF_DOC = "infDoc";
  @SerializedName(SERIALIZED_NAME_INF_DOC)
  @javax.annotation.Nullable
  private CteSefazInfDoc infDoc;

  public static final String SERIALIZED_NAME_DOC_ANT = "docAnt";
  @SerializedName(SERIALIZED_NAME_DOC_ANT)
  @javax.annotation.Nullable
  private CteSefazDocAnt docAnt;

  public static final String SERIALIZED_NAME_INF_MODAL = "infModal";
  @SerializedName(SERIALIZED_NAME_INF_MODAL)
  @javax.annotation.Nonnull
  private CteSefazInfModal infModal;

  public static final String SERIALIZED_NAME_VEIC_NOVOS = "veicNovos";
  @SerializedName(SERIALIZED_NAME_VEIC_NOVOS)
  @javax.annotation.Nullable
  private List<CteSefazVeicNovos> veicNovos = new ArrayList<>();

  public static final String SERIALIZED_NAME_COBR = "cobr";
  @SerializedName(SERIALIZED_NAME_COBR)
  @javax.annotation.Nullable
  private CteSefazCobr cobr;

  public static final String SERIALIZED_NAME_INF_CTE_SUB = "infCteSub";
  @SerializedName(SERIALIZED_NAME_INF_CTE_SUB)
  @javax.annotation.Nullable
  private CteSefazInfCteSub infCteSub;

  public static final String SERIALIZED_NAME_INF_GLOBALIZADO = "infGlobalizado";
  @SerializedName(SERIALIZED_NAME_INF_GLOBALIZADO)
  @javax.annotation.Nullable
  private CteSefazInfGlobalizado infGlobalizado;

  public static final String SERIALIZED_NAME_INF_SERV_VINC = "infServVinc";
  @SerializedName(SERIALIZED_NAME_INF_SERV_VINC)
  @javax.annotation.Nullable
  private CteSefazInfServVinc infServVinc;

  public CteSefazInfCTeNorm() {
  }

  public CteSefazInfCTeNorm infCarga(@javax.annotation.Nonnull CteSefazInfCarga infCarga) {
    this.infCarga = infCarga;
    return this;
  }

  /**
   * Get infCarga
   * @return infCarga
   */
  @javax.annotation.Nonnull
  public CteSefazInfCarga getInfCarga() {
    return infCarga;
  }

  public void setInfCarga(@javax.annotation.Nonnull CteSefazInfCarga infCarga) {
    this.infCarga = infCarga;
  }


  public CteSefazInfCTeNorm infDoc(@javax.annotation.Nullable CteSefazInfDoc infDoc) {
    this.infDoc = infDoc;
    return this;
  }

  /**
   * Get infDoc
   * @return infDoc
   */
  @javax.annotation.Nullable
  public CteSefazInfDoc getInfDoc() {
    return infDoc;
  }

  public void setInfDoc(@javax.annotation.Nullable CteSefazInfDoc infDoc) {
    this.infDoc = infDoc;
  }


  public CteSefazInfCTeNorm docAnt(@javax.annotation.Nullable CteSefazDocAnt docAnt) {
    this.docAnt = docAnt;
    return this;
  }

  /**
   * Get docAnt
   * @return docAnt
   */
  @javax.annotation.Nullable
  public CteSefazDocAnt getDocAnt() {
    return docAnt;
  }

  public void setDocAnt(@javax.annotation.Nullable CteSefazDocAnt docAnt) {
    this.docAnt = docAnt;
  }


  public CteSefazInfCTeNorm infModal(@javax.annotation.Nonnull CteSefazInfModal infModal) {
    this.infModal = infModal;
    return this;
  }

  /**
   * Get infModal
   * @return infModal
   */
  @javax.annotation.Nonnull
  public CteSefazInfModal getInfModal() {
    return infModal;
  }

  public void setInfModal(@javax.annotation.Nonnull CteSefazInfModal infModal) {
    this.infModal = infModal;
  }


  public CteSefazInfCTeNorm veicNovos(@javax.annotation.Nullable List<CteSefazVeicNovos> veicNovos) {
    this.veicNovos = veicNovos;
    return this;
  }

  public CteSefazInfCTeNorm addVeicNovosItem(CteSefazVeicNovos veicNovosItem) {
    if (this.veicNovos == null) {
      this.veicNovos = new ArrayList<>();
    }
    this.veicNovos.add(veicNovosItem);
    return this;
  }

  /**
   * Get veicNovos
   * @return veicNovos
   */
  @javax.annotation.Nullable
  public List<CteSefazVeicNovos> getVeicNovos() {
    return veicNovos;
  }

  public void setVeicNovos(@javax.annotation.Nullable List<CteSefazVeicNovos> veicNovos) {
    this.veicNovos = veicNovos;
  }


  public CteSefazInfCTeNorm cobr(@javax.annotation.Nullable CteSefazCobr cobr) {
    this.cobr = cobr;
    return this;
  }

  /**
   * Get cobr
   * @return cobr
   */
  @javax.annotation.Nullable
  public CteSefazCobr getCobr() {
    return cobr;
  }

  public void setCobr(@javax.annotation.Nullable CteSefazCobr cobr) {
    this.cobr = cobr;
  }


  public CteSefazInfCTeNorm infCteSub(@javax.annotation.Nullable CteSefazInfCteSub infCteSub) {
    this.infCteSub = infCteSub;
    return this;
  }

  /**
   * Get infCteSub
   * @return infCteSub
   */
  @javax.annotation.Nullable
  public CteSefazInfCteSub getInfCteSub() {
    return infCteSub;
  }

  public void setInfCteSub(@javax.annotation.Nullable CteSefazInfCteSub infCteSub) {
    this.infCteSub = infCteSub;
  }


  public CteSefazInfCTeNorm infGlobalizado(@javax.annotation.Nullable CteSefazInfGlobalizado infGlobalizado) {
    this.infGlobalizado = infGlobalizado;
    return this;
  }

  /**
   * Get infGlobalizado
   * @return infGlobalizado
   */
  @javax.annotation.Nullable
  public CteSefazInfGlobalizado getInfGlobalizado() {
    return infGlobalizado;
  }

  public void setInfGlobalizado(@javax.annotation.Nullable CteSefazInfGlobalizado infGlobalizado) {
    this.infGlobalizado = infGlobalizado;
  }


  public CteSefazInfCTeNorm infServVinc(@javax.annotation.Nullable CteSefazInfServVinc infServVinc) {
    this.infServVinc = infServVinc;
    return this;
  }

  /**
   * Get infServVinc
   * @return infServVinc
   */
  @javax.annotation.Nullable
  public CteSefazInfServVinc getInfServVinc() {
    return infServVinc;
  }

  public void setInfServVinc(@javax.annotation.Nullable CteSefazInfServVinc infServVinc) {
    this.infServVinc = infServVinc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazInfCTeNorm cteSefazInfCTeNorm = (CteSefazInfCTeNorm) o;
    return Objects.equals(this.infCarga, cteSefazInfCTeNorm.infCarga) &&
        Objects.equals(this.infDoc, cteSefazInfCTeNorm.infDoc) &&
        Objects.equals(this.docAnt, cteSefazInfCTeNorm.docAnt) &&
        Objects.equals(this.infModal, cteSefazInfCTeNorm.infModal) &&
        Objects.equals(this.veicNovos, cteSefazInfCTeNorm.veicNovos) &&
        Objects.equals(this.cobr, cteSefazInfCTeNorm.cobr) &&
        Objects.equals(this.infCteSub, cteSefazInfCTeNorm.infCteSub) &&
        Objects.equals(this.infGlobalizado, cteSefazInfCTeNorm.infGlobalizado) &&
        Objects.equals(this.infServVinc, cteSefazInfCTeNorm.infServVinc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(infCarga, infDoc, docAnt, infModal, veicNovos, cobr, infCteSub, infGlobalizado, infServVinc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazInfCTeNorm {\n");
    sb.append("    infCarga: ").append(toIndentedString(infCarga)).append("\n");
    sb.append("    infDoc: ").append(toIndentedString(infDoc)).append("\n");
    sb.append("    docAnt: ").append(toIndentedString(docAnt)).append("\n");
    sb.append("    infModal: ").append(toIndentedString(infModal)).append("\n");
    sb.append("    veicNovos: ").append(toIndentedString(veicNovos)).append("\n");
    sb.append("    cobr: ").append(toIndentedString(cobr)).append("\n");
    sb.append("    infCteSub: ").append(toIndentedString(infCteSub)).append("\n");
    sb.append("    infGlobalizado: ").append(toIndentedString(infGlobalizado)).append("\n");
    sb.append("    infServVinc: ").append(toIndentedString(infServVinc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("infCarga");
    openapiFields.add("infDoc");
    openapiFields.add("docAnt");
    openapiFields.add("infModal");
    openapiFields.add("veicNovos");
    openapiFields.add("cobr");
    openapiFields.add("infCteSub");
    openapiFields.add("infGlobalizado");
    openapiFields.add("infServVinc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("infCarga");
    openapiRequiredFields.add("infModal");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazInfCTeNorm
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazInfCTeNorm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazInfCTeNorm is not found in the empty JSON string", CteSefazInfCTeNorm.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazInfCTeNorm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazInfCTeNorm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CteSefazInfCTeNorm.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `infCarga`
      CteSefazInfCarga.validateJsonElement(jsonObj.get("infCarga"));
      // validate the optional field `infDoc`
      if (jsonObj.get("infDoc") != null && !jsonObj.get("infDoc").isJsonNull()) {
        CteSefazInfDoc.validateJsonElement(jsonObj.get("infDoc"));
      }
      // validate the optional field `docAnt`
      if (jsonObj.get("docAnt") != null && !jsonObj.get("docAnt").isJsonNull()) {
        CteSefazDocAnt.validateJsonElement(jsonObj.get("docAnt"));
      }
      // validate the required field `infModal`
      CteSefazInfModal.validateJsonElement(jsonObj.get("infModal"));
      if (jsonObj.get("veicNovos") != null && !jsonObj.get("veicNovos").isJsonNull()) {
        JsonArray jsonArrayveicNovos = jsonObj.getAsJsonArray("veicNovos");
        if (jsonArrayveicNovos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("veicNovos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `veicNovos` to be an array in the JSON string but got `%s`", jsonObj.get("veicNovos").toString()));
          }

          // validate the optional field `veicNovos` (array)
          for (int i = 0; i < jsonArrayveicNovos.size(); i++) {
            CteSefazVeicNovos.validateJsonElement(jsonArrayveicNovos.get(i));
          };
        }
      }
      // validate the optional field `cobr`
      if (jsonObj.get("cobr") != null && !jsonObj.get("cobr").isJsonNull()) {
        CteSefazCobr.validateJsonElement(jsonObj.get("cobr"));
      }
      // validate the optional field `infCteSub`
      if (jsonObj.get("infCteSub") != null && !jsonObj.get("infCteSub").isJsonNull()) {
        CteSefazInfCteSub.validateJsonElement(jsonObj.get("infCteSub"));
      }
      // validate the optional field `infGlobalizado`
      if (jsonObj.get("infGlobalizado") != null && !jsonObj.get("infGlobalizado").isJsonNull()) {
        CteSefazInfGlobalizado.validateJsonElement(jsonObj.get("infGlobalizado"));
      }
      // validate the optional field `infServVinc`
      if (jsonObj.get("infServVinc") != null && !jsonObj.get("infServVinc").isJsonNull()) {
        CteSefazInfServVinc.validateJsonElement(jsonObj.get("infServVinc"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazInfCTeNorm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazInfCTeNorm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazInfCTeNorm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazInfCTeNorm.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazInfCTeNorm>() {
           @Override
           public void write(JsonWriter out, CteSefazInfCTeNorm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazInfCTeNorm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazInfCTeNorm given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazInfCTeNorm
   * @throws IOException if the JSON string is invalid with respect to CteSefazInfCTeNorm
   */
  public static CteSefazInfCTeNorm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazInfCTeNorm.class);
  }

  /**
   * Convert an instance of CteSefazInfCTeNorm to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

