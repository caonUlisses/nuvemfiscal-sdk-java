/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Grupo de informações relativas à exportação/importação de serviço prestado.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class ComExterior {
  public static final String SERIALIZED_NAME_MD_PRESTACAO = "mdPrestacao";
  @SerializedName(SERIALIZED_NAME_MD_PRESTACAO)
  @javax.annotation.Nullable
  private Integer mdPrestacao;

  public static final String SERIALIZED_NAME_VINC_PREST = "vincPrest";
  @SerializedName(SERIALIZED_NAME_VINC_PREST)
  @javax.annotation.Nullable
  private Integer vincPrest;

  public static final String SERIALIZED_NAME_TP_MOEDA = "tpMoeda";
  @SerializedName(SERIALIZED_NAME_TP_MOEDA)
  @javax.annotation.Nullable
  private String tpMoeda;

  public static final String SERIALIZED_NAME_V_SERV_MOEDA = "vServMoeda";
  @SerializedName(SERIALIZED_NAME_V_SERV_MOEDA)
  @javax.annotation.Nullable
  private BigDecimal vServMoeda;

  public static final String SERIALIZED_NAME_MEC_A_F_COMEX_P = "mecAFComexP";
  @SerializedName(SERIALIZED_NAME_MEC_A_F_COMEX_P)
  @javax.annotation.Nullable
  private String mecAFComexP;

  public static final String SERIALIZED_NAME_MEC_A_F_COMEX_T = "mecAFComexT";
  @SerializedName(SERIALIZED_NAME_MEC_A_F_COMEX_T)
  @javax.annotation.Nullable
  private String mecAFComexT;

  public static final String SERIALIZED_NAME_MOV_TEMP_BENS = "movTempBens";
  @SerializedName(SERIALIZED_NAME_MOV_TEMP_BENS)
  @javax.annotation.Nullable
  private Integer movTempBens;

  public static final String SERIALIZED_NAME_N_D_I = "nDI";
  @SerializedName(SERIALIZED_NAME_N_D_I)
  @javax.annotation.Nullable
  private String nDI;

  public static final String SERIALIZED_NAME_N_R_E = "nRE";
  @SerializedName(SERIALIZED_NAME_N_R_E)
  @javax.annotation.Nullable
  private String nRE;

  public static final String SERIALIZED_NAME_MDIC = "mdic";
  @SerializedName(SERIALIZED_NAME_MDIC)
  @javax.annotation.Nullable
  private Integer mdic;

  public ComExterior() {
  }

  public ComExterior mdPrestacao(@javax.annotation.Nullable Integer mdPrestacao) {
    this.mdPrestacao = mdPrestacao;
    return this;
  }

  /**
   * Modo de Prestação:  * 0 - Desconhecido (tipo não informado na nota de origem)  * 1 - Transfronteiriço  * 2 - Consumo no Brasil  * 3 - Presença Comercial no Exterior  * 4 - Movimento Temporário de Pessoas Físicas
   * @return mdPrestacao
   */
  @javax.annotation.Nullable
  public Integer getMdPrestacao() {
    return mdPrestacao;
  }

  public void setMdPrestacao(@javax.annotation.Nullable Integer mdPrestacao) {
    this.mdPrestacao = mdPrestacao;
  }


  public ComExterior vincPrest(@javax.annotation.Nullable Integer vincPrest) {
    this.vincPrest = vincPrest;
    return this;
  }

  /**
   * Vínculo entre as partes no negócio:  * 0 - Sem vínculo com o tomador/ Prestador  * 1 - Controlada  * 2 - Controladora  * 3 - Coligada  * 4 - Matriz  * 5 - Filial ou sucursal  * 6 - Outro vínculo
   * @return vincPrest
   */
  @javax.annotation.Nullable
  public Integer getVincPrest() {
    return vincPrest;
  }

  public void setVincPrest(@javax.annotation.Nullable Integer vincPrest) {
    this.vincPrest = vincPrest;
  }


  public ComExterior tpMoeda(@javax.annotation.Nullable String tpMoeda) {
    this.tpMoeda = tpMoeda;
    return this;
  }

  /**
   * Identifica a moeda da transação comercial.
   * @return tpMoeda
   */
  @javax.annotation.Nullable
  public String getTpMoeda() {
    return tpMoeda;
  }

  public void setTpMoeda(@javax.annotation.Nullable String tpMoeda) {
    this.tpMoeda = tpMoeda;
  }


  public ComExterior vServMoeda(@javax.annotation.Nullable BigDecimal vServMoeda) {
    this.vServMoeda = vServMoeda;
    return this;
  }

  /**
   * Valor do serviço prestado expresso em moeda estrangeira especificada em tpmoeda.
   * minimum: 0
   * @return vServMoeda
   */
  @javax.annotation.Nullable
  public BigDecimal getvServMoeda() {
    return vServMoeda;
  }

  public void setvServMoeda(@javax.annotation.Nullable BigDecimal vServMoeda) {
    this.vServMoeda = vServMoeda;
  }


  public ComExterior mecAFComexP(@javax.annotation.Nullable String mecAFComexP) {
    this.mecAFComexP = mecAFComexP;
    return this;
  }

  /**
   * Mecanismo de apoio/fomento ao Comércio Exterior utilizado pelo prestador do serviço:  * 00 - Desconhecido (tipo não informado na nota de origem)  * 01 - Nenhum  * 02 - ACC - Adiantamento sobre Contrato de Câmbio - Redução a Zero do IR e do IOF  * 03 - ACE - Adiantamento sobre Cambiais Entregues - Redução a Zero do IR e do IOF  * 04 - BNDES-Exim Pós-Embarque - Serviços  * 05 - BNDES-Exim Pré-Embarque - Serviços  * 06 - FGE - Fundo de Garantia à Exportação  * 07 - PROEX - EQUALIZAÇÃO  * 08 - PROEX - Financiamento
   * @return mecAFComexP
   */
  @javax.annotation.Nullable
  public String getMecAFComexP() {
    return mecAFComexP;
  }

  public void setMecAFComexP(@javax.annotation.Nullable String mecAFComexP) {
    this.mecAFComexP = mecAFComexP;
  }


  public ComExterior mecAFComexT(@javax.annotation.Nullable String mecAFComexT) {
    this.mecAFComexT = mecAFComexT;
    return this;
  }

  /**
   * Mecanismo de apoio/fomento ao Comércio Exterior utilizado pelo tomador do serviço:  * 00 - Desconhecido (tipo não informado na nota de origem)  * 01 - Nenhum  * 02 - Adm. Pública e Repr. Internacional  * 03 - Alugueis e Arrend. Mercantil de maquinas, equip., embarc. e aeronaves  * 04 - Arrendamento Mercantil de aeronave para empresa de transporte aéreo público  * 05 - Comissão a agentes externos na exportação  * 06 - Despesas de armazenagem, mov. e transporte de carga no exterior  * 07 - Eventos FIFA (subsidiária)  * 08 - Eventos FIFA  * 09 - Fretes, arrendamentos de embarcações ou aeronaves e outros  * 10 - Material Aeronáutico  * 11 - Promoção de Bens no Exterior  * 12 - Promoção de Dest. Turísticos Brasileiros  * 13 - Promoção do Brasil no Exterior  * 14 - Promoção Serviços no Exterior  * 15 - RECINE  * 16 - RECOPA  * 17 - Registro e Manutenção de marcas, patentes e cultivares  * 18 - REICOMP  * 19 - REIDI  * 20 - REPENEC  * 21 - REPES  * 22 - RETAERO  * 23 - RETID  * 24 - Royalties, Assistência Técnica, Científica e Assemelhados  * 25 - Serviços de avaliação da conformidade vinculados aos Acordos da OMC  * 26 - ZPE
   * @return mecAFComexT
   */
  @javax.annotation.Nullable
  public String getMecAFComexT() {
    return mecAFComexT;
  }

  public void setMecAFComexT(@javax.annotation.Nullable String mecAFComexT) {
    this.mecAFComexT = mecAFComexT;
  }


  public ComExterior movTempBens(@javax.annotation.Nullable Integer movTempBens) {
    this.movTempBens = movTempBens;
    return this;
  }

  /**
   * Operação está vinculada à Movimentação Temporária de Bens:  * 0 - Desconhecido (tipo não informado na nota de origem)  * 1 - Não  * 2 - Vinculada - Declaração de Importação  * 3 - Vinculada - Declaração de Exportação
   * @return movTempBens
   */
  @javax.annotation.Nullable
  public Integer getMovTempBens() {
    return movTempBens;
  }

  public void setMovTempBens(@javax.annotation.Nullable Integer movTempBens) {
    this.movTempBens = movTempBens;
  }


  public ComExterior nDI(@javax.annotation.Nullable String nDI) {
    this.nDI = nDI;
    return this;
  }

  /**
   * Número da Declaração de Importação (DI/DSI/DA/DRI-E) averbado.
   * @return nDI
   */
  @javax.annotation.Nullable
  public String getnDI() {
    return nDI;
  }

  public void setnDI(@javax.annotation.Nullable String nDI) {
    this.nDI = nDI;
  }


  public ComExterior nRE(@javax.annotation.Nullable String nRE) {
    this.nRE = nRE;
    return this;
  }

  /**
   * Número do Registro de Exportação (RE) averbado.
   * @return nRE
   */
  @javax.annotation.Nullable
  public String getnRE() {
    return nRE;
  }

  public void setnRE(@javax.annotation.Nullable String nRE) {
    this.nRE = nRE;
  }


  public ComExterior mdic(@javax.annotation.Nullable Integer mdic) {
    this.mdic = mdic;
    return this;
  }

  /**
   * Compartilhar as informações da NFS-e gerada a partir desta DPS com a Secretaria de Comércio Exterior:  * 0 - Não enviar para o MDIC  * 1 - Enviar para o MDIC
   * @return mdic
   */
  @javax.annotation.Nullable
  public Integer getMdic() {
    return mdic;
  }

  public void setMdic(@javax.annotation.Nullable Integer mdic) {
    this.mdic = mdic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComExterior comExterior = (ComExterior) o;
    return Objects.equals(this.mdPrestacao, comExterior.mdPrestacao) &&
        Objects.equals(this.vincPrest, comExterior.vincPrest) &&
        Objects.equals(this.tpMoeda, comExterior.tpMoeda) &&
        Objects.equals(this.vServMoeda, comExterior.vServMoeda) &&
        Objects.equals(this.mecAFComexP, comExterior.mecAFComexP) &&
        Objects.equals(this.mecAFComexT, comExterior.mecAFComexT) &&
        Objects.equals(this.movTempBens, comExterior.movTempBens) &&
        Objects.equals(this.nDI, comExterior.nDI) &&
        Objects.equals(this.nRE, comExterior.nRE) &&
        Objects.equals(this.mdic, comExterior.mdic);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(mdPrestacao, vincPrest, tpMoeda, vServMoeda, mecAFComexP, mecAFComexT, movTempBens, nDI, nRE, mdic);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComExterior {\n");
    sb.append("    mdPrestacao: ").append(toIndentedString(mdPrestacao)).append("\n");
    sb.append("    vincPrest: ").append(toIndentedString(vincPrest)).append("\n");
    sb.append("    tpMoeda: ").append(toIndentedString(tpMoeda)).append("\n");
    sb.append("    vServMoeda: ").append(toIndentedString(vServMoeda)).append("\n");
    sb.append("    mecAFComexP: ").append(toIndentedString(mecAFComexP)).append("\n");
    sb.append("    mecAFComexT: ").append(toIndentedString(mecAFComexT)).append("\n");
    sb.append("    movTempBens: ").append(toIndentedString(movTempBens)).append("\n");
    sb.append("    nDI: ").append(toIndentedString(nDI)).append("\n");
    sb.append("    nRE: ").append(toIndentedString(nRE)).append("\n");
    sb.append("    mdic: ").append(toIndentedString(mdic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mdPrestacao");
    openapiFields.add("vincPrest");
    openapiFields.add("tpMoeda");
    openapiFields.add("vServMoeda");
    openapiFields.add("mecAFComexP");
    openapiFields.add("mecAFComexT");
    openapiFields.add("movTempBens");
    openapiFields.add("nDI");
    openapiFields.add("nRE");
    openapiFields.add("mdic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mdPrestacao");
    openapiRequiredFields.add("vincPrest");
    openapiRequiredFields.add("tpMoeda");
    openapiRequiredFields.add("vServMoeda");
    openapiRequiredFields.add("mecAFComexP");
    openapiRequiredFields.add("mecAFComexT");
    openapiRequiredFields.add("movTempBens");
    openapiRequiredFields.add("mdic");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComExterior
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComExterior.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComExterior is not found in the empty JSON string", ComExterior.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComExterior.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComExterior` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ComExterior.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tpMoeda") != null && !jsonObj.get("tpMoeda").isJsonNull()) && !jsonObj.get("tpMoeda").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tpMoeda` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tpMoeda").toString()));
      }
      if ((jsonObj.get("mecAFComexP") != null && !jsonObj.get("mecAFComexP").isJsonNull()) && !jsonObj.get("mecAFComexP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mecAFComexP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mecAFComexP").toString()));
      }
      if ((jsonObj.get("mecAFComexT") != null && !jsonObj.get("mecAFComexT").isJsonNull()) && !jsonObj.get("mecAFComexT").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mecAFComexT` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mecAFComexT").toString()));
      }
      if ((jsonObj.get("nDI") != null && !jsonObj.get("nDI").isJsonNull()) && !jsonObj.get("nDI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nDI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nDI").toString()));
      }
      if ((jsonObj.get("nRE") != null && !jsonObj.get("nRE").isJsonNull()) && !jsonObj.get("nRE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nRE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nRE").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComExterior.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComExterior' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComExterior> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComExterior.class));

       return (TypeAdapter<T>) new TypeAdapter<ComExterior>() {
           @Override
           public void write(JsonWriter out, ComExterior value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComExterior read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComExterior given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComExterior
   * @throws IOException if the JSON string is invalid with respect to ComExterior
   */
  public static ComExterior fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComExterior.class);
  }

  /**
   * Convert an instance of ComExterior to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

