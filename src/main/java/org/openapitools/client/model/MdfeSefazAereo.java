/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Informações do modal Aéreo.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class MdfeSefazAereo {
  public static final String SERIALIZED_NAME_NAC = "nac";
  @SerializedName(SERIALIZED_NAME_NAC)
  @javax.annotation.Nullable
  private String nac;

  public static final String SERIALIZED_NAME_MATR = "matr";
  @SerializedName(SERIALIZED_NAME_MATR)
  @javax.annotation.Nullable
  private String matr;

  public static final String SERIALIZED_NAME_N_VOO = "nVoo";
  @SerializedName(SERIALIZED_NAME_N_VOO)
  @javax.annotation.Nullable
  private String nVoo;

  public static final String SERIALIZED_NAME_C_AER_EMB = "cAerEmb";
  @SerializedName(SERIALIZED_NAME_C_AER_EMB)
  @javax.annotation.Nullable
  private String cAerEmb;

  public static final String SERIALIZED_NAME_C_AER_DES = "cAerDes";
  @SerializedName(SERIALIZED_NAME_C_AER_DES)
  @javax.annotation.Nullable
  private String cAerDes;

  public static final String SERIALIZED_NAME_D_VOO = "dVoo";
  @SerializedName(SERIALIZED_NAME_D_VOO)
  @javax.annotation.Nullable
  private LocalDate dVoo;

  public MdfeSefazAereo() {
  }

  public MdfeSefazAereo nac(@javax.annotation.Nullable String nac) {
    this.nac = nac;
    return this;
  }

  /**
   * Marca da Nacionalidade da aeronave.
   * @return nac
   */
  @javax.annotation.Nullable
  public String getNac() {
    return nac;
  }

  public void setNac(@javax.annotation.Nullable String nac) {
    this.nac = nac;
  }


  public MdfeSefazAereo matr(@javax.annotation.Nullable String matr) {
    this.matr = matr;
    return this;
  }

  /**
   * Marca de Matrícula da aeronave.
   * @return matr
   */
  @javax.annotation.Nullable
  public String getMatr() {
    return matr;
  }

  public void setMatr(@javax.annotation.Nullable String matr) {
    this.matr = matr;
  }


  public MdfeSefazAereo nVoo(@javax.annotation.Nullable String nVoo) {
    this.nVoo = nVoo;
    return this;
  }

  /**
   * Número do Voo.  Formato &#x3D; AB1234, sendo AB a designação da empresa e 1234 o número do voo. Quando não for possível incluir as marcas de nacionalidade e matrícula sem hífen.
   * @return nVoo
   */
  @javax.annotation.Nullable
  public String getnVoo() {
    return nVoo;
  }

  public void setnVoo(@javax.annotation.Nullable String nVoo) {
    this.nVoo = nVoo;
  }


  public MdfeSefazAereo cAerEmb(@javax.annotation.Nullable String cAerEmb) {
    this.cAerEmb = cAerEmb;
    return this;
  }

  /**
   * Aeródromo de Embarque.  O código de três letras IATA do aeroporto de partida deverá ser incluído como primeira anotação. Quando não for possível, utilizar a sigla OACI.
   * @return cAerEmb
   */
  @javax.annotation.Nullable
  public String getcAerEmb() {
    return cAerEmb;
  }

  public void setcAerEmb(@javax.annotation.Nullable String cAerEmb) {
    this.cAerEmb = cAerEmb;
  }


  public MdfeSefazAereo cAerDes(@javax.annotation.Nullable String cAerDes) {
    this.cAerDes = cAerDes;
    return this;
  }

  /**
   * Aeródromo de Destino.  O código de três letras IATA do aeroporto de destino deverá ser incluído como primeira anotação. Quando não for possível, utilizar a sigla OACI.
   * @return cAerDes
   */
  @javax.annotation.Nullable
  public String getcAerDes() {
    return cAerDes;
  }

  public void setcAerDes(@javax.annotation.Nullable String cAerDes) {
    this.cAerDes = cAerDes;
  }


  public MdfeSefazAereo dVoo(@javax.annotation.Nullable LocalDate dVoo) {
    this.dVoo = dVoo;
    return this;
  }

  /**
   * Data do Voo.  Formato AAAA-MM-DD.
   * @return dVoo
   */
  @javax.annotation.Nullable
  public LocalDate getdVoo() {
    return dVoo;
  }

  public void setdVoo(@javax.annotation.Nullable LocalDate dVoo) {
    this.dVoo = dVoo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MdfeSefazAereo mdfeSefazAereo = (MdfeSefazAereo) o;
    return Objects.equals(this.nac, mdfeSefazAereo.nac) &&
        Objects.equals(this.matr, mdfeSefazAereo.matr) &&
        Objects.equals(this.nVoo, mdfeSefazAereo.nVoo) &&
        Objects.equals(this.cAerEmb, mdfeSefazAereo.cAerEmb) &&
        Objects.equals(this.cAerDes, mdfeSefazAereo.cAerDes) &&
        Objects.equals(this.dVoo, mdfeSefazAereo.dVoo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nac, matr, nVoo, cAerEmb, cAerDes, dVoo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MdfeSefazAereo {\n");
    sb.append("    nac: ").append(toIndentedString(nac)).append("\n");
    sb.append("    matr: ").append(toIndentedString(matr)).append("\n");
    sb.append("    nVoo: ").append(toIndentedString(nVoo)).append("\n");
    sb.append("    cAerEmb: ").append(toIndentedString(cAerEmb)).append("\n");
    sb.append("    cAerDes: ").append(toIndentedString(cAerDes)).append("\n");
    sb.append("    dVoo: ").append(toIndentedString(dVoo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nac");
    openapiFields.add("matr");
    openapiFields.add("nVoo");
    openapiFields.add("cAerEmb");
    openapiFields.add("cAerDes");
    openapiFields.add("dVoo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nac");
    openapiRequiredFields.add("matr");
    openapiRequiredFields.add("nVoo");
    openapiRequiredFields.add("cAerEmb");
    openapiRequiredFields.add("cAerDes");
    openapiRequiredFields.add("dVoo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MdfeSefazAereo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MdfeSefazAereo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MdfeSefazAereo is not found in the empty JSON string", MdfeSefazAereo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MdfeSefazAereo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MdfeSefazAereo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MdfeSefazAereo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nac") != null && !jsonObj.get("nac").isJsonNull()) && !jsonObj.get("nac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nac").toString()));
      }
      if ((jsonObj.get("matr") != null && !jsonObj.get("matr").isJsonNull()) && !jsonObj.get("matr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matr").toString()));
      }
      if ((jsonObj.get("nVoo") != null && !jsonObj.get("nVoo").isJsonNull()) && !jsonObj.get("nVoo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nVoo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nVoo").toString()));
      }
      if ((jsonObj.get("cAerEmb") != null && !jsonObj.get("cAerEmb").isJsonNull()) && !jsonObj.get("cAerEmb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cAerEmb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cAerEmb").toString()));
      }
      if ((jsonObj.get("cAerDes") != null && !jsonObj.get("cAerDes").isJsonNull()) && !jsonObj.get("cAerDes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cAerDes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cAerDes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MdfeSefazAereo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MdfeSefazAereo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MdfeSefazAereo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MdfeSefazAereo.class));

       return (TypeAdapter<T>) new TypeAdapter<MdfeSefazAereo>() {
           @Override
           public void write(JsonWriter out, MdfeSefazAereo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MdfeSefazAereo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MdfeSefazAereo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MdfeSefazAereo
   * @throws IOException if the JSON string is invalid with respect to MdfeSefazAereo
   */
  public static MdfeSefazAereo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MdfeSefazAereo.class);
  }

  /**
   * Convert an instance of MdfeSefazAereo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

