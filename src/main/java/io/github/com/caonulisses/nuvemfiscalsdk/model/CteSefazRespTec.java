/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Informações do Responsável Técnico pela emissão do DF-e.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazRespTec {
  public static final String SERIALIZED_NAME_C_N_P_J = "CNPJ";
  @SerializedName(SERIALIZED_NAME_C_N_P_J)
  @javax.annotation.Nullable
  private String CNPJ;

  public static final String SERIALIZED_NAME_X_CONTATO = "xContato";
  @SerializedName(SERIALIZED_NAME_X_CONTATO)
  @javax.annotation.Nullable
  private String xContato;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_FONE = "fone";
  @SerializedName(SERIALIZED_NAME_FONE)
  @javax.annotation.Nullable
  private String fone;

  public static final String SERIALIZED_NAME_ID_C_S_R_T = "idCSRT";
  @SerializedName(SERIALIZED_NAME_ID_C_S_R_T)
  @javax.annotation.Nullable
  private Integer idCSRT;

  public static final String SERIALIZED_NAME_HASH_C_S_R_T = "hashCSRT";
  @SerializedName(SERIALIZED_NAME_HASH_C_S_R_T)
  @javax.annotation.Nullable
  private String hashCSRT;

  public CteSefazRespTec() {
  }

  public CteSefazRespTec CNPJ(@javax.annotation.Nullable String CNPJ) {
    this.CNPJ = CNPJ;
    return this;
  }

  /**
   * CNPJ da pessoa jurídica responsável técnica pelo sistema utilizado na emissão do documento fiscal eletrônico.  Informar o CNPJ da pessoa jurídica desenvolvedora do sistema utilizado na emissão do documento fiscal eletrônico.
   * @return CNPJ
   */
  @javax.annotation.Nullable
  public String getCNPJ() {
    return CNPJ;
  }

  public void setCNPJ(@javax.annotation.Nullable String CNPJ) {
    this.CNPJ = CNPJ;
  }


  public CteSefazRespTec xContato(@javax.annotation.Nullable String xContato) {
    this.xContato = xContato;
    return this;
  }

  /**
   * Nome da pessoa a ser contatada.  Informar o nome da pessoa a ser contatada na empresa desenvolvedora do sistema utilizado na emissão do documento fiscal eletrônico. No caso de pessoa física, informar o respectivo nome.
   * @return xContato
   */
  @javax.annotation.Nullable
  public String getxContato() {
    return xContato;
  }

  public void setxContato(@javax.annotation.Nullable String xContato) {
    this.xContato = xContato;
  }


  public CteSefazRespTec email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * Email da pessoa jurídica a ser contatada.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public CteSefazRespTec fone(@javax.annotation.Nullable String fone) {
    this.fone = fone;
    return this;
  }

  /**
   * Telefone da pessoa jurídica a ser contatada.  Preencher com o Código DDD + número do telefone.
   * @return fone
   */
  @javax.annotation.Nullable
  public String getFone() {
    return fone;
  }

  public void setFone(@javax.annotation.Nullable String fone) {
    this.fone = fone;
  }


  public CteSefazRespTec idCSRT(@javax.annotation.Nullable Integer idCSRT) {
    this.idCSRT = idCSRT;
    return this;
  }

  /**
   * Identificador do código de segurança do responsável técnico.  Identificador do CSRT utilizado para geração do hash.
   * minimum: 0
   * maximum: 999
   * @return idCSRT
   */
  @javax.annotation.Nullable
  public Integer getIdCSRT() {
    return idCSRT;
  }

  public void setIdCSRT(@javax.annotation.Nullable Integer idCSRT) {
    this.idCSRT = idCSRT;
  }


  public CteSefazRespTec hashCSRT(@javax.annotation.Nullable String hashCSRT) {
    this.hashCSRT = hashCSRT;
    return this;
  }

  /**
   * Hash do token do código de segurança do responsável técnico.  O hashCSRT é o resultado das funções SHA-1 e base64 do token CSRT fornecido pelo fisco + chave de acesso do DF-e. (Implementação em futura NT)  Observação: 28 caracteres são representados no schema como 20 bytes do tipo base64Binary.
   * @return hashCSRT
   */
  @javax.annotation.Nullable
  public String getHashCSRT() {
    return hashCSRT;
  }

  public void setHashCSRT(@javax.annotation.Nullable String hashCSRT) {
    this.hashCSRT = hashCSRT;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazRespTec cteSefazRespTec = (CteSefazRespTec) o;
    return Objects.equals(this.CNPJ, cteSefazRespTec.CNPJ) &&
        Objects.equals(this.xContato, cteSefazRespTec.xContato) &&
        Objects.equals(this.email, cteSefazRespTec.email) &&
        Objects.equals(this.fone, cteSefazRespTec.fone) &&
        Objects.equals(this.idCSRT, cteSefazRespTec.idCSRT) &&
        Objects.equals(this.hashCSRT, cteSefazRespTec.hashCSRT);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(CNPJ, xContato, email, fone, idCSRT, hashCSRT);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazRespTec {\n");
    sb.append("    CNPJ: ").append(toIndentedString(CNPJ)).append("\n");
    sb.append("    xContato: ").append(toIndentedString(xContato)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fone: ").append(toIndentedString(fone)).append("\n");
    sb.append("    idCSRT: ").append(toIndentedString(idCSRT)).append("\n");
    sb.append("    hashCSRT: ").append(toIndentedString(hashCSRT)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CNPJ");
    openapiFields.add("xContato");
    openapiFields.add("email");
    openapiFields.add("fone");
    openapiFields.add("idCSRT");
    openapiFields.add("hashCSRT");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CNPJ");
    openapiRequiredFields.add("xContato");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("fone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazRespTec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazRespTec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazRespTec is not found in the empty JSON string", CteSefazRespTec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazRespTec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazRespTec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CteSefazRespTec.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CNPJ") != null && !jsonObj.get("CNPJ").isJsonNull()) && !jsonObj.get("CNPJ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CNPJ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CNPJ").toString()));
      }
      if ((jsonObj.get("xContato") != null && !jsonObj.get("xContato").isJsonNull()) && !jsonObj.get("xContato").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xContato` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xContato").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("fone") != null && !jsonObj.get("fone").isJsonNull()) && !jsonObj.get("fone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fone").toString()));
      }
      if ((jsonObj.get("hashCSRT") != null && !jsonObj.get("hashCSRT").isJsonNull()) && !jsonObj.get("hashCSRT").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashCSRT` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashCSRT").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazRespTec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazRespTec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazRespTec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazRespTec.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazRespTec>() {
           @Override
           public void write(JsonWriter out, CteSefazRespTec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazRespTec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazRespTec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazRespTec
   * @throws IOException if the JSON string is invalid with respect to CteSefazRespTec
   */
  public static CteSefazRespTec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazRespTec.class);
  }

  /**
   * Convert an instance of CteSefazRespTec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

