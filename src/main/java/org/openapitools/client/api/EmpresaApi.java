/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Empresa;
import org.openapitools.client.model.EmpresaCertificado;
import org.openapitools.client.model.EmpresaConfigCte;
import org.openapitools.client.model.EmpresaConfigDistribuicaoNfe;
import org.openapitools.client.model.EmpresaConfigMdfe;
import org.openapitools.client.model.EmpresaConfigNfce;
import org.openapitools.client.model.EmpresaConfigNfcom;
import org.openapitools.client.model.EmpresaConfigNfe;
import org.openapitools.client.model.EmpresaConfigNfse;
import org.openapitools.client.model.EmpresaListagem;
import org.openapitools.client.model.EmpresaPedidoCadastroCertificado;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmpresaApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmpresaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmpresaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for alterarConfigCte
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alterarConfigCteCall(String cpfCnpj, EmpresaConfigCte body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/cte"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alterarConfigCteValidateBeforeCall(String cpfCnpj, EmpresaConfigCte body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling alterarConfigCte(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling alterarConfigCte(Async)");
        }

        return alterarConfigCteCall(cpfCnpj, body, _callback);

    }

    /**
     * Alterar configuração de CT-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return EmpresaConfigCte
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaConfigCte alterarConfigCte(String cpfCnpj, EmpresaConfigCte body) throws ApiException {
        ApiResponse<EmpresaConfigCte> localVarResp = alterarConfigCteWithHttpInfo(cpfCnpj, body);
        return localVarResp.getData();
    }

    /**
     * Alterar configuração de CT-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return ApiResponse&lt;EmpresaConfigCte&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaConfigCte> alterarConfigCteWithHttpInfo(String cpfCnpj, EmpresaConfigCte body) throws ApiException {
        okhttp3.Call localVarCall = alterarConfigCteValidateBeforeCall(cpfCnpj, body, null);
        Type localVarReturnType = new TypeToken<EmpresaConfigCte>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Alterar configuração de CT-e (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alterarConfigCteAsync(String cpfCnpj, EmpresaConfigCte body, final ApiCallback<EmpresaConfigCte> _callback) throws ApiException {

        okhttp3.Call localVarCall = alterarConfigCteValidateBeforeCall(cpfCnpj, body, _callback);
        Type localVarReturnType = new TypeToken<EmpresaConfigCte>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alterarConfigDistribuicaoNfe
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alterarConfigDistribuicaoNfeCall(String cpfCnpj, EmpresaConfigDistribuicaoNfe body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/distnfe"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alterarConfigDistribuicaoNfeValidateBeforeCall(String cpfCnpj, EmpresaConfigDistribuicaoNfe body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling alterarConfigDistribuicaoNfe(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling alterarConfigDistribuicaoNfe(Async)");
        }

        return alterarConfigDistribuicaoNfeCall(cpfCnpj, body, _callback);

    }

    /**
     * Alterar configuração de Distribuição de NF-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return EmpresaConfigDistribuicaoNfe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaConfigDistribuicaoNfe alterarConfigDistribuicaoNfe(String cpfCnpj, EmpresaConfigDistribuicaoNfe body) throws ApiException {
        ApiResponse<EmpresaConfigDistribuicaoNfe> localVarResp = alterarConfigDistribuicaoNfeWithHttpInfo(cpfCnpj, body);
        return localVarResp.getData();
    }

    /**
     * Alterar configuração de Distribuição de NF-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return ApiResponse&lt;EmpresaConfigDistribuicaoNfe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaConfigDistribuicaoNfe> alterarConfigDistribuicaoNfeWithHttpInfo(String cpfCnpj, EmpresaConfigDistribuicaoNfe body) throws ApiException {
        okhttp3.Call localVarCall = alterarConfigDistribuicaoNfeValidateBeforeCall(cpfCnpj, body, null);
        Type localVarReturnType = new TypeToken<EmpresaConfigDistribuicaoNfe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Alterar configuração de Distribuição de NF-e (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alterarConfigDistribuicaoNfeAsync(String cpfCnpj, EmpresaConfigDistribuicaoNfe body, final ApiCallback<EmpresaConfigDistribuicaoNfe> _callback) throws ApiException {

        okhttp3.Call localVarCall = alterarConfigDistribuicaoNfeValidateBeforeCall(cpfCnpj, body, _callback);
        Type localVarReturnType = new TypeToken<EmpresaConfigDistribuicaoNfe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alterarConfigMdfe
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alterarConfigMdfeCall(String cpfCnpj, EmpresaConfigMdfe body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/mdfe"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alterarConfigMdfeValidateBeforeCall(String cpfCnpj, EmpresaConfigMdfe body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling alterarConfigMdfe(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling alterarConfigMdfe(Async)");
        }

        return alterarConfigMdfeCall(cpfCnpj, body, _callback);

    }

    /**
     * Alterar configuração de MDF-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return EmpresaConfigMdfe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaConfigMdfe alterarConfigMdfe(String cpfCnpj, EmpresaConfigMdfe body) throws ApiException {
        ApiResponse<EmpresaConfigMdfe> localVarResp = alterarConfigMdfeWithHttpInfo(cpfCnpj, body);
        return localVarResp.getData();
    }

    /**
     * Alterar configuração de MDF-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return ApiResponse&lt;EmpresaConfigMdfe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaConfigMdfe> alterarConfigMdfeWithHttpInfo(String cpfCnpj, EmpresaConfigMdfe body) throws ApiException {
        okhttp3.Call localVarCall = alterarConfigMdfeValidateBeforeCall(cpfCnpj, body, null);
        Type localVarReturnType = new TypeToken<EmpresaConfigMdfe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Alterar configuração de MDF-e (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alterarConfigMdfeAsync(String cpfCnpj, EmpresaConfigMdfe body, final ApiCallback<EmpresaConfigMdfe> _callback) throws ApiException {

        okhttp3.Call localVarCall = alterarConfigMdfeValidateBeforeCall(cpfCnpj, body, _callback);
        Type localVarReturnType = new TypeToken<EmpresaConfigMdfe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alterarConfigNfce
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alterarConfigNfceCall(String cpfCnpj, EmpresaConfigNfce body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/nfce"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alterarConfigNfceValidateBeforeCall(String cpfCnpj, EmpresaConfigNfce body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling alterarConfigNfce(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling alterarConfigNfce(Async)");
        }

        return alterarConfigNfceCall(cpfCnpj, body, _callback);

    }

    /**
     * Alterar configuração de NFC-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return EmpresaConfigNfce
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaConfigNfce alterarConfigNfce(String cpfCnpj, EmpresaConfigNfce body) throws ApiException {
        ApiResponse<EmpresaConfigNfce> localVarResp = alterarConfigNfceWithHttpInfo(cpfCnpj, body);
        return localVarResp.getData();
    }

    /**
     * Alterar configuração de NFC-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return ApiResponse&lt;EmpresaConfigNfce&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaConfigNfce> alterarConfigNfceWithHttpInfo(String cpfCnpj, EmpresaConfigNfce body) throws ApiException {
        okhttp3.Call localVarCall = alterarConfigNfceValidateBeforeCall(cpfCnpj, body, null);
        Type localVarReturnType = new TypeToken<EmpresaConfigNfce>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Alterar configuração de NFC-e (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alterarConfigNfceAsync(String cpfCnpj, EmpresaConfigNfce body, final ApiCallback<EmpresaConfigNfce> _callback) throws ApiException {

        okhttp3.Call localVarCall = alterarConfigNfceValidateBeforeCall(cpfCnpj, body, _callback);
        Type localVarReturnType = new TypeToken<EmpresaConfigNfce>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alterarConfigNfcom
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alterarConfigNfcomCall(String cpfCnpj, EmpresaConfigNfcom body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/nfcom"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alterarConfigNfcomValidateBeforeCall(String cpfCnpj, EmpresaConfigNfcom body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling alterarConfigNfcom(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling alterarConfigNfcom(Async)");
        }

        return alterarConfigNfcomCall(cpfCnpj, body, _callback);

    }

    /**
     * Alterar configuração de NFCom
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return EmpresaConfigNfcom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaConfigNfcom alterarConfigNfcom(String cpfCnpj, EmpresaConfigNfcom body) throws ApiException {
        ApiResponse<EmpresaConfigNfcom> localVarResp = alterarConfigNfcomWithHttpInfo(cpfCnpj, body);
        return localVarResp.getData();
    }

    /**
     * Alterar configuração de NFCom
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return ApiResponse&lt;EmpresaConfigNfcom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaConfigNfcom> alterarConfigNfcomWithHttpInfo(String cpfCnpj, EmpresaConfigNfcom body) throws ApiException {
        okhttp3.Call localVarCall = alterarConfigNfcomValidateBeforeCall(cpfCnpj, body, null);
        Type localVarReturnType = new TypeToken<EmpresaConfigNfcom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Alterar configuração de NFCom (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alterarConfigNfcomAsync(String cpfCnpj, EmpresaConfigNfcom body, final ApiCallback<EmpresaConfigNfcom> _callback) throws ApiException {

        okhttp3.Call localVarCall = alterarConfigNfcomValidateBeforeCall(cpfCnpj, body, _callback);
        Type localVarReturnType = new TypeToken<EmpresaConfigNfcom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alterarConfigNfe
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alterarConfigNfeCall(String cpfCnpj, EmpresaConfigNfe body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/nfe"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alterarConfigNfeValidateBeforeCall(String cpfCnpj, EmpresaConfigNfe body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling alterarConfigNfe(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling alterarConfigNfe(Async)");
        }

        return alterarConfigNfeCall(cpfCnpj, body, _callback);

    }

    /**
     * Alterar configuração de NF-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return EmpresaConfigNfe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaConfigNfe alterarConfigNfe(String cpfCnpj, EmpresaConfigNfe body) throws ApiException {
        ApiResponse<EmpresaConfigNfe> localVarResp = alterarConfigNfeWithHttpInfo(cpfCnpj, body);
        return localVarResp.getData();
    }

    /**
     * Alterar configuração de NF-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return ApiResponse&lt;EmpresaConfigNfe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaConfigNfe> alterarConfigNfeWithHttpInfo(String cpfCnpj, EmpresaConfigNfe body) throws ApiException {
        okhttp3.Call localVarCall = alterarConfigNfeValidateBeforeCall(cpfCnpj, body, null);
        Type localVarReturnType = new TypeToken<EmpresaConfigNfe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Alterar configuração de NF-e (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alterarConfigNfeAsync(String cpfCnpj, EmpresaConfigNfe body, final ApiCallback<EmpresaConfigNfe> _callback) throws ApiException {

        okhttp3.Call localVarCall = alterarConfigNfeValidateBeforeCall(cpfCnpj, body, _callback);
        Type localVarReturnType = new TypeToken<EmpresaConfigNfe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alterarConfigNfse
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alterarConfigNfseCall(String cpfCnpj, EmpresaConfigNfse body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/nfse"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alterarConfigNfseValidateBeforeCall(String cpfCnpj, EmpresaConfigNfse body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling alterarConfigNfse(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling alterarConfigNfse(Async)");
        }

        return alterarConfigNfseCall(cpfCnpj, body, _callback);

    }

    /**
     * Alterar configuração de NFS-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return EmpresaConfigNfse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaConfigNfse alterarConfigNfse(String cpfCnpj, EmpresaConfigNfse body) throws ApiException {
        ApiResponse<EmpresaConfigNfse> localVarResp = alterarConfigNfseWithHttpInfo(cpfCnpj, body);
        return localVarResp.getData();
    }

    /**
     * Alterar configuração de NFS-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return ApiResponse&lt;EmpresaConfigNfse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaConfigNfse> alterarConfigNfseWithHttpInfo(String cpfCnpj, EmpresaConfigNfse body) throws ApiException {
        okhttp3.Call localVarCall = alterarConfigNfseValidateBeforeCall(cpfCnpj, body, null);
        Type localVarReturnType = new TypeToken<EmpresaConfigNfse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Alterar configuração de NFS-e (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alterarConfigNfseAsync(String cpfCnpj, EmpresaConfigNfse body, final ApiCallback<EmpresaConfigNfse> _callback) throws ApiException {

        okhttp3.Call localVarCall = alterarConfigNfseValidateBeforeCall(cpfCnpj, body, _callback);
        Type localVarReturnType = new TypeToken<EmpresaConfigNfse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for atualizarEmpresa
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call atualizarEmpresaCall(String cpfCnpj, Empresa body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call atualizarEmpresaValidateBeforeCall(String cpfCnpj, Empresa body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling atualizarEmpresa(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling atualizarEmpresa(Async)");
        }

        return atualizarEmpresaCall(cpfCnpj, body, _callback);

    }

    /**
     * Alterar empresa
     * Altera o cadastro de uma empresa (emitente/prestador) que esteja associada a sua conta.  Nesse método, por tratar-se de um PUT, caso algum campo não seja informado, o valor dele será apagado.
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return Empresa
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Empresa atualizarEmpresa(String cpfCnpj, Empresa body) throws ApiException {
        ApiResponse<Empresa> localVarResp = atualizarEmpresaWithHttpInfo(cpfCnpj, body);
        return localVarResp.getData();
    }

    /**
     * Alterar empresa
     * Altera o cadastro de uma empresa (emitente/prestador) que esteja associada a sua conta.  Nesse método, por tratar-se de um PUT, caso algum campo não seja informado, o valor dele será apagado.
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return ApiResponse&lt;Empresa&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Empresa> atualizarEmpresaWithHttpInfo(String cpfCnpj, Empresa body) throws ApiException {
        okhttp3.Call localVarCall = atualizarEmpresaValidateBeforeCall(cpfCnpj, body, null);
        Type localVarReturnType = new TypeToken<Empresa>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Alterar empresa (asynchronously)
     * Altera o cadastro de uma empresa (emitente/prestador) que esteja associada a sua conta.  Nesse método, por tratar-se de um PUT, caso algum campo não seja informado, o valor dele será apagado.
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call atualizarEmpresaAsync(String cpfCnpj, Empresa body, final ApiCallback<Empresa> _callback) throws ApiException {

        okhttp3.Call localVarCall = atualizarEmpresaValidateBeforeCall(cpfCnpj, body, _callback);
        Type localVarReturnType = new TypeToken<Empresa>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for baixarLogotipoEmpresa
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call baixarLogotipoEmpresaCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/logotipo"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call baixarLogotipoEmpresaValidateBeforeCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling baixarLogotipoEmpresa(Async)");
        }

        return baixarLogotipoEmpresaCall(cpfCnpj, _callback);

    }

    /**
     * Baixar logotipo
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public File baixarLogotipoEmpresa(String cpfCnpj) throws ApiException {
        ApiResponse<File> localVarResp = baixarLogotipoEmpresaWithHttpInfo(cpfCnpj);
        return localVarResp.getData();
    }

    /**
     * Baixar logotipo
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> baixarLogotipoEmpresaWithHttpInfo(String cpfCnpj) throws ApiException {
        okhttp3.Call localVarCall = baixarLogotipoEmpresaValidateBeforeCall(cpfCnpj, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Baixar logotipo (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call baixarLogotipoEmpresaAsync(String cpfCnpj, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = baixarLogotipoEmpresaValidateBeforeCall(cpfCnpj, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cadastrarCertificadoEmpresa
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cadastrarCertificadoEmpresaCall(String cpfCnpj, EmpresaPedidoCadastroCertificado body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/certificado"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cadastrarCertificadoEmpresaValidateBeforeCall(String cpfCnpj, EmpresaPedidoCadastroCertificado body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling cadastrarCertificadoEmpresa(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling cadastrarCertificadoEmpresa(Async)");
        }

        return cadastrarCertificadoEmpresaCall(cpfCnpj, body, _callback);

    }

    /**
     * Cadastrar certificado
     * Cadastre ou atualize um certificado digital e vincule a sua empresa, para que possa iniciar a emissão de notas.  * No parâmetro &#x60;certificado&#x60;, envie o binário do certificado digital (.pfx ou .p12) codificado em **base64**.
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return EmpresaCertificado
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaCertificado cadastrarCertificadoEmpresa(String cpfCnpj, EmpresaPedidoCadastroCertificado body) throws ApiException {
        ApiResponse<EmpresaCertificado> localVarResp = cadastrarCertificadoEmpresaWithHttpInfo(cpfCnpj, body);
        return localVarResp.getData();
    }

    /**
     * Cadastrar certificado
     * Cadastre ou atualize um certificado digital e vincule a sua empresa, para que possa iniciar a emissão de notas.  * No parâmetro &#x60;certificado&#x60;, envie o binário do certificado digital (.pfx ou .p12) codificado em **base64**.
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @return ApiResponse&lt;EmpresaCertificado&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaCertificado> cadastrarCertificadoEmpresaWithHttpInfo(String cpfCnpj, EmpresaPedidoCadastroCertificado body) throws ApiException {
        okhttp3.Call localVarCall = cadastrarCertificadoEmpresaValidateBeforeCall(cpfCnpj, body, null);
        Type localVarReturnType = new TypeToken<EmpresaCertificado>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cadastrar certificado (asynchronously)
     * Cadastre ou atualize um certificado digital e vincule a sua empresa, para que possa iniciar a emissão de notas.  * No parâmetro &#x60;certificado&#x60;, envie o binário do certificado digital (.pfx ou .p12) codificado em **base64**.
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cadastrarCertificadoEmpresaAsync(String cpfCnpj, EmpresaPedidoCadastroCertificado body, final ApiCallback<EmpresaCertificado> _callback) throws ApiException {

        okhttp3.Call localVarCall = cadastrarCertificadoEmpresaValidateBeforeCall(cpfCnpj, body, _callback);
        Type localVarReturnType = new TypeToken<EmpresaCertificado>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consultarCertificadoEmpresa
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarCertificadoEmpresaCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/certificado"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consultarCertificadoEmpresaValidateBeforeCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling consultarCertificadoEmpresa(Async)");
        }

        return consultarCertificadoEmpresaCall(cpfCnpj, _callback);

    }

    /**
     * Consultar certificado
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return EmpresaCertificado
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaCertificado consultarCertificadoEmpresa(String cpfCnpj) throws ApiException {
        ApiResponse<EmpresaCertificado> localVarResp = consultarCertificadoEmpresaWithHttpInfo(cpfCnpj);
        return localVarResp.getData();
    }

    /**
     * Consultar certificado
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return ApiResponse&lt;EmpresaCertificado&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaCertificado> consultarCertificadoEmpresaWithHttpInfo(String cpfCnpj) throws ApiException {
        okhttp3.Call localVarCall = consultarCertificadoEmpresaValidateBeforeCall(cpfCnpj, null);
        Type localVarReturnType = new TypeToken<EmpresaCertificado>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Consultar certificado (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarCertificadoEmpresaAsync(String cpfCnpj, final ApiCallback<EmpresaCertificado> _callback) throws ApiException {

        okhttp3.Call localVarCall = consultarCertificadoEmpresaValidateBeforeCall(cpfCnpj, _callback);
        Type localVarReturnType = new TypeToken<EmpresaCertificado>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consultarConfigCte
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarConfigCteCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/cte"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consultarConfigCteValidateBeforeCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling consultarConfigCte(Async)");
        }

        return consultarConfigCteCall(cpfCnpj, _callback);

    }

    /**
     * Consultar configuração de CT-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return EmpresaConfigCte
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaConfigCte consultarConfigCte(String cpfCnpj) throws ApiException {
        ApiResponse<EmpresaConfigCte> localVarResp = consultarConfigCteWithHttpInfo(cpfCnpj);
        return localVarResp.getData();
    }

    /**
     * Consultar configuração de CT-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return ApiResponse&lt;EmpresaConfigCte&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaConfigCte> consultarConfigCteWithHttpInfo(String cpfCnpj) throws ApiException {
        okhttp3.Call localVarCall = consultarConfigCteValidateBeforeCall(cpfCnpj, null);
        Type localVarReturnType = new TypeToken<EmpresaConfigCte>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Consultar configuração de CT-e (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarConfigCteAsync(String cpfCnpj, final ApiCallback<EmpresaConfigCte> _callback) throws ApiException {

        okhttp3.Call localVarCall = consultarConfigCteValidateBeforeCall(cpfCnpj, _callback);
        Type localVarReturnType = new TypeToken<EmpresaConfigCte>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consultarConfigDistribuicaoNfe
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarConfigDistribuicaoNfeCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/distnfe"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consultarConfigDistribuicaoNfeValidateBeforeCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling consultarConfigDistribuicaoNfe(Async)");
        }

        return consultarConfigDistribuicaoNfeCall(cpfCnpj, _callback);

    }

    /**
     * Consultar configuração de Distribuição de NF-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return EmpresaConfigDistribuicaoNfe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaConfigDistribuicaoNfe consultarConfigDistribuicaoNfe(String cpfCnpj) throws ApiException {
        ApiResponse<EmpresaConfigDistribuicaoNfe> localVarResp = consultarConfigDistribuicaoNfeWithHttpInfo(cpfCnpj);
        return localVarResp.getData();
    }

    /**
     * Consultar configuração de Distribuição de NF-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return ApiResponse&lt;EmpresaConfigDistribuicaoNfe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaConfigDistribuicaoNfe> consultarConfigDistribuicaoNfeWithHttpInfo(String cpfCnpj) throws ApiException {
        okhttp3.Call localVarCall = consultarConfigDistribuicaoNfeValidateBeforeCall(cpfCnpj, null);
        Type localVarReturnType = new TypeToken<EmpresaConfigDistribuicaoNfe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Consultar configuração de Distribuição de NF-e (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarConfigDistribuicaoNfeAsync(String cpfCnpj, final ApiCallback<EmpresaConfigDistribuicaoNfe> _callback) throws ApiException {

        okhttp3.Call localVarCall = consultarConfigDistribuicaoNfeValidateBeforeCall(cpfCnpj, _callback);
        Type localVarReturnType = new TypeToken<EmpresaConfigDistribuicaoNfe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consultarConfigMdfe
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarConfigMdfeCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/mdfe"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consultarConfigMdfeValidateBeforeCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling consultarConfigMdfe(Async)");
        }

        return consultarConfigMdfeCall(cpfCnpj, _callback);

    }

    /**
     * Consultar configuração de MDF-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return EmpresaConfigMdfe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaConfigMdfe consultarConfigMdfe(String cpfCnpj) throws ApiException {
        ApiResponse<EmpresaConfigMdfe> localVarResp = consultarConfigMdfeWithHttpInfo(cpfCnpj);
        return localVarResp.getData();
    }

    /**
     * Consultar configuração de MDF-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return ApiResponse&lt;EmpresaConfigMdfe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaConfigMdfe> consultarConfigMdfeWithHttpInfo(String cpfCnpj) throws ApiException {
        okhttp3.Call localVarCall = consultarConfigMdfeValidateBeforeCall(cpfCnpj, null);
        Type localVarReturnType = new TypeToken<EmpresaConfigMdfe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Consultar configuração de MDF-e (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarConfigMdfeAsync(String cpfCnpj, final ApiCallback<EmpresaConfigMdfe> _callback) throws ApiException {

        okhttp3.Call localVarCall = consultarConfigMdfeValidateBeforeCall(cpfCnpj, _callback);
        Type localVarReturnType = new TypeToken<EmpresaConfigMdfe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consultarConfigNfce
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarConfigNfceCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/nfce"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consultarConfigNfceValidateBeforeCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling consultarConfigNfce(Async)");
        }

        return consultarConfigNfceCall(cpfCnpj, _callback);

    }

    /**
     * Consultar configuração de NFC-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return EmpresaConfigNfce
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaConfigNfce consultarConfigNfce(String cpfCnpj) throws ApiException {
        ApiResponse<EmpresaConfigNfce> localVarResp = consultarConfigNfceWithHttpInfo(cpfCnpj);
        return localVarResp.getData();
    }

    /**
     * Consultar configuração de NFC-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return ApiResponse&lt;EmpresaConfigNfce&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaConfigNfce> consultarConfigNfceWithHttpInfo(String cpfCnpj) throws ApiException {
        okhttp3.Call localVarCall = consultarConfigNfceValidateBeforeCall(cpfCnpj, null);
        Type localVarReturnType = new TypeToken<EmpresaConfigNfce>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Consultar configuração de NFC-e (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarConfigNfceAsync(String cpfCnpj, final ApiCallback<EmpresaConfigNfce> _callback) throws ApiException {

        okhttp3.Call localVarCall = consultarConfigNfceValidateBeforeCall(cpfCnpj, _callback);
        Type localVarReturnType = new TypeToken<EmpresaConfigNfce>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consultarConfigNfcom
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarConfigNfcomCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/nfcom"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consultarConfigNfcomValidateBeforeCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling consultarConfigNfcom(Async)");
        }

        return consultarConfigNfcomCall(cpfCnpj, _callback);

    }

    /**
     * Consultar configuração de NFCom
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return EmpresaConfigNfcom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaConfigNfcom consultarConfigNfcom(String cpfCnpj) throws ApiException {
        ApiResponse<EmpresaConfigNfcom> localVarResp = consultarConfigNfcomWithHttpInfo(cpfCnpj);
        return localVarResp.getData();
    }

    /**
     * Consultar configuração de NFCom
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return ApiResponse&lt;EmpresaConfigNfcom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaConfigNfcom> consultarConfigNfcomWithHttpInfo(String cpfCnpj) throws ApiException {
        okhttp3.Call localVarCall = consultarConfigNfcomValidateBeforeCall(cpfCnpj, null);
        Type localVarReturnType = new TypeToken<EmpresaConfigNfcom>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Consultar configuração de NFCom (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarConfigNfcomAsync(String cpfCnpj, final ApiCallback<EmpresaConfigNfcom> _callback) throws ApiException {

        okhttp3.Call localVarCall = consultarConfigNfcomValidateBeforeCall(cpfCnpj, _callback);
        Type localVarReturnType = new TypeToken<EmpresaConfigNfcom>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consultarConfigNfe
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarConfigNfeCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/nfe"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consultarConfigNfeValidateBeforeCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling consultarConfigNfe(Async)");
        }

        return consultarConfigNfeCall(cpfCnpj, _callback);

    }

    /**
     * Consultar configuração de NF-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return EmpresaConfigNfe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaConfigNfe consultarConfigNfe(String cpfCnpj) throws ApiException {
        ApiResponse<EmpresaConfigNfe> localVarResp = consultarConfigNfeWithHttpInfo(cpfCnpj);
        return localVarResp.getData();
    }

    /**
     * Consultar configuração de NF-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return ApiResponse&lt;EmpresaConfigNfe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaConfigNfe> consultarConfigNfeWithHttpInfo(String cpfCnpj) throws ApiException {
        okhttp3.Call localVarCall = consultarConfigNfeValidateBeforeCall(cpfCnpj, null);
        Type localVarReturnType = new TypeToken<EmpresaConfigNfe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Consultar configuração de NF-e (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarConfigNfeAsync(String cpfCnpj, final ApiCallback<EmpresaConfigNfe> _callback) throws ApiException {

        okhttp3.Call localVarCall = consultarConfigNfeValidateBeforeCall(cpfCnpj, _callback);
        Type localVarReturnType = new TypeToken<EmpresaConfigNfe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consultarConfigNfse
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarConfigNfseCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/nfse"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consultarConfigNfseValidateBeforeCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling consultarConfigNfse(Async)");
        }

        return consultarConfigNfseCall(cpfCnpj, _callback);

    }

    /**
     * Consultar configuração de NFS-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return EmpresaConfigNfse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaConfigNfse consultarConfigNfse(String cpfCnpj) throws ApiException {
        ApiResponse<EmpresaConfigNfse> localVarResp = consultarConfigNfseWithHttpInfo(cpfCnpj);
        return localVarResp.getData();
    }

    /**
     * Consultar configuração de NFS-e
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return ApiResponse&lt;EmpresaConfigNfse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaConfigNfse> consultarConfigNfseWithHttpInfo(String cpfCnpj) throws ApiException {
        okhttp3.Call localVarCall = consultarConfigNfseValidateBeforeCall(cpfCnpj, null);
        Type localVarReturnType = new TypeToken<EmpresaConfigNfse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Consultar configuração de NFS-e (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarConfigNfseAsync(String cpfCnpj, final ApiCallback<EmpresaConfigNfse> _callback) throws ApiException {

        okhttp3.Call localVarCall = consultarConfigNfseValidateBeforeCall(cpfCnpj, _callback);
        Type localVarReturnType = new TypeToken<EmpresaConfigNfse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for consultarEmpresa
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarEmpresaCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consultarEmpresaValidateBeforeCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling consultarEmpresa(Async)");
        }

        return consultarEmpresaCall(cpfCnpj, _callback);

    }

    /**
     * Consultar empresa
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return Empresa
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Empresa consultarEmpresa(String cpfCnpj) throws ApiException {
        ApiResponse<Empresa> localVarResp = consultarEmpresaWithHttpInfo(cpfCnpj);
        return localVarResp.getData();
    }

    /**
     * Consultar empresa
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return ApiResponse&lt;Empresa&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Empresa> consultarEmpresaWithHttpInfo(String cpfCnpj) throws ApiException {
        okhttp3.Call localVarCall = consultarEmpresaValidateBeforeCall(cpfCnpj, null);
        Type localVarReturnType = new TypeToken<Empresa>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Consultar empresa (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarEmpresaAsync(String cpfCnpj, final ApiCallback<Empresa> _callback) throws ApiException {

        okhttp3.Call localVarCall = consultarEmpresaValidateBeforeCall(cpfCnpj, _callback);
        Type localVarReturnType = new TypeToken<Empresa>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for criarEmpresa
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call criarEmpresaCall(Empresa body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/empresas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call criarEmpresaValidateBeforeCall(Empresa body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling criarEmpresa(Async)");
        }

        return criarEmpresaCall(body, _callback);

    }

    /**
     * Cadastrar empresa
     * Cadastre uma nova empresa (emitente ou prestador) à sua conta.
     * @param body  (required)
     * @return Empresa
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Empresa criarEmpresa(Empresa body) throws ApiException {
        ApiResponse<Empresa> localVarResp = criarEmpresaWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Cadastrar empresa
     * Cadastre uma nova empresa (emitente ou prestador) à sua conta.
     * @param body  (required)
     * @return ApiResponse&lt;Empresa&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Empresa> criarEmpresaWithHttpInfo(Empresa body) throws ApiException {
        okhttp3.Call localVarCall = criarEmpresaValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Empresa>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cadastrar empresa (asynchronously)
     * Cadastre uma nova empresa (emitente ou prestador) à sua conta.
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call criarEmpresaAsync(Empresa body, final ApiCallback<Empresa> _callback) throws ApiException {

        okhttp3.Call localVarCall = criarEmpresaValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Empresa>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enviarCertificadoEmpresa
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param input  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enviarCertificadoEmpresaCall(String cpfCnpj, File input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/certificado/upload"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (input != null) {
            localVarFormParams.put("Input", input);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enviarCertificadoEmpresaValidateBeforeCall(String cpfCnpj, File input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling enviarCertificadoEmpresa(Async)");
        }

        return enviarCertificadoEmpresaCall(cpfCnpj, input, _callback);

    }

    /**
     * Upload de certificado
     * Cadastre ou atualize um certificado digital e vincule a sua empresa, para que possa iniciar a emissão de notas.  * Utilize o &#x60;content-type&#x60; igual a &#x60;multipart/form-data&#x60;.  * No parâmetro &#x60;file&#x60;, envie o binário do arquivo (.pfx ou .p12) do certificado digital.  * No parâmetro &#x60;password&#x60;, envie a senha do certificado.
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param input  (optional)
     * @return EmpresaCertificado
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaCertificado enviarCertificadoEmpresa(String cpfCnpj, File input) throws ApiException {
        ApiResponse<EmpresaCertificado> localVarResp = enviarCertificadoEmpresaWithHttpInfo(cpfCnpj, input);
        return localVarResp.getData();
    }

    /**
     * Upload de certificado
     * Cadastre ou atualize um certificado digital e vincule a sua empresa, para que possa iniciar a emissão de notas.  * Utilize o &#x60;content-type&#x60; igual a &#x60;multipart/form-data&#x60;.  * No parâmetro &#x60;file&#x60;, envie o binário do arquivo (.pfx ou .p12) do certificado digital.  * No parâmetro &#x60;password&#x60;, envie a senha do certificado.
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param input  (optional)
     * @return ApiResponse&lt;EmpresaCertificado&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaCertificado> enviarCertificadoEmpresaWithHttpInfo(String cpfCnpj, File input) throws ApiException {
        okhttp3.Call localVarCall = enviarCertificadoEmpresaValidateBeforeCall(cpfCnpj, input, null);
        Type localVarReturnType = new TypeToken<EmpresaCertificado>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload de certificado (asynchronously)
     * Cadastre ou atualize um certificado digital e vincule a sua empresa, para que possa iniciar a emissão de notas.  * Utilize o &#x60;content-type&#x60; igual a &#x60;multipart/form-data&#x60;.  * No parâmetro &#x60;file&#x60;, envie o binário do arquivo (.pfx ou .p12) do certificado digital.  * No parâmetro &#x60;password&#x60;, envie a senha do certificado.
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param input  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enviarCertificadoEmpresaAsync(String cpfCnpj, File input, final ApiCallback<EmpresaCertificado> _callback) throws ApiException {

        okhttp3.Call localVarCall = enviarCertificadoEmpresaValidateBeforeCall(cpfCnpj, input, _callback);
        Type localVarReturnType = new TypeToken<EmpresaCertificado>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enviarLogotipoEmpresa
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param input  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enviarLogotipoEmpresaCall(String cpfCnpj, File input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/logotipo"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (input != null) {
            localVarFormParams.put("Input", input);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enviarLogotipoEmpresaValidateBeforeCall(String cpfCnpj, File input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling enviarLogotipoEmpresa(Async)");
        }

        return enviarLogotipoEmpresaCall(cpfCnpj, input, _callback);

    }

    /**
     * Enviar logotipo
     * Cadastre ou atualize um logotipo e vincule a sua empresa.    **Restrições:**  * Tipos de mídia (MIME) suportados: &#x60;image/png&#x60; e &#x60;image/jpeg&#x60;  * Tamanho máximo do arquivo: 200 KB    **Cenários de uso:**  * Quero que minhas notas sejam impressas com esse logotipo.  * Quero trocar o logotipo utilizado em minhas impressões.
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param input  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void enviarLogotipoEmpresa(String cpfCnpj, File input) throws ApiException {
        enviarLogotipoEmpresaWithHttpInfo(cpfCnpj, input);
    }

    /**
     * Enviar logotipo
     * Cadastre ou atualize um logotipo e vincule a sua empresa.    **Restrições:**  * Tipos de mídia (MIME) suportados: &#x60;image/png&#x60; e &#x60;image/jpeg&#x60;  * Tamanho máximo do arquivo: 200 KB    **Cenários de uso:**  * Quero que minhas notas sejam impressas com esse logotipo.  * Quero trocar o logotipo utilizado em minhas impressões.
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param input  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> enviarLogotipoEmpresaWithHttpInfo(String cpfCnpj, File input) throws ApiException {
        okhttp3.Call localVarCall = enviarLogotipoEmpresaValidateBeforeCall(cpfCnpj, input, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enviar logotipo (asynchronously)
     * Cadastre ou atualize um logotipo e vincule a sua empresa.    **Restrições:**  * Tipos de mídia (MIME) suportados: &#x60;image/png&#x60; e &#x60;image/jpeg&#x60;  * Tamanho máximo do arquivo: 200 KB    **Cenários de uso:**  * Quero que minhas notas sejam impressas com esse logotipo.  * Quero trocar o logotipo utilizado em minhas impressões.
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param input  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enviarLogotipoEmpresaAsync(String cpfCnpj, File input, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enviarLogotipoEmpresaValidateBeforeCall(cpfCnpj, input, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for excluirCertificadoEmpresa
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call excluirCertificadoEmpresaCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/certificado"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call excluirCertificadoEmpresaValidateBeforeCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling excluirCertificadoEmpresa(Async)");
        }

        return excluirCertificadoEmpresaCall(cpfCnpj, _callback);

    }

    /**
     * Deletar certificado
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void excluirCertificadoEmpresa(String cpfCnpj) throws ApiException {
        excluirCertificadoEmpresaWithHttpInfo(cpfCnpj);
    }

    /**
     * Deletar certificado
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> excluirCertificadoEmpresaWithHttpInfo(String cpfCnpj) throws ApiException {
        okhttp3.Call localVarCall = excluirCertificadoEmpresaValidateBeforeCall(cpfCnpj, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletar certificado (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call excluirCertificadoEmpresaAsync(String cpfCnpj, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = excluirCertificadoEmpresaValidateBeforeCall(cpfCnpj, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for excluirEmpresa
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call excluirEmpresaCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call excluirEmpresaValidateBeforeCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling excluirEmpresa(Async)");
        }

        return excluirEmpresaCall(cpfCnpj, _callback);

    }

    /**
     * Deletar empresa
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void excluirEmpresa(String cpfCnpj) throws ApiException {
        excluirEmpresaWithHttpInfo(cpfCnpj);
    }

    /**
     * Deletar empresa
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> excluirEmpresaWithHttpInfo(String cpfCnpj) throws ApiException {
        okhttp3.Call localVarCall = excluirEmpresaValidateBeforeCall(cpfCnpj, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletar empresa (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call excluirEmpresaAsync(String cpfCnpj, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = excluirEmpresaValidateBeforeCall(cpfCnpj, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for excluirLogotipoEmpresa
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call excluirLogotipoEmpresaCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/empresas/{cpf_cnpj}/logotipo"
            .replace("{" + "cpf_cnpj" + "}", localVarApiClient.escapeString(cpfCnpj.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call excluirLogotipoEmpresaValidateBeforeCall(String cpfCnpj, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling excluirLogotipoEmpresa(Async)");
        }

        return excluirLogotipoEmpresaCall(cpfCnpj, _callback);

    }

    /**
     * Deletar logotipo
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void excluirLogotipoEmpresa(String cpfCnpj) throws ApiException {
        excluirLogotipoEmpresaWithHttpInfo(cpfCnpj);
    }

    /**
     * Deletar logotipo
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> excluirLogotipoEmpresaWithHttpInfo(String cpfCnpj) throws ApiException {
        okhttp3.Call localVarCall = excluirLogotipoEmpresaValidateBeforeCall(cpfCnpj, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletar logotipo (asynchronously)
     * 
     * @param cpfCnpj CPF ou CNPJ da empresa.  Utilize o valor sem máscara. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call excluirLogotipoEmpresaAsync(String cpfCnpj, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = excluirLogotipoEmpresaValidateBeforeCall(cpfCnpj, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listarEmpresas
     * @param $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param cpfCnpj Filtrar pelo CPF ou CNPJ da empresa.    *Utilize o valor sem máscara*. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listarEmpresasCall(Integer $top, Integer $skip, Boolean $inlinecount, String cpfCnpj, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/empresas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($inlinecount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$inlinecount", $inlinecount));
        }

        if (cpfCnpj != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cpf_cnpj", cpfCnpj));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listarEmpresasValidateBeforeCall(Integer $top, Integer $skip, Boolean $inlinecount, String cpfCnpj, final ApiCallback _callback) throws ApiException {
        return listarEmpresasCall($top, $skip, $inlinecount, cpfCnpj, _callback);

    }

    /**
     * Listar empresas
     * Retorna a lista das empresas associadas à sua conta. As empresas são retornadas ordenadas pela data da criação, com as mais recentes aparecendo primeiro.
     * @param $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param cpfCnpj Filtrar pelo CPF ou CNPJ da empresa.    *Utilize o valor sem máscara*. (optional)
     * @return EmpresaListagem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EmpresaListagem listarEmpresas(Integer $top, Integer $skip, Boolean $inlinecount, String cpfCnpj) throws ApiException {
        ApiResponse<EmpresaListagem> localVarResp = listarEmpresasWithHttpInfo($top, $skip, $inlinecount, cpfCnpj);
        return localVarResp.getData();
    }

    /**
     * Listar empresas
     * Retorna a lista das empresas associadas à sua conta. As empresas são retornadas ordenadas pela data da criação, com as mais recentes aparecendo primeiro.
     * @param $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param cpfCnpj Filtrar pelo CPF ou CNPJ da empresa.    *Utilize o valor sem máscara*. (optional)
     * @return ApiResponse&lt;EmpresaListagem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmpresaListagem> listarEmpresasWithHttpInfo(Integer $top, Integer $skip, Boolean $inlinecount, String cpfCnpj) throws ApiException {
        okhttp3.Call localVarCall = listarEmpresasValidateBeforeCall($top, $skip, $inlinecount, cpfCnpj, null);
        Type localVarReturnType = new TypeToken<EmpresaListagem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listar empresas (asynchronously)
     * Retorna a lista das empresas associadas à sua conta. As empresas são retornadas ordenadas pela data da criação, com as mais recentes aparecendo primeiro.
     * @param $top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (optional, default to 10)
     * @param $skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (optional, default to 0)
     * @param $inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (optional, default to false)
     * @param cpfCnpj Filtrar pelo CPF ou CNPJ da empresa.    *Utilize o valor sem máscara*. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listarEmpresasAsync(Integer $top, Integer $skip, Boolean $inlinecount, String cpfCnpj, final ApiCallback<EmpresaListagem> _callback) throws ApiException {

        okhttp3.Call localVarCall = listarEmpresasValidateBeforeCall($top, $skip, $inlinecount, cpfCnpj, _callback);
        Type localVarReturnType = new TypeToken<EmpresaListagem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
