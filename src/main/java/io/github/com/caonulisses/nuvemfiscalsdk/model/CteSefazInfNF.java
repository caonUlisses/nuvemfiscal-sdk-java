/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CteSefazUnidCarga;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CteSefazUnidadeTransp;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Informações das NF.  Este grupo deve ser informado quando o documento originário for NF.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazInfNF {
  public static final String SERIALIZED_NAME_N_ROMA = "nRoma";
  @SerializedName(SERIALIZED_NAME_N_ROMA)
  @javax.annotation.Nullable
  private String nRoma;

  public static final String SERIALIZED_NAME_N_PED = "nPed";
  @SerializedName(SERIALIZED_NAME_N_PED)
  @javax.annotation.Nullable
  private String nPed;

  public static final String SERIALIZED_NAME_MOD = "mod";
  @SerializedName(SERIALIZED_NAME_MOD)
  @javax.annotation.Nullable
  private String mod;

  public static final String SERIALIZED_NAME_SERIE = "serie";
  @SerializedName(SERIALIZED_NAME_SERIE)
  @javax.annotation.Nullable
  private String serie;

  public static final String SERIALIZED_NAME_N_DOC = "nDoc";
  @SerializedName(SERIALIZED_NAME_N_DOC)
  @javax.annotation.Nullable
  private String nDoc;

  public static final String SERIALIZED_NAME_D_EMI = "dEmi";
  @SerializedName(SERIALIZED_NAME_D_EMI)
  @javax.annotation.Nullable
  private LocalDate dEmi;

  public static final String SERIALIZED_NAME_V_B_C = "vBC";
  @SerializedName(SERIALIZED_NAME_V_B_C)
  @javax.annotation.Nullable
  private BigDecimal vBC;

  public static final String SERIALIZED_NAME_V_I_C_M_S = "vICMS";
  @SerializedName(SERIALIZED_NAME_V_I_C_M_S)
  @javax.annotation.Nullable
  private BigDecimal vICMS;

  public static final String SERIALIZED_NAME_V_B_C_S_T = "vBCST";
  @SerializedName(SERIALIZED_NAME_V_B_C_S_T)
  @javax.annotation.Nullable
  private BigDecimal vBCST;

  public static final String SERIALIZED_NAME_V_S_T = "vST";
  @SerializedName(SERIALIZED_NAME_V_S_T)
  @javax.annotation.Nullable
  private BigDecimal vST;

  public static final String SERIALIZED_NAME_V_PROD = "vProd";
  @SerializedName(SERIALIZED_NAME_V_PROD)
  @javax.annotation.Nullable
  private BigDecimal vProd;

  public static final String SERIALIZED_NAME_V_N_F = "vNF";
  @SerializedName(SERIALIZED_NAME_V_N_F)
  @javax.annotation.Nullable
  private BigDecimal vNF;

  public static final String SERIALIZED_NAME_N_C_F_O_P = "nCFOP";
  @SerializedName(SERIALIZED_NAME_N_C_F_O_P)
  @javax.annotation.Nullable
  private String nCFOP;

  public static final String SERIALIZED_NAME_N_PESO = "nPeso";
  @SerializedName(SERIALIZED_NAME_N_PESO)
  @javax.annotation.Nullable
  private BigDecimal nPeso;

  public static final String SERIALIZED_NAME_P_I_N = "PIN";
  @SerializedName(SERIALIZED_NAME_P_I_N)
  @javax.annotation.Nullable
  private String PIN;

  public static final String SERIALIZED_NAME_D_PREV = "dPrev";
  @SerializedName(SERIALIZED_NAME_D_PREV)
  @javax.annotation.Nullable
  private LocalDate dPrev;

  public static final String SERIALIZED_NAME_INF_UNID_CARGA = "infUnidCarga";
  @SerializedName(SERIALIZED_NAME_INF_UNID_CARGA)
  @javax.annotation.Nullable
  private List<CteSefazUnidCarga> infUnidCarga = new ArrayList<>();

  public static final String SERIALIZED_NAME_INF_UNID_TRANSP = "infUnidTransp";
  @SerializedName(SERIALIZED_NAME_INF_UNID_TRANSP)
  @javax.annotation.Nullable
  private List<CteSefazUnidadeTransp> infUnidTransp = new ArrayList<>();

  public CteSefazInfNF() {
  }

  public CteSefazInfNF nRoma(@javax.annotation.Nullable String nRoma) {
    this.nRoma = nRoma;
    return this;
  }

  /**
   * Número do Romaneio da NF.
   * @return nRoma
   */
  @javax.annotation.Nullable
  public String getnRoma() {
    return nRoma;
  }

  public void setnRoma(@javax.annotation.Nullable String nRoma) {
    this.nRoma = nRoma;
  }


  public CteSefazInfNF nPed(@javax.annotation.Nullable String nPed) {
    this.nPed = nPed;
    return this;
  }

  /**
   * Número do Pedido da NF.
   * @return nPed
   */
  @javax.annotation.Nullable
  public String getnPed() {
    return nPed;
  }

  public void setnPed(@javax.annotation.Nullable String nPed) {
    this.nPed = nPed;
  }


  public CteSefazInfNF mod(@javax.annotation.Nullable String mod) {
    this.mod = mod;
    return this;
  }

  /**
   * Modelo da Nota Fiscal.  Preencher com:  * 01 - NF Modelo 01/1A e Avulsa  * 04 - NF de Produtor
   * @return mod
   */
  @javax.annotation.Nullable
  public String getMod() {
    return mod;
  }

  public void setMod(@javax.annotation.Nullable String mod) {
    this.mod = mod;
  }


  public CteSefazInfNF serie(@javax.annotation.Nullable String serie) {
    this.serie = serie;
    return this;
  }

  /**
   * Série.
   * @return serie
   */
  @javax.annotation.Nullable
  public String getSerie() {
    return serie;
  }

  public void setSerie(@javax.annotation.Nullable String serie) {
    this.serie = serie;
  }


  public CteSefazInfNF nDoc(@javax.annotation.Nullable String nDoc) {
    this.nDoc = nDoc;
    return this;
  }

  /**
   * Número.
   * @return nDoc
   */
  @javax.annotation.Nullable
  public String getnDoc() {
    return nDoc;
  }

  public void setnDoc(@javax.annotation.Nullable String nDoc) {
    this.nDoc = nDoc;
  }


  public CteSefazInfNF dEmi(@javax.annotation.Nullable LocalDate dEmi) {
    this.dEmi = dEmi;
    return this;
  }

  /**
   * Data de Emissão.  Formato AAAA-MM-DD.
   * @return dEmi
   */
  @javax.annotation.Nullable
  public LocalDate getdEmi() {
    return dEmi;
  }

  public void setdEmi(@javax.annotation.Nullable LocalDate dEmi) {
    this.dEmi = dEmi;
  }


  public CteSefazInfNF vBC(@javax.annotation.Nullable BigDecimal vBC) {
    this.vBC = vBC;
    return this;
  }

  /**
   * Valor da Base de Cálculo do ICMS.
   * minimum: 0
   * @return vBC
   */
  @javax.annotation.Nullable
  public BigDecimal getvBC() {
    return vBC;
  }

  public void setvBC(@javax.annotation.Nullable BigDecimal vBC) {
    this.vBC = vBC;
  }


  public CteSefazInfNF vICMS(@javax.annotation.Nullable BigDecimal vICMS) {
    this.vICMS = vICMS;
    return this;
  }

  /**
   * Valor Total do ICMS.
   * minimum: 0
   * @return vICMS
   */
  @javax.annotation.Nullable
  public BigDecimal getvICMS() {
    return vICMS;
  }

  public void setvICMS(@javax.annotation.Nullable BigDecimal vICMS) {
    this.vICMS = vICMS;
  }


  public CteSefazInfNF vBCST(@javax.annotation.Nullable BigDecimal vBCST) {
    this.vBCST = vBCST;
    return this;
  }

  /**
   * Valor da Base de Cálculo do ICMS ST.
   * minimum: 0
   * @return vBCST
   */
  @javax.annotation.Nullable
  public BigDecimal getvBCST() {
    return vBCST;
  }

  public void setvBCST(@javax.annotation.Nullable BigDecimal vBCST) {
    this.vBCST = vBCST;
  }


  public CteSefazInfNF vST(@javax.annotation.Nullable BigDecimal vST) {
    this.vST = vST;
    return this;
  }

  /**
   * Valor Total do ICMS ST.
   * minimum: 0
   * @return vST
   */
  @javax.annotation.Nullable
  public BigDecimal getvST() {
    return vST;
  }

  public void setvST(@javax.annotation.Nullable BigDecimal vST) {
    this.vST = vST;
  }


  public CteSefazInfNF vProd(@javax.annotation.Nullable BigDecimal vProd) {
    this.vProd = vProd;
    return this;
  }

  /**
   * Valor Total dos Produtos.
   * minimum: 0
   * @return vProd
   */
  @javax.annotation.Nullable
  public BigDecimal getvProd() {
    return vProd;
  }

  public void setvProd(@javax.annotation.Nullable BigDecimal vProd) {
    this.vProd = vProd;
  }


  public CteSefazInfNF vNF(@javax.annotation.Nullable BigDecimal vNF) {
    this.vNF = vNF;
    return this;
  }

  /**
   * Valor Total da NF.
   * minimum: 0
   * @return vNF
   */
  @javax.annotation.Nullable
  public BigDecimal getvNF() {
    return vNF;
  }

  public void setvNF(@javax.annotation.Nullable BigDecimal vNF) {
    this.vNF = vNF;
  }


  public CteSefazInfNF nCFOP(@javax.annotation.Nullable String nCFOP) {
    this.nCFOP = nCFOP;
    return this;
  }

  /**
   * CFOP Predominante.  CFOP da NF ou, na existência de mais de um, predominância pelo critério de valor econômico.
   * @return nCFOP
   */
  @javax.annotation.Nullable
  public String getnCFOP() {
    return nCFOP;
  }

  public void setnCFOP(@javax.annotation.Nullable String nCFOP) {
    this.nCFOP = nCFOP;
  }


  public CteSefazInfNF nPeso(@javax.annotation.Nullable BigDecimal nPeso) {
    this.nPeso = nPeso;
    return this;
  }

  /**
   * Peso total em Kg.
   * minimum: 0
   * @return nPeso
   */
  @javax.annotation.Nullable
  public BigDecimal getnPeso() {
    return nPeso;
  }

  public void setnPeso(@javax.annotation.Nullable BigDecimal nPeso) {
    this.nPeso = nPeso;
  }


  public CteSefazInfNF PIN(@javax.annotation.Nullable String PIN) {
    this.PIN = PIN;
    return this;
  }

  /**
   * PIN SUFRAMA.  PIN atribuído pela SUFRAMA para a operação.
   * @return PIN
   */
  @javax.annotation.Nullable
  public String getPIN() {
    return PIN;
  }

  public void setPIN(@javax.annotation.Nullable String PIN) {
    this.PIN = PIN;
  }


  public CteSefazInfNF dPrev(@javax.annotation.Nullable LocalDate dPrev) {
    this.dPrev = dPrev;
    return this;
  }

  /**
   * Data prevista de entrega.  Formato AAAA-MM-DD.
   * @return dPrev
   */
  @javax.annotation.Nullable
  public LocalDate getdPrev() {
    return dPrev;
  }

  public void setdPrev(@javax.annotation.Nullable LocalDate dPrev) {
    this.dPrev = dPrev;
  }


  public CteSefazInfNF infUnidCarga(@javax.annotation.Nullable List<CteSefazUnidCarga> infUnidCarga) {
    this.infUnidCarga = infUnidCarga;
    return this;
  }

  public CteSefazInfNF addInfUnidCargaItem(CteSefazUnidCarga infUnidCargaItem) {
    if (this.infUnidCarga == null) {
      this.infUnidCarga = new ArrayList<>();
    }
    this.infUnidCarga.add(infUnidCargaItem);
    return this;
  }

  /**
   * Get infUnidCarga
   * @return infUnidCarga
   */
  @javax.annotation.Nullable
  public List<CteSefazUnidCarga> getInfUnidCarga() {
    return infUnidCarga;
  }

  public void setInfUnidCarga(@javax.annotation.Nullable List<CteSefazUnidCarga> infUnidCarga) {
    this.infUnidCarga = infUnidCarga;
  }


  public CteSefazInfNF infUnidTransp(@javax.annotation.Nullable List<CteSefazUnidadeTransp> infUnidTransp) {
    this.infUnidTransp = infUnidTransp;
    return this;
  }

  public CteSefazInfNF addInfUnidTranspItem(CteSefazUnidadeTransp infUnidTranspItem) {
    if (this.infUnidTransp == null) {
      this.infUnidTransp = new ArrayList<>();
    }
    this.infUnidTransp.add(infUnidTranspItem);
    return this;
  }

  /**
   * Get infUnidTransp
   * @return infUnidTransp
   */
  @javax.annotation.Nullable
  public List<CteSefazUnidadeTransp> getInfUnidTransp() {
    return infUnidTransp;
  }

  public void setInfUnidTransp(@javax.annotation.Nullable List<CteSefazUnidadeTransp> infUnidTransp) {
    this.infUnidTransp = infUnidTransp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazInfNF cteSefazInfNF = (CteSefazInfNF) o;
    return Objects.equals(this.nRoma, cteSefazInfNF.nRoma) &&
        Objects.equals(this.nPed, cteSefazInfNF.nPed) &&
        Objects.equals(this.mod, cteSefazInfNF.mod) &&
        Objects.equals(this.serie, cteSefazInfNF.serie) &&
        Objects.equals(this.nDoc, cteSefazInfNF.nDoc) &&
        Objects.equals(this.dEmi, cteSefazInfNF.dEmi) &&
        Objects.equals(this.vBC, cteSefazInfNF.vBC) &&
        Objects.equals(this.vICMS, cteSefazInfNF.vICMS) &&
        Objects.equals(this.vBCST, cteSefazInfNF.vBCST) &&
        Objects.equals(this.vST, cteSefazInfNF.vST) &&
        Objects.equals(this.vProd, cteSefazInfNF.vProd) &&
        Objects.equals(this.vNF, cteSefazInfNF.vNF) &&
        Objects.equals(this.nCFOP, cteSefazInfNF.nCFOP) &&
        Objects.equals(this.nPeso, cteSefazInfNF.nPeso) &&
        Objects.equals(this.PIN, cteSefazInfNF.PIN) &&
        Objects.equals(this.dPrev, cteSefazInfNF.dPrev) &&
        Objects.equals(this.infUnidCarga, cteSefazInfNF.infUnidCarga) &&
        Objects.equals(this.infUnidTransp, cteSefazInfNF.infUnidTransp);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(nRoma, nPed, mod, serie, nDoc, dEmi, vBC, vICMS, vBCST, vST, vProd, vNF, nCFOP, nPeso, PIN, dPrev, infUnidCarga, infUnidTransp);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazInfNF {\n");
    sb.append("    nRoma: ").append(toIndentedString(nRoma)).append("\n");
    sb.append("    nPed: ").append(toIndentedString(nPed)).append("\n");
    sb.append("    mod: ").append(toIndentedString(mod)).append("\n");
    sb.append("    serie: ").append(toIndentedString(serie)).append("\n");
    sb.append("    nDoc: ").append(toIndentedString(nDoc)).append("\n");
    sb.append("    dEmi: ").append(toIndentedString(dEmi)).append("\n");
    sb.append("    vBC: ").append(toIndentedString(vBC)).append("\n");
    sb.append("    vICMS: ").append(toIndentedString(vICMS)).append("\n");
    sb.append("    vBCST: ").append(toIndentedString(vBCST)).append("\n");
    sb.append("    vST: ").append(toIndentedString(vST)).append("\n");
    sb.append("    vProd: ").append(toIndentedString(vProd)).append("\n");
    sb.append("    vNF: ").append(toIndentedString(vNF)).append("\n");
    sb.append("    nCFOP: ").append(toIndentedString(nCFOP)).append("\n");
    sb.append("    nPeso: ").append(toIndentedString(nPeso)).append("\n");
    sb.append("    PIN: ").append(toIndentedString(PIN)).append("\n");
    sb.append("    dPrev: ").append(toIndentedString(dPrev)).append("\n");
    sb.append("    infUnidCarga: ").append(toIndentedString(infUnidCarga)).append("\n");
    sb.append("    infUnidTransp: ").append(toIndentedString(infUnidTransp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nRoma");
    openapiFields.add("nPed");
    openapiFields.add("mod");
    openapiFields.add("serie");
    openapiFields.add("nDoc");
    openapiFields.add("dEmi");
    openapiFields.add("vBC");
    openapiFields.add("vICMS");
    openapiFields.add("vBCST");
    openapiFields.add("vST");
    openapiFields.add("vProd");
    openapiFields.add("vNF");
    openapiFields.add("nCFOP");
    openapiFields.add("nPeso");
    openapiFields.add("PIN");
    openapiFields.add("dPrev");
    openapiFields.add("infUnidCarga");
    openapiFields.add("infUnidTransp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mod");
    openapiRequiredFields.add("serie");
    openapiRequiredFields.add("nDoc");
    openapiRequiredFields.add("dEmi");
    openapiRequiredFields.add("vBC");
    openapiRequiredFields.add("vICMS");
    openapiRequiredFields.add("vBCST");
    openapiRequiredFields.add("vST");
    openapiRequiredFields.add("vProd");
    openapiRequiredFields.add("vNF");
    openapiRequiredFields.add("nCFOP");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazInfNF
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazInfNF.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazInfNF is not found in the empty JSON string", CteSefazInfNF.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazInfNF.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazInfNF` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CteSefazInfNF.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nRoma") != null && !jsonObj.get("nRoma").isJsonNull()) && !jsonObj.get("nRoma").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nRoma` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nRoma").toString()));
      }
      if ((jsonObj.get("nPed") != null && !jsonObj.get("nPed").isJsonNull()) && !jsonObj.get("nPed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nPed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nPed").toString()));
      }
      if ((jsonObj.get("mod") != null && !jsonObj.get("mod").isJsonNull()) && !jsonObj.get("mod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mod").toString()));
      }
      if ((jsonObj.get("serie") != null && !jsonObj.get("serie").isJsonNull()) && !jsonObj.get("serie").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serie` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serie").toString()));
      }
      if ((jsonObj.get("nDoc") != null && !jsonObj.get("nDoc").isJsonNull()) && !jsonObj.get("nDoc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nDoc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nDoc").toString()));
      }
      if ((jsonObj.get("nCFOP") != null && !jsonObj.get("nCFOP").isJsonNull()) && !jsonObj.get("nCFOP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nCFOP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nCFOP").toString()));
      }
      if ((jsonObj.get("PIN") != null && !jsonObj.get("PIN").isJsonNull()) && !jsonObj.get("PIN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PIN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PIN").toString()));
      }
      if (jsonObj.get("infUnidCarga") != null && !jsonObj.get("infUnidCarga").isJsonNull()) {
        JsonArray jsonArrayinfUnidCarga = jsonObj.getAsJsonArray("infUnidCarga");
        if (jsonArrayinfUnidCarga != null) {
          // ensure the json data is an array
          if (!jsonObj.get("infUnidCarga").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `infUnidCarga` to be an array in the JSON string but got `%s`", jsonObj.get("infUnidCarga").toString()));
          }

          // validate the optional field `infUnidCarga` (array)
          for (int i = 0; i < jsonArrayinfUnidCarga.size(); i++) {
            CteSefazUnidCarga.validateJsonElement(jsonArrayinfUnidCarga.get(i));
          };
        }
      }
      if (jsonObj.get("infUnidTransp") != null && !jsonObj.get("infUnidTransp").isJsonNull()) {
        JsonArray jsonArrayinfUnidTransp = jsonObj.getAsJsonArray("infUnidTransp");
        if (jsonArrayinfUnidTransp != null) {
          // ensure the json data is an array
          if (!jsonObj.get("infUnidTransp").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `infUnidTransp` to be an array in the JSON string but got `%s`", jsonObj.get("infUnidTransp").toString()));
          }

          // validate the optional field `infUnidTransp` (array)
          for (int i = 0; i < jsonArrayinfUnidTransp.size(); i++) {
            CteSefazUnidadeTransp.validateJsonElement(jsonArrayinfUnidTransp.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazInfNF.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazInfNF' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazInfNF> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazInfNF.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazInfNF>() {
           @Override
           public void write(JsonWriter out, CteSefazInfNF value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazInfNF read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazInfNF given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazInfNF
   * @throws IOException if the JSON string is invalid with respect to CteSefazInfNF
   */
  public static CteSefazInfNF fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazInfNF.class);
  }

  /**
   * Convert an instance of CteSefazInfNF to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

