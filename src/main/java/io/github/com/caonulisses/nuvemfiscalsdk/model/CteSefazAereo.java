/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CteSefazNatCarga;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CteSefazPeri;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CteSefazTarifa;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Informações do modal Aéreo.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazAereo {
  public static final String SERIALIZED_NAME_N_MINU = "nMinu";
  @SerializedName(SERIALIZED_NAME_N_MINU)
  @javax.annotation.Nullable
  private Integer nMinu;

  public static final String SERIALIZED_NAME_N_O_C_A = "nOCA";
  @SerializedName(SERIALIZED_NAME_N_O_C_A)
  @javax.annotation.Nullable
  private String nOCA;

  public static final String SERIALIZED_NAME_D_PREV_AEREO = "dPrevAereo";
  @SerializedName(SERIALIZED_NAME_D_PREV_AEREO)
  @javax.annotation.Nullable
  private LocalDate dPrevAereo;

  public static final String SERIALIZED_NAME_NAT_CARGA = "natCarga";
  @SerializedName(SERIALIZED_NAME_NAT_CARGA)
  @javax.annotation.Nonnull
  private CteSefazNatCarga natCarga;

  public static final String SERIALIZED_NAME_TARIFA = "tarifa";
  @SerializedName(SERIALIZED_NAME_TARIFA)
  @javax.annotation.Nonnull
  private CteSefazTarifa tarifa;

  public static final String SERIALIZED_NAME_PERI = "peri";
  @SerializedName(SERIALIZED_NAME_PERI)
  @javax.annotation.Nullable
  private List<CteSefazPeri> peri = new ArrayList<>();

  public CteSefazAereo() {
  }

  public CteSefazAereo nMinu(@javax.annotation.Nullable Integer nMinu) {
    this.nMinu = nMinu;
    return this;
  }

  /**
   * Número da Minuta.  Documento que precede o CT-e, assinado pelo expedidor, espécie de pedido de serviço.
   * minimum: 0
   * maximum: 999999999
   * @return nMinu
   */
  @javax.annotation.Nullable
  public Integer getnMinu() {
    return nMinu;
  }

  public void setnMinu(@javax.annotation.Nullable Integer nMinu) {
    this.nMinu = nMinu;
  }


  public CteSefazAereo nOCA(@javax.annotation.Nullable String nOCA) {
    this.nOCA = nOCA;
    return this;
  }

  /**
   * Número Operacional do Conhecimento Aéreo.  Representa o número de controle comumente utilizado pelo conhecimento aéreo composto por uma sequência numérica de onze dígitos. Os três primeiros dígitos representam um código que os operadores de transporte aéreo associados à IATA possuem. Em seguida um número de série de sete dígitos determinados pelo operador de transporte aéreo. Para finalizar, um dígito verificador, que é um sistema de módulo sete imponderado o qual divide o número de série do conhecimento aéreo por sete e usa o resto como dígito de verificação.
   * @return nOCA
   */
  @javax.annotation.Nullable
  public String getnOCA() {
    return nOCA;
  }

  public void setnOCA(@javax.annotation.Nullable String nOCA) {
    this.nOCA = nOCA;
  }


  public CteSefazAereo dPrevAereo(@javax.annotation.Nullable LocalDate dPrevAereo) {
    this.dPrevAereo = dPrevAereo;
    return this;
  }

  /**
   * Data prevista da entrega.  Formato AAAA-MM-DD.
   * @return dPrevAereo
   */
  @javax.annotation.Nullable
  public LocalDate getdPrevAereo() {
    return dPrevAereo;
  }

  public void setdPrevAereo(@javax.annotation.Nullable LocalDate dPrevAereo) {
    this.dPrevAereo = dPrevAereo;
  }


  public CteSefazAereo natCarga(@javax.annotation.Nonnull CteSefazNatCarga natCarga) {
    this.natCarga = natCarga;
    return this;
  }

  /**
   * Get natCarga
   * @return natCarga
   */
  @javax.annotation.Nonnull
  public CteSefazNatCarga getNatCarga() {
    return natCarga;
  }

  public void setNatCarga(@javax.annotation.Nonnull CteSefazNatCarga natCarga) {
    this.natCarga = natCarga;
  }


  public CteSefazAereo tarifa(@javax.annotation.Nonnull CteSefazTarifa tarifa) {
    this.tarifa = tarifa;
    return this;
  }

  /**
   * Get tarifa
   * @return tarifa
   */
  @javax.annotation.Nonnull
  public CteSefazTarifa getTarifa() {
    return tarifa;
  }

  public void setTarifa(@javax.annotation.Nonnull CteSefazTarifa tarifa) {
    this.tarifa = tarifa;
  }


  public CteSefazAereo peri(@javax.annotation.Nullable List<CteSefazPeri> peri) {
    this.peri = peri;
    return this;
  }

  public CteSefazAereo addPeriItem(CteSefazPeri periItem) {
    if (this.peri == null) {
      this.peri = new ArrayList<>();
    }
    this.peri.add(periItem);
    return this;
  }

  /**
   * Get peri
   * @return peri
   */
  @javax.annotation.Nullable
  public List<CteSefazPeri> getPeri() {
    return peri;
  }

  public void setPeri(@javax.annotation.Nullable List<CteSefazPeri> peri) {
    this.peri = peri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazAereo cteSefazAereo = (CteSefazAereo) o;
    return Objects.equals(this.nMinu, cteSefazAereo.nMinu) &&
        Objects.equals(this.nOCA, cteSefazAereo.nOCA) &&
        Objects.equals(this.dPrevAereo, cteSefazAereo.dPrevAereo) &&
        Objects.equals(this.natCarga, cteSefazAereo.natCarga) &&
        Objects.equals(this.tarifa, cteSefazAereo.tarifa) &&
        Objects.equals(this.peri, cteSefazAereo.peri);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(nMinu, nOCA, dPrevAereo, natCarga, tarifa, peri);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazAereo {\n");
    sb.append("    nMinu: ").append(toIndentedString(nMinu)).append("\n");
    sb.append("    nOCA: ").append(toIndentedString(nOCA)).append("\n");
    sb.append("    dPrevAereo: ").append(toIndentedString(dPrevAereo)).append("\n");
    sb.append("    natCarga: ").append(toIndentedString(natCarga)).append("\n");
    sb.append("    tarifa: ").append(toIndentedString(tarifa)).append("\n");
    sb.append("    peri: ").append(toIndentedString(peri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nMinu");
    openapiFields.add("nOCA");
    openapiFields.add("dPrevAereo");
    openapiFields.add("natCarga");
    openapiFields.add("tarifa");
    openapiFields.add("peri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dPrevAereo");
    openapiRequiredFields.add("natCarga");
    openapiRequiredFields.add("tarifa");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazAereo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazAereo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazAereo is not found in the empty JSON string", CteSefazAereo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazAereo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazAereo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CteSefazAereo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nOCA") != null && !jsonObj.get("nOCA").isJsonNull()) && !jsonObj.get("nOCA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nOCA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nOCA").toString()));
      }
      // validate the required field `natCarga`
      CteSefazNatCarga.validateJsonElement(jsonObj.get("natCarga"));
      // validate the required field `tarifa`
      CteSefazTarifa.validateJsonElement(jsonObj.get("tarifa"));
      if (jsonObj.get("peri") != null && !jsonObj.get("peri").isJsonNull()) {
        JsonArray jsonArrayperi = jsonObj.getAsJsonArray("peri");
        if (jsonArrayperi != null) {
          // ensure the json data is an array
          if (!jsonObj.get("peri").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `peri` to be an array in the JSON string but got `%s`", jsonObj.get("peri").toString()));
          }

          // validate the optional field `peri` (array)
          for (int i = 0; i < jsonArrayperi.size(); i++) {
            CteSefazPeri.validateJsonElement(jsonArrayperi.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazAereo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazAereo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazAereo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazAereo.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazAereo>() {
           @Override
           public void write(JsonWriter out, CteSefazAereo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazAereo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazAereo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazAereo
   * @throws IOException if the JSON string is invalid with respect to CteSefazAereo
   */
  public static CteSefazAereo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazAereo.class);
  }

  /**
   * Convert an instance of CteSefazAereo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

