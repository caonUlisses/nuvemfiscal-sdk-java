/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CteSefazDup;
import org.openapitools.client.model.CteSefazFat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dados da cobrança do CT-e.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazCobr {
  public static final String SERIALIZED_NAME_FAT = "fat";
  @SerializedName(SERIALIZED_NAME_FAT)
  @javax.annotation.Nullable
  private CteSefazFat fat;

  public static final String SERIALIZED_NAME_DUP = "dup";
  @SerializedName(SERIALIZED_NAME_DUP)
  @javax.annotation.Nullable
  private List<CteSefazDup> dup = new ArrayList<>();

  public CteSefazCobr() {
  }

  public CteSefazCobr fat(@javax.annotation.Nullable CteSefazFat fat) {
    this.fat = fat;
    return this;
  }

  /**
   * Get fat
   * @return fat
   */
  @javax.annotation.Nullable
  public CteSefazFat getFat() {
    return fat;
  }

  public void setFat(@javax.annotation.Nullable CteSefazFat fat) {
    this.fat = fat;
  }


  public CteSefazCobr dup(@javax.annotation.Nullable List<CteSefazDup> dup) {
    this.dup = dup;
    return this;
  }

  public CteSefazCobr addDupItem(CteSefazDup dupItem) {
    if (this.dup == null) {
      this.dup = new ArrayList<>();
    }
    this.dup.add(dupItem);
    return this;
  }

  /**
   * Get dup
   * @return dup
   */
  @javax.annotation.Nullable
  public List<CteSefazDup> getDup() {
    return dup;
  }

  public void setDup(@javax.annotation.Nullable List<CteSefazDup> dup) {
    this.dup = dup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazCobr cteSefazCobr = (CteSefazCobr) o;
    return Objects.equals(this.fat, cteSefazCobr.fat) &&
        Objects.equals(this.dup, cteSefazCobr.dup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fat, dup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazCobr {\n");
    sb.append("    fat: ").append(toIndentedString(fat)).append("\n");
    sb.append("    dup: ").append(toIndentedString(dup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fat");
    openapiFields.add("dup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazCobr
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazCobr.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazCobr is not found in the empty JSON string", CteSefazCobr.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazCobr.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazCobr` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `fat`
      if (jsonObj.get("fat") != null && !jsonObj.get("fat").isJsonNull()) {
        CteSefazFat.validateJsonElement(jsonObj.get("fat"));
      }
      if (jsonObj.get("dup") != null && !jsonObj.get("dup").isJsonNull()) {
        JsonArray jsonArraydup = jsonObj.getAsJsonArray("dup");
        if (jsonArraydup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dup").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dup` to be an array in the JSON string but got `%s`", jsonObj.get("dup").toString()));
          }

          // validate the optional field `dup` (array)
          for (int i = 0; i < jsonArraydup.size(); i++) {
            CteSefazDup.validateJsonElement(jsonArraydup.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazCobr.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazCobr' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazCobr> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazCobr.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazCobr>() {
           @Override
           public void write(JsonWriter out, CteSefazCobr value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazCobr read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazCobr given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazCobr
   * @throws IOException if the JSON string is invalid with respect to CteSefazCobr
   */
  public static CteSefazCobr fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazCobr.class);
  }

  /**
   * Convert an instance of CteSefazCobr to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

