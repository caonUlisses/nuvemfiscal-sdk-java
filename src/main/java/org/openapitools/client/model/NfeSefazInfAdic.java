/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NfeSefazInfAdicObsCont;
import org.openapitools.client.model.NfeSefazInfAdicObsFisco;
import org.openapitools.client.model.NfeSefazProcRef;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Informações adicionais da NF-e.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazInfAdic {
  public static final String SERIALIZED_NAME_INF_AD_FISCO = "infAdFisco";
  @SerializedName(SERIALIZED_NAME_INF_AD_FISCO)
  @javax.annotation.Nullable
  private String infAdFisco;

  public static final String SERIALIZED_NAME_INF_CPL = "infCpl";
  @SerializedName(SERIALIZED_NAME_INF_CPL)
  @javax.annotation.Nullable
  private String infCpl;

  public static final String SERIALIZED_NAME_OBS_CONT = "obsCont";
  @SerializedName(SERIALIZED_NAME_OBS_CONT)
  @javax.annotation.Nullable
  private List<NfeSefazInfAdicObsCont> obsCont = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBS_FISCO = "obsFisco";
  @SerializedName(SERIALIZED_NAME_OBS_FISCO)
  @javax.annotation.Nullable
  private List<NfeSefazInfAdicObsFisco> obsFisco = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROC_REF = "procRef";
  @SerializedName(SERIALIZED_NAME_PROC_REF)
  @javax.annotation.Nullable
  private List<NfeSefazProcRef> procRef = new ArrayList<>();

  public NfeSefazInfAdic() {
  }

  public NfeSefazInfAdic infAdFisco(@javax.annotation.Nullable String infAdFisco) {
    this.infAdFisco = infAdFisco;
    return this;
  }

  /**
   * Informações adicionais de interesse do Fisco (v2.0).
   * @return infAdFisco
   */
  @javax.annotation.Nullable
  public String getInfAdFisco() {
    return infAdFisco;
  }

  public void setInfAdFisco(@javax.annotation.Nullable String infAdFisco) {
    this.infAdFisco = infAdFisco;
  }


  public NfeSefazInfAdic infCpl(@javax.annotation.Nullable String infCpl) {
    this.infCpl = infCpl;
    return this;
  }

  /**
   * Informações complementares de interesse do Contribuinte.
   * @return infCpl
   */
  @javax.annotation.Nullable
  public String getInfCpl() {
    return infCpl;
  }

  public void setInfCpl(@javax.annotation.Nullable String infCpl) {
    this.infCpl = infCpl;
  }


  public NfeSefazInfAdic obsCont(@javax.annotation.Nullable List<NfeSefazInfAdicObsCont> obsCont) {
    this.obsCont = obsCont;
    return this;
  }

  public NfeSefazInfAdic addObsContItem(NfeSefazInfAdicObsCont obsContItem) {
    if (this.obsCont == null) {
      this.obsCont = new ArrayList<>();
    }
    this.obsCont.add(obsContItem);
    return this;
  }

  /**
   * Get obsCont
   * @return obsCont
   */
  @javax.annotation.Nullable
  public List<NfeSefazInfAdicObsCont> getObsCont() {
    return obsCont;
  }

  public void setObsCont(@javax.annotation.Nullable List<NfeSefazInfAdicObsCont> obsCont) {
    this.obsCont = obsCont;
  }


  public NfeSefazInfAdic obsFisco(@javax.annotation.Nullable List<NfeSefazInfAdicObsFisco> obsFisco) {
    this.obsFisco = obsFisco;
    return this;
  }

  public NfeSefazInfAdic addObsFiscoItem(NfeSefazInfAdicObsFisco obsFiscoItem) {
    if (this.obsFisco == null) {
      this.obsFisco = new ArrayList<>();
    }
    this.obsFisco.add(obsFiscoItem);
    return this;
  }

  /**
   * Get obsFisco
   * @return obsFisco
   */
  @javax.annotation.Nullable
  public List<NfeSefazInfAdicObsFisco> getObsFisco() {
    return obsFisco;
  }

  public void setObsFisco(@javax.annotation.Nullable List<NfeSefazInfAdicObsFisco> obsFisco) {
    this.obsFisco = obsFisco;
  }


  public NfeSefazInfAdic procRef(@javax.annotation.Nullable List<NfeSefazProcRef> procRef) {
    this.procRef = procRef;
    return this;
  }

  public NfeSefazInfAdic addProcRefItem(NfeSefazProcRef procRefItem) {
    if (this.procRef == null) {
      this.procRef = new ArrayList<>();
    }
    this.procRef.add(procRefItem);
    return this;
  }

  /**
   * Get procRef
   * @return procRef
   */
  @javax.annotation.Nullable
  public List<NfeSefazProcRef> getProcRef() {
    return procRef;
  }

  public void setProcRef(@javax.annotation.Nullable List<NfeSefazProcRef> procRef) {
    this.procRef = procRef;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazInfAdic nfeSefazInfAdic = (NfeSefazInfAdic) o;
    return Objects.equals(this.infAdFisco, nfeSefazInfAdic.infAdFisco) &&
        Objects.equals(this.infCpl, nfeSefazInfAdic.infCpl) &&
        Objects.equals(this.obsCont, nfeSefazInfAdic.obsCont) &&
        Objects.equals(this.obsFisco, nfeSefazInfAdic.obsFisco) &&
        Objects.equals(this.procRef, nfeSefazInfAdic.procRef);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(infAdFisco, infCpl, obsCont, obsFisco, procRef);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazInfAdic {\n");
    sb.append("    infAdFisco: ").append(toIndentedString(infAdFisco)).append("\n");
    sb.append("    infCpl: ").append(toIndentedString(infCpl)).append("\n");
    sb.append("    obsCont: ").append(toIndentedString(obsCont)).append("\n");
    sb.append("    obsFisco: ").append(toIndentedString(obsFisco)).append("\n");
    sb.append("    procRef: ").append(toIndentedString(procRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("infAdFisco");
    openapiFields.add("infCpl");
    openapiFields.add("obsCont");
    openapiFields.add("obsFisco");
    openapiFields.add("procRef");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazInfAdic
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazInfAdic.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazInfAdic is not found in the empty JSON string", NfeSefazInfAdic.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazInfAdic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazInfAdic` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("infAdFisco") != null && !jsonObj.get("infAdFisco").isJsonNull()) && !jsonObj.get("infAdFisco").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `infAdFisco` to be a primitive type in the JSON string but got `%s`", jsonObj.get("infAdFisco").toString()));
      }
      if ((jsonObj.get("infCpl") != null && !jsonObj.get("infCpl").isJsonNull()) && !jsonObj.get("infCpl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `infCpl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("infCpl").toString()));
      }
      if (jsonObj.get("obsCont") != null && !jsonObj.get("obsCont").isJsonNull()) {
        JsonArray jsonArrayobsCont = jsonObj.getAsJsonArray("obsCont");
        if (jsonArrayobsCont != null) {
          // ensure the json data is an array
          if (!jsonObj.get("obsCont").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `obsCont` to be an array in the JSON string but got `%s`", jsonObj.get("obsCont").toString()));
          }

          // validate the optional field `obsCont` (array)
          for (int i = 0; i < jsonArrayobsCont.size(); i++) {
            NfeSefazInfAdicObsCont.validateJsonElement(jsonArrayobsCont.get(i));
          };
        }
      }
      if (jsonObj.get("obsFisco") != null && !jsonObj.get("obsFisco").isJsonNull()) {
        JsonArray jsonArrayobsFisco = jsonObj.getAsJsonArray("obsFisco");
        if (jsonArrayobsFisco != null) {
          // ensure the json data is an array
          if (!jsonObj.get("obsFisco").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `obsFisco` to be an array in the JSON string but got `%s`", jsonObj.get("obsFisco").toString()));
          }

          // validate the optional field `obsFisco` (array)
          for (int i = 0; i < jsonArrayobsFisco.size(); i++) {
            NfeSefazInfAdicObsFisco.validateJsonElement(jsonArrayobsFisco.get(i));
          };
        }
      }
      if (jsonObj.get("procRef") != null && !jsonObj.get("procRef").isJsonNull()) {
        JsonArray jsonArrayprocRef = jsonObj.getAsJsonArray("procRef");
        if (jsonArrayprocRef != null) {
          // ensure the json data is an array
          if (!jsonObj.get("procRef").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `procRef` to be an array in the JSON string but got `%s`", jsonObj.get("procRef").toString()));
          }

          // validate the optional field `procRef` (array)
          for (int i = 0; i < jsonArrayprocRef.size(); i++) {
            NfeSefazProcRef.validateJsonElement(jsonArrayprocRef.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazInfAdic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazInfAdic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazInfAdic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazInfAdic.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazInfAdic>() {
           @Override
           public void write(JsonWriter out, NfeSefazInfAdic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazInfAdic read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazInfAdic given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazInfAdic
   * @throws IOException if the JSON string is invalid with respect to NfeSefazInfAdic
   */
  public static NfeSefazInfAdic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazInfAdic.class);
  }

  /**
   * Convert an instance of NfeSefazInfAdic to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

