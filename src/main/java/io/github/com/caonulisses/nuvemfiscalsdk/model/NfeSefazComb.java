/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfeSefazCIDE;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfeSefazEncerrante;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfeSefazOrigComb;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Informar apenas para operações com combustíveis líquidos.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazComb {
  public static final String SERIALIZED_NAME_C_PROD_A_N_P = "cProdANP";
  @SerializedName(SERIALIZED_NAME_C_PROD_A_N_P)
  @javax.annotation.Nullable
  private Integer cProdANP;

  public static final String SERIALIZED_NAME_DESC_A_N_P = "descANP";
  @SerializedName(SERIALIZED_NAME_DESC_A_N_P)
  @javax.annotation.Nullable
  private String descANP;

  public static final String SERIALIZED_NAME_P_G_L_P = "pGLP";
  @SerializedName(SERIALIZED_NAME_P_G_L_P)
  @javax.annotation.Nullable
  private BigDecimal pGLP;

  public static final String SERIALIZED_NAME_P_G_NN = "pGNn";
  @SerializedName(SERIALIZED_NAME_P_G_NN)
  @javax.annotation.Nullable
  private BigDecimal pGNn;

  public static final String SERIALIZED_NAME_P_G_NI = "pGNi";
  @SerializedName(SERIALIZED_NAME_P_G_NI)
  @javax.annotation.Nullable
  private BigDecimal pGNi;

  public static final String SERIALIZED_NAME_V_PART = "vPart";
  @SerializedName(SERIALIZED_NAME_V_PART)
  @javax.annotation.Nullable
  private BigDecimal vPart;

  public static final String SERIALIZED_NAME_C_O_D_I_F = "CODIF";
  @SerializedName(SERIALIZED_NAME_C_O_D_I_F)
  @javax.annotation.Nullable
  private String CODIF;

  public static final String SERIALIZED_NAME_Q_TEMP = "qTemp";
  @SerializedName(SERIALIZED_NAME_Q_TEMP)
  @javax.annotation.Nullable
  private BigDecimal qTemp;

  public static final String SERIALIZED_NAME_UF_CONS = "UFCons";
  @SerializedName(SERIALIZED_NAME_UF_CONS)
  @javax.annotation.Nullable
  private String ufCons;

  public static final String SERIALIZED_NAME_C_I_D_E = "CIDE";
  @SerializedName(SERIALIZED_NAME_C_I_D_E)
  @javax.annotation.Nullable
  private NfeSefazCIDE CIDE;

  public static final String SERIALIZED_NAME_ENCERRANTE = "encerrante";
  @SerializedName(SERIALIZED_NAME_ENCERRANTE)
  @javax.annotation.Nullable
  private NfeSefazEncerrante encerrante;

  public static final String SERIALIZED_NAME_P_BIO = "pBio";
  @SerializedName(SERIALIZED_NAME_P_BIO)
  @javax.annotation.Nullable
  private BigDecimal pBio;

  public static final String SERIALIZED_NAME_ORIG_COMB = "origComb";
  @SerializedName(SERIALIZED_NAME_ORIG_COMB)
  @javax.annotation.Nullable
  private List<NfeSefazOrigComb> origComb = new ArrayList<>();

  public NfeSefazComb() {
  }

  public NfeSefazComb cProdANP(@javax.annotation.Nullable Integer cProdANP) {
    this.cProdANP = cProdANP;
    return this;
  }

  /**
   * Código de produto da ANP. codificação de produtos do SIMP (http://www.anp.gov.br).
   * minimum: 0
   * maximum: 999999999
   * @return cProdANP
   */
  @javax.annotation.Nullable
  public Integer getcProdANP() {
    return cProdANP;
  }

  public void setcProdANP(@javax.annotation.Nullable Integer cProdANP) {
    this.cProdANP = cProdANP;
  }


  public NfeSefazComb descANP(@javax.annotation.Nullable String descANP) {
    this.descANP = descANP;
    return this;
  }

  /**
   * Descrição do Produto conforme ANP. Utilizar a descrição de produtos do Sistema de Informações de Movimentação de Produtos - SIMP (http://www.anp.gov.br/simp/).
   * @return descANP
   */
  @javax.annotation.Nullable
  public String getDescANP() {
    return descANP;
  }

  public void setDescANP(@javax.annotation.Nullable String descANP) {
    this.descANP = descANP;
  }


  public NfeSefazComb pGLP(@javax.annotation.Nullable BigDecimal pGLP) {
    this.pGLP = pGLP;
    return this;
  }

  /**
   * Percentual do GLP derivado do petróleo no produto GLP (cProdANP&#x3D;210203001). Informar em número decimal o percentual do GLP derivado de petróleo no produto GLP. Valores 0 a 100.
   * minimum: 0
   * maximum: 1E+2
   * @return pGLP
   */
  @javax.annotation.Nullable
  public BigDecimal getpGLP() {
    return pGLP;
  }

  public void setpGLP(@javax.annotation.Nullable BigDecimal pGLP) {
    this.pGLP = pGLP;
  }


  public NfeSefazComb pGNn(@javax.annotation.Nullable BigDecimal pGNn) {
    this.pGNn = pGNn;
    return this;
  }

  /**
   * Percentual de gás natural nacional - GLGNn para o produto GLP (cProdANP&#x3D;210203001). Informar em número decimal o percentual do Gás Natural Nacional - GLGNn para o produto GLP. Valores de 0 a 100.
   * minimum: 0
   * maximum: 1E+2
   * @return pGNn
   */
  @javax.annotation.Nullable
  public BigDecimal getpGNn() {
    return pGNn;
  }

  public void setpGNn(@javax.annotation.Nullable BigDecimal pGNn) {
    this.pGNn = pGNn;
  }


  public NfeSefazComb pGNi(@javax.annotation.Nullable BigDecimal pGNi) {
    this.pGNi = pGNi;
    return this;
  }

  /**
   * Percentual de gás natural importado GLGNi para o produto GLP (cProdANP&#x3D;210203001). Informar em número deciaml o percentual do Gás Natural Importado - GLGNi para o produto GLP. Valores de 0 a 100.
   * minimum: 0
   * maximum: 1E+2
   * @return pGNi
   */
  @javax.annotation.Nullable
  public BigDecimal getpGNi() {
    return pGNi;
  }

  public void setpGNi(@javax.annotation.Nullable BigDecimal pGNi) {
    this.pGNi = pGNi;
  }


  public NfeSefazComb vPart(@javax.annotation.Nullable BigDecimal vPart) {
    this.vPart = vPart;
    return this;
  }

  /**
   * Valor de partida (cProdANP&#x3D;210203001). Deve ser informado neste campo o valor por quilograma sem ICMS.
   * minimum: 0
   * @return vPart
   */
  @javax.annotation.Nullable
  public BigDecimal getvPart() {
    return vPart;
  }

  public void setvPart(@javax.annotation.Nullable BigDecimal vPart) {
    this.vPart = vPart;
  }


  public NfeSefazComb CODIF(@javax.annotation.Nullable String CODIF) {
    this.CODIF = CODIF;
    return this;
  }

  /**
   * Código de autorização / registro do CODIF. Informar apenas quando a UF utilizar o CODIF (Sistema de Controle do    Diferimento do Imposto nas Operações com AEAC - Álcool Etílico Anidro Combustível).
   * @return CODIF
   */
  @javax.annotation.Nullable
  public String getCODIF() {
    return CODIF;
  }

  public void setCODIF(@javax.annotation.Nullable String CODIF) {
    this.CODIF = CODIF;
  }


  public NfeSefazComb qTemp(@javax.annotation.Nullable BigDecimal qTemp) {
    this.qTemp = qTemp;
    return this;
  }

  /**
   * Quantidade de combustível  faturada à temperatura ambiente.  Informar quando a quantidade  faturada informada no campo  qCom (I10) tiver sido ajustada para  uma temperatura diferente da  ambiente.
   * minimum: 0
   * @return qTemp
   */
  @javax.annotation.Nullable
  public BigDecimal getqTemp() {
    return qTemp;
  }

  public void setqTemp(@javax.annotation.Nullable BigDecimal qTemp) {
    this.qTemp = qTemp;
  }


  public NfeSefazComb ufCons(@javax.annotation.Nullable String ufCons) {
    this.ufCons = ufCons;
    return this;
  }

  /**
   * Sigla da UF de Consumo.
   * @return ufCons
   */
  @javax.annotation.Nullable
  public String getUfCons() {
    return ufCons;
  }

  public void setUfCons(@javax.annotation.Nullable String ufCons) {
    this.ufCons = ufCons;
  }


  public NfeSefazComb CIDE(@javax.annotation.Nullable NfeSefazCIDE CIDE) {
    this.CIDE = CIDE;
    return this;
  }

  /**
   * Get CIDE
   * @return CIDE
   */
  @javax.annotation.Nullable
  public NfeSefazCIDE getCIDE() {
    return CIDE;
  }

  public void setCIDE(@javax.annotation.Nullable NfeSefazCIDE CIDE) {
    this.CIDE = CIDE;
  }


  public NfeSefazComb encerrante(@javax.annotation.Nullable NfeSefazEncerrante encerrante) {
    this.encerrante = encerrante;
    return this;
  }

  /**
   * Get encerrante
   * @return encerrante
   */
  @javax.annotation.Nullable
  public NfeSefazEncerrante getEncerrante() {
    return encerrante;
  }

  public void setEncerrante(@javax.annotation.Nullable NfeSefazEncerrante encerrante) {
    this.encerrante = encerrante;
  }


  public NfeSefazComb pBio(@javax.annotation.Nullable BigDecimal pBio) {
    this.pBio = pBio;
    return this;
  }

  /**
   * Percentual do índice de mistura do Biodiesel (B100) no Óleo Diesel B instituído pelo órgão regulamentador.
   * minimum: 0
   * maximum: 1E+2
   * @return pBio
   */
  @javax.annotation.Nullable
  public BigDecimal getpBio() {
    return pBio;
  }

  public void setpBio(@javax.annotation.Nullable BigDecimal pBio) {
    this.pBio = pBio;
  }


  public NfeSefazComb origComb(@javax.annotation.Nullable List<NfeSefazOrigComb> origComb) {
    this.origComb = origComb;
    return this;
  }

  public NfeSefazComb addOrigCombItem(NfeSefazOrigComb origCombItem) {
    if (this.origComb == null) {
      this.origComb = new ArrayList<>();
    }
    this.origComb.add(origCombItem);
    return this;
  }

  /**
   * Get origComb
   * @return origComb
   */
  @javax.annotation.Nullable
  public List<NfeSefazOrigComb> getOrigComb() {
    return origComb;
  }

  public void setOrigComb(@javax.annotation.Nullable List<NfeSefazOrigComb> origComb) {
    this.origComb = origComb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazComb nfeSefazComb = (NfeSefazComb) o;
    return Objects.equals(this.cProdANP, nfeSefazComb.cProdANP) &&
        Objects.equals(this.descANP, nfeSefazComb.descANP) &&
        Objects.equals(this.pGLP, nfeSefazComb.pGLP) &&
        Objects.equals(this.pGNn, nfeSefazComb.pGNn) &&
        Objects.equals(this.pGNi, nfeSefazComb.pGNi) &&
        Objects.equals(this.vPart, nfeSefazComb.vPart) &&
        Objects.equals(this.CODIF, nfeSefazComb.CODIF) &&
        Objects.equals(this.qTemp, nfeSefazComb.qTemp) &&
        Objects.equals(this.ufCons, nfeSefazComb.ufCons) &&
        Objects.equals(this.CIDE, nfeSefazComb.CIDE) &&
        Objects.equals(this.encerrante, nfeSefazComb.encerrante) &&
        Objects.equals(this.pBio, nfeSefazComb.pBio) &&
        Objects.equals(this.origComb, nfeSefazComb.origComb);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cProdANP, descANP, pGLP, pGNn, pGNi, vPart, CODIF, qTemp, ufCons, CIDE, encerrante, pBio, origComb);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazComb {\n");
    sb.append("    cProdANP: ").append(toIndentedString(cProdANP)).append("\n");
    sb.append("    descANP: ").append(toIndentedString(descANP)).append("\n");
    sb.append("    pGLP: ").append(toIndentedString(pGLP)).append("\n");
    sb.append("    pGNn: ").append(toIndentedString(pGNn)).append("\n");
    sb.append("    pGNi: ").append(toIndentedString(pGNi)).append("\n");
    sb.append("    vPart: ").append(toIndentedString(vPart)).append("\n");
    sb.append("    CODIF: ").append(toIndentedString(CODIF)).append("\n");
    sb.append("    qTemp: ").append(toIndentedString(qTemp)).append("\n");
    sb.append("    ufCons: ").append(toIndentedString(ufCons)).append("\n");
    sb.append("    CIDE: ").append(toIndentedString(CIDE)).append("\n");
    sb.append("    encerrante: ").append(toIndentedString(encerrante)).append("\n");
    sb.append("    pBio: ").append(toIndentedString(pBio)).append("\n");
    sb.append("    origComb: ").append(toIndentedString(origComb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cProdANP");
    openapiFields.add("descANP");
    openapiFields.add("pGLP");
    openapiFields.add("pGNn");
    openapiFields.add("pGNi");
    openapiFields.add("vPart");
    openapiFields.add("CODIF");
    openapiFields.add("qTemp");
    openapiFields.add("UFCons");
    openapiFields.add("CIDE");
    openapiFields.add("encerrante");
    openapiFields.add("pBio");
    openapiFields.add("origComb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cProdANP");
    openapiRequiredFields.add("descANP");
    openapiRequiredFields.add("UFCons");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazComb
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazComb.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazComb is not found in the empty JSON string", NfeSefazComb.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazComb.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazComb` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfeSefazComb.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("descANP") != null && !jsonObj.get("descANP").isJsonNull()) && !jsonObj.get("descANP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descANP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descANP").toString()));
      }
      if ((jsonObj.get("CODIF") != null && !jsonObj.get("CODIF").isJsonNull()) && !jsonObj.get("CODIF").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CODIF` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CODIF").toString()));
      }
      if ((jsonObj.get("UFCons") != null && !jsonObj.get("UFCons").isJsonNull()) && !jsonObj.get("UFCons").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UFCons` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UFCons").toString()));
      }
      // validate the optional field `CIDE`
      if (jsonObj.get("CIDE") != null && !jsonObj.get("CIDE").isJsonNull()) {
        NfeSefazCIDE.validateJsonElement(jsonObj.get("CIDE"));
      }
      // validate the optional field `encerrante`
      if (jsonObj.get("encerrante") != null && !jsonObj.get("encerrante").isJsonNull()) {
        NfeSefazEncerrante.validateJsonElement(jsonObj.get("encerrante"));
      }
      if (jsonObj.get("origComb") != null && !jsonObj.get("origComb").isJsonNull()) {
        JsonArray jsonArrayorigComb = jsonObj.getAsJsonArray("origComb");
        if (jsonArrayorigComb != null) {
          // ensure the json data is an array
          if (!jsonObj.get("origComb").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `origComb` to be an array in the JSON string but got `%s`", jsonObj.get("origComb").toString()));
          }

          // validate the optional field `origComb` (array)
          for (int i = 0; i < jsonArrayorigComb.size(); i++) {
            NfeSefazOrigComb.validateJsonElement(jsonArrayorigComb.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazComb.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazComb' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazComb> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazComb.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazComb>() {
           @Override
           public void write(JsonWriter out, NfeSefazComb value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazComb read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazComb given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazComb
   * @throws IOException if the JSON string is invalid with respect to NfeSefazComb
   */
  public static NfeSefazComb fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazComb.class);
  }

  /**
   * Convert an instance of NfeSefazComb to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

