/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MdfeSefazLacUnidTransp;
import org.openapitools.client.model.MdfeSefazUnidCarga;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Informações das Unidades de Transporte (Carreta/Reboque/Vagão).  Deve ser preenchido com as informações das unidades de transporte utilizadas.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class MdfeSefazUnidadeTransp {
  public static final String SERIALIZED_NAME_TP_UNID_TRANSP = "tpUnidTransp";
  @SerializedName(SERIALIZED_NAME_TP_UNID_TRANSP)
  @javax.annotation.Nullable
  private Integer tpUnidTransp;

  public static final String SERIALIZED_NAME_ID_UNID_TRANSP = "idUnidTransp";
  @SerializedName(SERIALIZED_NAME_ID_UNID_TRANSP)
  @javax.annotation.Nullable
  private String idUnidTransp;

  public static final String SERIALIZED_NAME_LAC_UNID_TRANSP = "lacUnidTransp";
  @SerializedName(SERIALIZED_NAME_LAC_UNID_TRANSP)
  @javax.annotation.Nullable
  private List<MdfeSefazLacUnidTransp> lacUnidTransp = new ArrayList<>();

  public static final String SERIALIZED_NAME_INF_UNID_CARGA = "infUnidCarga";
  @SerializedName(SERIALIZED_NAME_INF_UNID_CARGA)
  @javax.annotation.Nullable
  private List<MdfeSefazUnidCarga> infUnidCarga = new ArrayList<>();

  public static final String SERIALIZED_NAME_QTD_RAT = "qtdRat";
  @SerializedName(SERIALIZED_NAME_QTD_RAT)
  @javax.annotation.Nullable
  private BigDecimal qtdRat;

  public MdfeSefazUnidadeTransp() {
  }

  public MdfeSefazUnidadeTransp tpUnidTransp(@javax.annotation.Nullable Integer tpUnidTransp) {
    this.tpUnidTransp = tpUnidTransp;
    return this;
  }

  /**
   * Tipo da Unidade de Transporte.  * 1 - Rodoviário Tração  * 2 - Rodoviário Reboque  * 3 - Navio  * 4 - Balsa  * 5 - Aeronave  * 6 - Vagão  * 7 - Outros
   * @return tpUnidTransp
   */
  @javax.annotation.Nullable
  public Integer getTpUnidTransp() {
    return tpUnidTransp;
  }

  public void setTpUnidTransp(@javax.annotation.Nullable Integer tpUnidTransp) {
    this.tpUnidTransp = tpUnidTransp;
  }


  public MdfeSefazUnidadeTransp idUnidTransp(@javax.annotation.Nullable String idUnidTransp) {
    this.idUnidTransp = idUnidTransp;
    return this;
  }

  /**
   * Identificação da Unidade de Transporte.  Informar a identificação conforme o tipo de unidade de transporte.  Por exemplo: para rodoviário tração ou reboque deverá preencher com a placa do veículo.
   * @return idUnidTransp
   */
  @javax.annotation.Nullable
  public String getIdUnidTransp() {
    return idUnidTransp;
  }

  public void setIdUnidTransp(@javax.annotation.Nullable String idUnidTransp) {
    this.idUnidTransp = idUnidTransp;
  }


  public MdfeSefazUnidadeTransp lacUnidTransp(@javax.annotation.Nullable List<MdfeSefazLacUnidTransp> lacUnidTransp) {
    this.lacUnidTransp = lacUnidTransp;
    return this;
  }

  public MdfeSefazUnidadeTransp addLacUnidTranspItem(MdfeSefazLacUnidTransp lacUnidTranspItem) {
    if (this.lacUnidTransp == null) {
      this.lacUnidTransp = new ArrayList<>();
    }
    this.lacUnidTransp.add(lacUnidTranspItem);
    return this;
  }

  /**
   * Get lacUnidTransp
   * @return lacUnidTransp
   */
  @javax.annotation.Nullable
  public List<MdfeSefazLacUnidTransp> getLacUnidTransp() {
    return lacUnidTransp;
  }

  public void setLacUnidTransp(@javax.annotation.Nullable List<MdfeSefazLacUnidTransp> lacUnidTransp) {
    this.lacUnidTransp = lacUnidTransp;
  }


  public MdfeSefazUnidadeTransp infUnidCarga(@javax.annotation.Nullable List<MdfeSefazUnidCarga> infUnidCarga) {
    this.infUnidCarga = infUnidCarga;
    return this;
  }

  public MdfeSefazUnidadeTransp addInfUnidCargaItem(MdfeSefazUnidCarga infUnidCargaItem) {
    if (this.infUnidCarga == null) {
      this.infUnidCarga = new ArrayList<>();
    }
    this.infUnidCarga.add(infUnidCargaItem);
    return this;
  }

  /**
   * Get infUnidCarga
   * @return infUnidCarga
   */
  @javax.annotation.Nullable
  public List<MdfeSefazUnidCarga> getInfUnidCarga() {
    return infUnidCarga;
  }

  public void setInfUnidCarga(@javax.annotation.Nullable List<MdfeSefazUnidCarga> infUnidCarga) {
    this.infUnidCarga = infUnidCarga;
  }


  public MdfeSefazUnidadeTransp qtdRat(@javax.annotation.Nullable BigDecimal qtdRat) {
    this.qtdRat = qtdRat;
    return this;
  }

  /**
   * Quantidade rateada (Peso,Volume).
   * minimum: 0
   * @return qtdRat
   */
  @javax.annotation.Nullable
  public BigDecimal getQtdRat() {
    return qtdRat;
  }

  public void setQtdRat(@javax.annotation.Nullable BigDecimal qtdRat) {
    this.qtdRat = qtdRat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MdfeSefazUnidadeTransp mdfeSefazUnidadeTransp = (MdfeSefazUnidadeTransp) o;
    return Objects.equals(this.tpUnidTransp, mdfeSefazUnidadeTransp.tpUnidTransp) &&
        Objects.equals(this.idUnidTransp, mdfeSefazUnidadeTransp.idUnidTransp) &&
        Objects.equals(this.lacUnidTransp, mdfeSefazUnidadeTransp.lacUnidTransp) &&
        Objects.equals(this.infUnidCarga, mdfeSefazUnidadeTransp.infUnidCarga) &&
        Objects.equals(this.qtdRat, mdfeSefazUnidadeTransp.qtdRat);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tpUnidTransp, idUnidTransp, lacUnidTransp, infUnidCarga, qtdRat);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MdfeSefazUnidadeTransp {\n");
    sb.append("    tpUnidTransp: ").append(toIndentedString(tpUnidTransp)).append("\n");
    sb.append("    idUnidTransp: ").append(toIndentedString(idUnidTransp)).append("\n");
    sb.append("    lacUnidTransp: ").append(toIndentedString(lacUnidTransp)).append("\n");
    sb.append("    infUnidCarga: ").append(toIndentedString(infUnidCarga)).append("\n");
    sb.append("    qtdRat: ").append(toIndentedString(qtdRat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tpUnidTransp");
    openapiFields.add("idUnidTransp");
    openapiFields.add("lacUnidTransp");
    openapiFields.add("infUnidCarga");
    openapiFields.add("qtdRat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tpUnidTransp");
    openapiRequiredFields.add("idUnidTransp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MdfeSefazUnidadeTransp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MdfeSefazUnidadeTransp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MdfeSefazUnidadeTransp is not found in the empty JSON string", MdfeSefazUnidadeTransp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MdfeSefazUnidadeTransp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MdfeSefazUnidadeTransp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MdfeSefazUnidadeTransp.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("idUnidTransp") != null && !jsonObj.get("idUnidTransp").isJsonNull()) && !jsonObj.get("idUnidTransp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idUnidTransp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idUnidTransp").toString()));
      }
      if (jsonObj.get("lacUnidTransp") != null && !jsonObj.get("lacUnidTransp").isJsonNull()) {
        JsonArray jsonArraylacUnidTransp = jsonObj.getAsJsonArray("lacUnidTransp");
        if (jsonArraylacUnidTransp != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lacUnidTransp").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lacUnidTransp` to be an array in the JSON string but got `%s`", jsonObj.get("lacUnidTransp").toString()));
          }

          // validate the optional field `lacUnidTransp` (array)
          for (int i = 0; i < jsonArraylacUnidTransp.size(); i++) {
            MdfeSefazLacUnidTransp.validateJsonElement(jsonArraylacUnidTransp.get(i));
          };
        }
      }
      if (jsonObj.get("infUnidCarga") != null && !jsonObj.get("infUnidCarga").isJsonNull()) {
        JsonArray jsonArrayinfUnidCarga = jsonObj.getAsJsonArray("infUnidCarga");
        if (jsonArrayinfUnidCarga != null) {
          // ensure the json data is an array
          if (!jsonObj.get("infUnidCarga").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `infUnidCarga` to be an array in the JSON string but got `%s`", jsonObj.get("infUnidCarga").toString()));
          }

          // validate the optional field `infUnidCarga` (array)
          for (int i = 0; i < jsonArrayinfUnidCarga.size(); i++) {
            MdfeSefazUnidCarga.validateJsonElement(jsonArrayinfUnidCarga.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MdfeSefazUnidadeTransp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MdfeSefazUnidadeTransp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MdfeSefazUnidadeTransp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MdfeSefazUnidadeTransp.class));

       return (TypeAdapter<T>) new TypeAdapter<MdfeSefazUnidadeTransp>() {
           @Override
           public void write(JsonWriter out, MdfeSefazUnidadeTransp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MdfeSefazUnidadeTransp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MdfeSefazUnidadeTransp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MdfeSefazUnidadeTransp
   * @throws IOException if the JSON string is invalid with respect to MdfeSefazUnidadeTransp
   */
  public static MdfeSefazUnidadeTransp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MdfeSefazUnidadeTransp.class);
  }

  /**
   * Convert an instance of MdfeSefazUnidadeTransp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

