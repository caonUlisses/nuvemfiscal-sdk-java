/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Grupo de informações complementares disponível para todos os serviços prestados.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class InfoCompl {
  public static final String SERIALIZED_NAME_ID_DOC_TEC = "idDocTec";
  @SerializedName(SERIALIZED_NAME_ID_DOC_TEC)
  @javax.annotation.Nullable
  private String idDocTec;

  public static final String SERIALIZED_NAME_DOC_REF = "docRef";
  @SerializedName(SERIALIZED_NAME_DOC_REF)
  @javax.annotation.Nullable
  private String docRef;

  public static final String SERIALIZED_NAME_X_INF_COMP = "xInfComp";
  @SerializedName(SERIALIZED_NAME_X_INF_COMP)
  @javax.annotation.Nullable
  private String xInfComp;

  public InfoCompl() {
  }

  public InfoCompl idDocTec(@javax.annotation.Nullable String idDocTec) {
    this.idDocTec = idDocTec;
    return this;
  }

  /**
   * Identificador de Documento de Responsabilidade Técnica: ART, RRT, DRT, Outros.
   * @return idDocTec
   */
  @javax.annotation.Nullable
  public String getIdDocTec() {
    return idDocTec;
  }

  public void setIdDocTec(@javax.annotation.Nullable String idDocTec) {
    this.idDocTec = idDocTec;
  }


  public InfoCompl docRef(@javax.annotation.Nullable String docRef) {
    this.docRef = docRef;
    return this;
  }

  /**
   * Chave da nota, número identificador da nota, número do contrato ou outro identificador de documento emitido pelo prestador de serviços, que subsidia a emissão dessa nota pelo tomador do serviço ou intermediário (preenchimento obrigatório caso a nota esteja sendo emitida pelo Tomador ou intermediário do serviço).
   * @return docRef
   */
  @javax.annotation.Nullable
  public String getDocRef() {
    return docRef;
  }

  public void setDocRef(@javax.annotation.Nullable String docRef) {
    this.docRef = docRef;
  }


  public InfoCompl xInfComp(@javax.annotation.Nullable String xInfComp) {
    this.xInfComp = xInfComp;
    return this;
  }

  /**
   * Informações complementares.
   * @return xInfComp
   */
  @javax.annotation.Nullable
  public String getxInfComp() {
    return xInfComp;
  }

  public void setxInfComp(@javax.annotation.Nullable String xInfComp) {
    this.xInfComp = xInfComp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfoCompl infoCompl = (InfoCompl) o;
    return Objects.equals(this.idDocTec, infoCompl.idDocTec) &&
        Objects.equals(this.docRef, infoCompl.docRef) &&
        Objects.equals(this.xInfComp, infoCompl.xInfComp);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(idDocTec, docRef, xInfComp);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfoCompl {\n");
    sb.append("    idDocTec: ").append(toIndentedString(idDocTec)).append("\n");
    sb.append("    docRef: ").append(toIndentedString(docRef)).append("\n");
    sb.append("    xInfComp: ").append(toIndentedString(xInfComp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("idDocTec");
    openapiFields.add("docRef");
    openapiFields.add("xInfComp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InfoCompl
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InfoCompl.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InfoCompl is not found in the empty JSON string", InfoCompl.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InfoCompl.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InfoCompl` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("idDocTec") != null && !jsonObj.get("idDocTec").isJsonNull()) && !jsonObj.get("idDocTec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idDocTec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idDocTec").toString()));
      }
      if ((jsonObj.get("docRef") != null && !jsonObj.get("docRef").isJsonNull()) && !jsonObj.get("docRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docRef").toString()));
      }
      if ((jsonObj.get("xInfComp") != null && !jsonObj.get("xInfComp").isJsonNull()) && !jsonObj.get("xInfComp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xInfComp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xInfComp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InfoCompl.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InfoCompl' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InfoCompl> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InfoCompl.class));

       return (TypeAdapter<T>) new TypeAdapter<InfoCompl>() {
           @Override
           public void write(JsonWriter out, InfoCompl value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InfoCompl read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InfoCompl given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InfoCompl
   * @throws IOException if the JSON string is invalid with respect to InfoCompl
   */
  public static InfoCompl fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InfoCompl.class);
  }

  /**
   * Convert an instance of InfoCompl to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

