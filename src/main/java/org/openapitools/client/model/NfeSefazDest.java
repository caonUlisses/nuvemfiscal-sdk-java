/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NfeSefazEndereco;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identificação do Destinatário.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazDest {
  public static final String SERIALIZED_NAME_C_N_P_J = "CNPJ";
  @SerializedName(SERIALIZED_NAME_C_N_P_J)
  @javax.annotation.Nullable
  private String CNPJ;

  public static final String SERIALIZED_NAME_C_P_F = "CPF";
  @SerializedName(SERIALIZED_NAME_C_P_F)
  @javax.annotation.Nullable
  private String CPF;

  public static final String SERIALIZED_NAME_ID_ESTRANGEIRO = "idEstrangeiro";
  @SerializedName(SERIALIZED_NAME_ID_ESTRANGEIRO)
  @javax.annotation.Nullable
  private String idEstrangeiro;

  public static final String SERIALIZED_NAME_X_NOME = "xNome";
  @SerializedName(SERIALIZED_NAME_X_NOME)
  @javax.annotation.Nullable
  private String xNome;

  public static final String SERIALIZED_NAME_ENDER_DEST = "enderDest";
  @SerializedName(SERIALIZED_NAME_ENDER_DEST)
  @javax.annotation.Nullable
  private NfeSefazEndereco enderDest;

  public static final String SERIALIZED_NAME_IND_I_E_DEST = "indIEDest";
  @SerializedName(SERIALIZED_NAME_IND_I_E_DEST)
  @javax.annotation.Nullable
  private Integer indIEDest;

  public static final String SERIALIZED_NAME_I_E = "IE";
  @SerializedName(SERIALIZED_NAME_I_E)
  @javax.annotation.Nullable
  private String IE;

  public static final String SERIALIZED_NAME_I_S_U_F = "ISUF";
  @SerializedName(SERIALIZED_NAME_I_S_U_F)
  @javax.annotation.Nullable
  private String ISUF;

  public static final String SERIALIZED_NAME_I_M = "IM";
  @SerializedName(SERIALIZED_NAME_I_M)
  @javax.annotation.Nullable
  private String IM;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public NfeSefazDest() {
  }

  public NfeSefazDest CNPJ(@javax.annotation.Nullable String CNPJ) {
    this.CNPJ = CNPJ;
    return this;
  }

  /**
   * Número do CNPJ.
   * @return CNPJ
   */
  @javax.annotation.Nullable
  public String getCNPJ() {
    return CNPJ;
  }

  public void setCNPJ(@javax.annotation.Nullable String CNPJ) {
    this.CNPJ = CNPJ;
  }


  public NfeSefazDest CPF(@javax.annotation.Nullable String CPF) {
    this.CPF = CPF;
    return this;
  }

  /**
   * Número do CPF.
   * @return CPF
   */
  @javax.annotation.Nullable
  public String getCPF() {
    return CPF;
  }

  public void setCPF(@javax.annotation.Nullable String CPF) {
    this.CPF = CPF;
  }


  public NfeSefazDest idEstrangeiro(@javax.annotation.Nullable String idEstrangeiro) {
    this.idEstrangeiro = idEstrangeiro;
    return this;
  }

  /**
   * Identificador do destinatário, em caso de comprador estrangeiro.
   * @return idEstrangeiro
   */
  @javax.annotation.Nullable
  public String getIdEstrangeiro() {
    return idEstrangeiro;
  }

  public void setIdEstrangeiro(@javax.annotation.Nullable String idEstrangeiro) {
    this.idEstrangeiro = idEstrangeiro;
  }


  public NfeSefazDest xNome(@javax.annotation.Nullable String xNome) {
    this.xNome = xNome;
    return this;
  }

  /**
   * Razão Social ou nome do destinatário.
   * @return xNome
   */
  @javax.annotation.Nullable
  public String getxNome() {
    return xNome;
  }

  public void setxNome(@javax.annotation.Nullable String xNome) {
    this.xNome = xNome;
  }


  public NfeSefazDest enderDest(@javax.annotation.Nullable NfeSefazEndereco enderDest) {
    this.enderDest = enderDest;
    return this;
  }

  /**
   * Get enderDest
   * @return enderDest
   */
  @javax.annotation.Nullable
  public NfeSefazEndereco getEnderDest() {
    return enderDest;
  }

  public void setEnderDest(@javax.annotation.Nullable NfeSefazEndereco enderDest) {
    this.enderDest = enderDest;
  }


  public NfeSefazDest indIEDest(@javax.annotation.Nullable Integer indIEDest) {
    this.indIEDest = indIEDest;
    return this;
  }

  /**
   * Indicador da IE do destinatário:  * 1 - Contribuinte ICMSpagamento à vista  * 2 - Contribuinte isento de inscrição  * 9 - Não Contribuinte
   * @return indIEDest
   */
  @javax.annotation.Nullable
  public Integer getIndIEDest() {
    return indIEDest;
  }

  public void setIndIEDest(@javax.annotation.Nullable Integer indIEDest) {
    this.indIEDest = indIEDest;
  }


  public NfeSefazDest IE(@javax.annotation.Nullable String IE) {
    this.IE = IE;
    return this;
  }

  /**
   * Inscrição Estadual (obrigatório nas operações com contribuintes do ICMS).
   * @return IE
   */
  @javax.annotation.Nullable
  public String getIE() {
    return IE;
  }

  public void setIE(@javax.annotation.Nullable String IE) {
    this.IE = IE;
  }


  public NfeSefazDest ISUF(@javax.annotation.Nullable String ISUF) {
    this.ISUF = ISUF;
    return this;
  }

  /**
   * Inscrição na SUFRAMA (Obrigatório nas operações com as áreas com benefícios de incentivos fiscais sob controle da SUFRAMA) PL_005d - 11/08/09 - alterado para aceitar 8 ou 9 dígitos.
   * @return ISUF
   */
  @javax.annotation.Nullable
  public String getISUF() {
    return ISUF;
  }

  public void setISUF(@javax.annotation.Nullable String ISUF) {
    this.ISUF = ISUF;
  }


  public NfeSefazDest IM(@javax.annotation.Nullable String IM) {
    this.IM = IM;
    return this;
  }

  /**
   * Inscrição Municipal do tomador do serviço.
   * @return IM
   */
  @javax.annotation.Nullable
  public String getIM() {
    return IM;
  }

  public void setIM(@javax.annotation.Nullable String IM) {
    this.IM = IM;
  }


  public NfeSefazDest email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * Informar o e-mail do destinatário. O campo pode ser utilizado para informar o e-mail  de recepção da NF-e indicada pelo destinatário.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazDest nfeSefazDest = (NfeSefazDest) o;
    return Objects.equals(this.CNPJ, nfeSefazDest.CNPJ) &&
        Objects.equals(this.CPF, nfeSefazDest.CPF) &&
        Objects.equals(this.idEstrangeiro, nfeSefazDest.idEstrangeiro) &&
        Objects.equals(this.xNome, nfeSefazDest.xNome) &&
        Objects.equals(this.enderDest, nfeSefazDest.enderDest) &&
        Objects.equals(this.indIEDest, nfeSefazDest.indIEDest) &&
        Objects.equals(this.IE, nfeSefazDest.IE) &&
        Objects.equals(this.ISUF, nfeSefazDest.ISUF) &&
        Objects.equals(this.IM, nfeSefazDest.IM) &&
        Objects.equals(this.email, nfeSefazDest.email);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(CNPJ, CPF, idEstrangeiro, xNome, enderDest, indIEDest, IE, ISUF, IM, email);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazDest {\n");
    sb.append("    CNPJ: ").append(toIndentedString(CNPJ)).append("\n");
    sb.append("    CPF: ").append(toIndentedString(CPF)).append("\n");
    sb.append("    idEstrangeiro: ").append(toIndentedString(idEstrangeiro)).append("\n");
    sb.append("    xNome: ").append(toIndentedString(xNome)).append("\n");
    sb.append("    enderDest: ").append(toIndentedString(enderDest)).append("\n");
    sb.append("    indIEDest: ").append(toIndentedString(indIEDest)).append("\n");
    sb.append("    IE: ").append(toIndentedString(IE)).append("\n");
    sb.append("    ISUF: ").append(toIndentedString(ISUF)).append("\n");
    sb.append("    IM: ").append(toIndentedString(IM)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CNPJ");
    openapiFields.add("CPF");
    openapiFields.add("idEstrangeiro");
    openapiFields.add("xNome");
    openapiFields.add("enderDest");
    openapiFields.add("indIEDest");
    openapiFields.add("IE");
    openapiFields.add("ISUF");
    openapiFields.add("IM");
    openapiFields.add("email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("indIEDest");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazDest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazDest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazDest is not found in the empty JSON string", NfeSefazDest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazDest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazDest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfeSefazDest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CNPJ") != null && !jsonObj.get("CNPJ").isJsonNull()) && !jsonObj.get("CNPJ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CNPJ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CNPJ").toString()));
      }
      if ((jsonObj.get("CPF") != null && !jsonObj.get("CPF").isJsonNull()) && !jsonObj.get("CPF").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CPF` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CPF").toString()));
      }
      if ((jsonObj.get("idEstrangeiro") != null && !jsonObj.get("idEstrangeiro").isJsonNull()) && !jsonObj.get("idEstrangeiro").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idEstrangeiro` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idEstrangeiro").toString()));
      }
      if ((jsonObj.get("xNome") != null && !jsonObj.get("xNome").isJsonNull()) && !jsonObj.get("xNome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xNome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xNome").toString()));
      }
      // validate the optional field `enderDest`
      if (jsonObj.get("enderDest") != null && !jsonObj.get("enderDest").isJsonNull()) {
        NfeSefazEndereco.validateJsonElement(jsonObj.get("enderDest"));
      }
      if ((jsonObj.get("IE") != null && !jsonObj.get("IE").isJsonNull()) && !jsonObj.get("IE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IE").toString()));
      }
      if ((jsonObj.get("ISUF") != null && !jsonObj.get("ISUF").isJsonNull()) && !jsonObj.get("ISUF").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ISUF` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ISUF").toString()));
      }
      if ((jsonObj.get("IM") != null && !jsonObj.get("IM").isJsonNull()) && !jsonObj.get("IM").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IM` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IM").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazDest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazDest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazDest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazDest.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazDest>() {
           @Override
           public void write(JsonWriter out, NfeSefazDest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazDest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazDest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazDest
   * @throws IOException if the JSON string is invalid with respect to NfeSefazDest
   */
  public static NfeSefazDest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazDest.class);
  }

  /**
   * Convert an instance of NfeSefazDest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

