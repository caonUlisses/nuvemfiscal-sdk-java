/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CteSefazSeg;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Informações do Multimodal.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazMultimodal {
  public static final String SERIALIZED_NAME_C_O_T_M = "COTM";
  @SerializedName(SERIALIZED_NAME_C_O_T_M)
  @javax.annotation.Nullable
  private String COTM;

  public static final String SERIALIZED_NAME_IND_NEGOCIAVEL = "indNegociavel";
  @SerializedName(SERIALIZED_NAME_IND_NEGOCIAVEL)
  @javax.annotation.Nullable
  private Integer indNegociavel;

  public static final String SERIALIZED_NAME_SEG = "seg";
  @SerializedName(SERIALIZED_NAME_SEG)
  @javax.annotation.Nullable
  private CteSefazSeg seg;

  public CteSefazMultimodal() {
  }

  public CteSefazMultimodal COTM(@javax.annotation.Nullable String COTM) {
    this.COTM = COTM;
    return this;
  }

  /**
   * Número do Certificado do Operador de Transporte Multimodal.
   * @return COTM
   */
  @javax.annotation.Nullable
  public String getCOTM() {
    return COTM;
  }

  public void setCOTM(@javax.annotation.Nullable String COTM) {
    this.COTM = COTM;
  }


  public CteSefazMultimodal indNegociavel(@javax.annotation.Nullable Integer indNegociavel) {
    this.indNegociavel = indNegociavel;
    return this;
  }

  /**
   * Indicador Negociável  Preencher com: 0 - Não Negociável  * 1 - Negociável
   * @return indNegociavel
   */
  @javax.annotation.Nullable
  public Integer getIndNegociavel() {
    return indNegociavel;
  }

  public void setIndNegociavel(@javax.annotation.Nullable Integer indNegociavel) {
    this.indNegociavel = indNegociavel;
  }


  public CteSefazMultimodal seg(@javax.annotation.Nullable CteSefazSeg seg) {
    this.seg = seg;
    return this;
  }

  /**
   * Get seg
   * @return seg
   */
  @javax.annotation.Nullable
  public CteSefazSeg getSeg() {
    return seg;
  }

  public void setSeg(@javax.annotation.Nullable CteSefazSeg seg) {
    this.seg = seg;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazMultimodal cteSefazMultimodal = (CteSefazMultimodal) o;
    return Objects.equals(this.COTM, cteSefazMultimodal.COTM) &&
        Objects.equals(this.indNegociavel, cteSefazMultimodal.indNegociavel) &&
        Objects.equals(this.seg, cteSefazMultimodal.seg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(COTM, indNegociavel, seg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazMultimodal {\n");
    sb.append("    COTM: ").append(toIndentedString(COTM)).append("\n");
    sb.append("    indNegociavel: ").append(toIndentedString(indNegociavel)).append("\n");
    sb.append("    seg: ").append(toIndentedString(seg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("COTM");
    openapiFields.add("indNegociavel");
    openapiFields.add("seg");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("COTM");
    openapiRequiredFields.add("indNegociavel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazMultimodal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazMultimodal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazMultimodal is not found in the empty JSON string", CteSefazMultimodal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazMultimodal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazMultimodal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CteSefazMultimodal.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("COTM") != null && !jsonObj.get("COTM").isJsonNull()) && !jsonObj.get("COTM").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `COTM` to be a primitive type in the JSON string but got `%s`", jsonObj.get("COTM").toString()));
      }
      // validate the optional field `seg`
      if (jsonObj.get("seg") != null && !jsonObj.get("seg").isJsonNull()) {
        CteSefazSeg.validateJsonElement(jsonObj.get("seg"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazMultimodal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazMultimodal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazMultimodal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazMultimodal.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazMultimodal>() {
           @Override
           public void write(JsonWriter out, CteSefazMultimodal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazMultimodal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazMultimodal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazMultimodal
   * @throws IOException if the JSON string is invalid with respect to CteSefazMultimodal
   */
  public static CteSefazMultimodal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazMultimodal.class);
  }

  /**
   * Convert an instance of CteSefazMultimodal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

