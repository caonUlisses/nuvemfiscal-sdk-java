/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CteSefazComp;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Valores da Prestação de Serviço.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazVPrest {
  public static final String SERIALIZED_NAME_V_T_PREST = "vTPrest";
  @SerializedName(SERIALIZED_NAME_V_T_PREST)
  @javax.annotation.Nullable
  private BigDecimal vTPrest;

  public static final String SERIALIZED_NAME_V_REC = "vRec";
  @SerializedName(SERIALIZED_NAME_V_REC)
  @javax.annotation.Nullable
  private BigDecimal vRec;

  public static final String SERIALIZED_NAME_COMP = "Comp";
  @SerializedName(SERIALIZED_NAME_COMP)
  @javax.annotation.Nullable
  private List<CteSefazComp> comp = new ArrayList<>();

  public CteSefazVPrest() {
  }

  public CteSefazVPrest vTPrest(@javax.annotation.Nullable BigDecimal vTPrest) {
    this.vTPrest = vTPrest;
    return this;
  }

  /**
   * Valor Total da Prestação do Serviço.  Pode conter zeros quando o CT-e for de complemento de ICMS.
   * minimum: 0
   * @return vTPrest
   */
  @javax.annotation.Nullable
  public BigDecimal getvTPrest() {
    return vTPrest;
  }

  public void setvTPrest(@javax.annotation.Nullable BigDecimal vTPrest) {
    this.vTPrest = vTPrest;
  }


  public CteSefazVPrest vRec(@javax.annotation.Nullable BigDecimal vRec) {
    this.vRec = vRec;
    return this;
  }

  /**
   * Valor a Receber.
   * minimum: 0
   * @return vRec
   */
  @javax.annotation.Nullable
  public BigDecimal getvRec() {
    return vRec;
  }

  public void setvRec(@javax.annotation.Nullable BigDecimal vRec) {
    this.vRec = vRec;
  }


  public CteSefazVPrest comp(@javax.annotation.Nullable List<CteSefazComp> comp) {
    this.comp = comp;
    return this;
  }

  public CteSefazVPrest addCompItem(CteSefazComp compItem) {
    if (this.comp == null) {
      this.comp = new ArrayList<>();
    }
    this.comp.add(compItem);
    return this;
  }

  /**
   * Get comp
   * @return comp
   */
  @javax.annotation.Nullable
  public List<CteSefazComp> getComp() {
    return comp;
  }

  public void setComp(@javax.annotation.Nullable List<CteSefazComp> comp) {
    this.comp = comp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazVPrest cteSefazVPrest = (CteSefazVPrest) o;
    return Objects.equals(this.vTPrest, cteSefazVPrest.vTPrest) &&
        Objects.equals(this.vRec, cteSefazVPrest.vRec) &&
        Objects.equals(this.comp, cteSefazVPrest.comp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vTPrest, vRec, comp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazVPrest {\n");
    sb.append("    vTPrest: ").append(toIndentedString(vTPrest)).append("\n");
    sb.append("    vRec: ").append(toIndentedString(vRec)).append("\n");
    sb.append("    comp: ").append(toIndentedString(comp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("vTPrest");
    openapiFields.add("vRec");
    openapiFields.add("Comp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("vTPrest");
    openapiRequiredFields.add("vRec");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazVPrest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazVPrest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazVPrest is not found in the empty JSON string", CteSefazVPrest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazVPrest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazVPrest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CteSefazVPrest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Comp") != null && !jsonObj.get("Comp").isJsonNull()) {
        JsonArray jsonArraycomp = jsonObj.getAsJsonArray("Comp");
        if (jsonArraycomp != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Comp").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Comp` to be an array in the JSON string but got `%s`", jsonObj.get("Comp").toString()));
          }

          // validate the optional field `Comp` (array)
          for (int i = 0; i < jsonArraycomp.size(); i++) {
            CteSefazComp.validateJsonElement(jsonArraycomp.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazVPrest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazVPrest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazVPrest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazVPrest.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazVPrest>() {
           @Override
           public void write(JsonWriter out, CteSefazVPrest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazVPrest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazVPrest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazVPrest
   * @throws IOException if the JSON string is invalid with respect to CteSefazVPrest
   */
  public static CteSefazVPrest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazVPrest.class);
  }

  /**
   * Convert an instance of CteSefazVPrest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

