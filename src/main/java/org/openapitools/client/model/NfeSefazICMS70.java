/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Tributação pelo ICMS  * 70 - Com redução de base de cálculo e cobrança do ICMS por substituição tributária
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazICMS70 {
  public static final String SERIALIZED_NAME_ORIG = "orig";
  @SerializedName(SERIALIZED_NAME_ORIG)
  @javax.annotation.Nullable
  private Integer orig;

  public static final String SERIALIZED_NAME_C_S_T = "CST";
  @SerializedName(SERIALIZED_NAME_C_S_T)
  @javax.annotation.Nullable
  private String CST;

  public static final String SERIALIZED_NAME_MOD_B_C = "modBC";
  @SerializedName(SERIALIZED_NAME_MOD_B_C)
  @javax.annotation.Nullable
  private Integer modBC;

  public static final String SERIALIZED_NAME_P_RED_B_C = "pRedBC";
  @SerializedName(SERIALIZED_NAME_P_RED_B_C)
  @javax.annotation.Nullable
  private BigDecimal pRedBC;

  public static final String SERIALIZED_NAME_V_B_C = "vBC";
  @SerializedName(SERIALIZED_NAME_V_B_C)
  @javax.annotation.Nullable
  private BigDecimal vBC;

  public static final String SERIALIZED_NAME_P_I_C_M_S = "pICMS";
  @SerializedName(SERIALIZED_NAME_P_I_C_M_S)
  @javax.annotation.Nullable
  private BigDecimal pICMS;

  public static final String SERIALIZED_NAME_V_I_C_M_S = "vICMS";
  @SerializedName(SERIALIZED_NAME_V_I_C_M_S)
  @javax.annotation.Nullable
  private BigDecimal vICMS;

  public static final String SERIALIZED_NAME_V_B_C_F_C_P = "vBCFCP";
  @SerializedName(SERIALIZED_NAME_V_B_C_F_C_P)
  @javax.annotation.Nullable
  private BigDecimal vBCFCP;

  public static final String SERIALIZED_NAME_P_F_C_P = "pFCP";
  @SerializedName(SERIALIZED_NAME_P_F_C_P)
  @javax.annotation.Nullable
  private BigDecimal pFCP;

  public static final String SERIALIZED_NAME_V_F_C_P = "vFCP";
  @SerializedName(SERIALIZED_NAME_V_F_C_P)
  @javax.annotation.Nullable
  private BigDecimal vFCP;

  public static final String SERIALIZED_NAME_MOD_B_C_S_T = "modBCST";
  @SerializedName(SERIALIZED_NAME_MOD_B_C_S_T)
  @javax.annotation.Nullable
  private Integer modBCST;

  public static final String SERIALIZED_NAME_P_M_V_A_S_T = "pMVAST";
  @SerializedName(SERIALIZED_NAME_P_M_V_A_S_T)
  @javax.annotation.Nullable
  private BigDecimal pMVAST;

  public static final String SERIALIZED_NAME_P_RED_B_C_S_T = "pRedBCST";
  @SerializedName(SERIALIZED_NAME_P_RED_B_C_S_T)
  @javax.annotation.Nullable
  private BigDecimal pRedBCST;

  public static final String SERIALIZED_NAME_V_B_C_S_T = "vBCST";
  @SerializedName(SERIALIZED_NAME_V_B_C_S_T)
  @javax.annotation.Nullable
  private BigDecimal vBCST;

  public static final String SERIALIZED_NAME_P_I_C_M_S_S_T = "pICMSST";
  @SerializedName(SERIALIZED_NAME_P_I_C_M_S_S_T)
  @javax.annotation.Nullable
  private BigDecimal pICMSST;

  public static final String SERIALIZED_NAME_V_I_C_M_S_S_T = "vICMSST";
  @SerializedName(SERIALIZED_NAME_V_I_C_M_S_S_T)
  @javax.annotation.Nullable
  private BigDecimal vICMSST;

  public static final String SERIALIZED_NAME_V_B_C_F_C_P_S_T = "vBCFCPST";
  @SerializedName(SERIALIZED_NAME_V_B_C_F_C_P_S_T)
  @javax.annotation.Nullable
  private BigDecimal vBCFCPST;

  public static final String SERIALIZED_NAME_P_F_C_P_S_T = "pFCPST";
  @SerializedName(SERIALIZED_NAME_P_F_C_P_S_T)
  @javax.annotation.Nullable
  private BigDecimal pFCPST;

  public static final String SERIALIZED_NAME_V_F_C_P_S_T = "vFCPST";
  @SerializedName(SERIALIZED_NAME_V_F_C_P_S_T)
  @javax.annotation.Nullable
  private BigDecimal vFCPST;

  public static final String SERIALIZED_NAME_V_I_C_M_S_DESON = "vICMSDeson";
  @SerializedName(SERIALIZED_NAME_V_I_C_M_S_DESON)
  @javax.annotation.Nullable
  private BigDecimal vICMSDeson;

  public static final String SERIALIZED_NAME_MOT_DES_I_C_M_S = "motDesICMS";
  @SerializedName(SERIALIZED_NAME_MOT_DES_I_C_M_S)
  @javax.annotation.Nullable
  private Integer motDesICMS;

  public static final String SERIALIZED_NAME_IND_DEDUZ_DESON = "indDeduzDeson";
  @SerializedName(SERIALIZED_NAME_IND_DEDUZ_DESON)
  @javax.annotation.Nullable
  private Integer indDeduzDeson;

  public static final String SERIALIZED_NAME_V_I_C_M_S_S_T_DESON = "vICMSSTDeson";
  @SerializedName(SERIALIZED_NAME_V_I_C_M_S_S_T_DESON)
  @javax.annotation.Nullable
  private BigDecimal vICMSSTDeson;

  public static final String SERIALIZED_NAME_MOT_DES_I_C_M_S_S_T = "motDesICMSST";
  @SerializedName(SERIALIZED_NAME_MOT_DES_I_C_M_S_S_T)
  @javax.annotation.Nullable
  private Integer motDesICMSST;

  public NfeSefazICMS70() {
  }

  public NfeSefazICMS70 orig(@javax.annotation.Nullable Integer orig) {
    this.orig = orig;
    return this;
  }

  /**
   * Origem da mercadoria:  * 0 - Nacional, exceto as indicadas nos códigos 3, 4, 5 e 8;  * 1 - Estrangeira - Importação direta, exceto a indicada no código 6;  * 2 - Estrangeira - Adquirida no mercado interno, exceto a indicada no código 7;  * 3 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 40%% e inferior ou igual a 70%%;  * 4 - Nacional, cuja produção tenha sido feita em conformidade com os processos produtivos básicos de que tratam as legislações citadas nos Ajustes;  * 5 - Nacional, mercadoria ou bem com Conteúdo de Importação inferior ou igual a 40%%;  * 6 - Estrangeira - Importação direta, sem similar nacional, constante em lista da CAMEX e gás natural;  * 7 - Estrangeira - Adquirida no mercado interno, sem similar nacional, constante lista CAMEX e gás natural;  * 8 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 70%%.
   * @return orig
   */
  @javax.annotation.Nullable
  public Integer getOrig() {
    return orig;
  }

  public void setOrig(@javax.annotation.Nullable Integer orig) {
    this.orig = orig;
  }


  public NfeSefazICMS70 CST(@javax.annotation.Nullable String CST) {
    this.CST = CST;
    return this;
  }

  /**
   * Tributção pelo ICMS  * 70 - Com redução de base de cálculo e cobrança do ICMS por substituição tributária
   * @return CST
   */
  @javax.annotation.Nullable
  public String getCST() {
    return CST;
  }

  public void setCST(@javax.annotation.Nullable String CST) {
    this.CST = CST;
  }


  public NfeSefazICMS70 modBC(@javax.annotation.Nullable Integer modBC) {
    this.modBC = modBC;
    return this;
  }

  /**
   * Modalidade de determinação da BC do ICMS:  * 0 - Margem Valor Agregado (%%)  * 1 - Pauta (valor)  * 2 - Preço Tabelado Máximo (valor)  * 3 - Valor da Operação
   * @return modBC
   */
  @javax.annotation.Nullable
  public Integer getModBC() {
    return modBC;
  }

  public void setModBC(@javax.annotation.Nullable Integer modBC) {
    this.modBC = modBC;
  }


  public NfeSefazICMS70 pRedBC(@javax.annotation.Nullable BigDecimal pRedBC) {
    this.pRedBC = pRedBC;
    return this;
  }

  /**
   * Percentual de redução da BC.
   * minimum: 0
   * @return pRedBC
   */
  @javax.annotation.Nullable
  public BigDecimal getpRedBC() {
    return pRedBC;
  }

  public void setpRedBC(@javax.annotation.Nullable BigDecimal pRedBC) {
    this.pRedBC = pRedBC;
  }


  public NfeSefazICMS70 vBC(@javax.annotation.Nullable BigDecimal vBC) {
    this.vBC = vBC;
    return this;
  }

  /**
   * Valor da BC do ICMS.
   * minimum: 0
   * @return vBC
   */
  @javax.annotation.Nullable
  public BigDecimal getvBC() {
    return vBC;
  }

  public void setvBC(@javax.annotation.Nullable BigDecimal vBC) {
    this.vBC = vBC;
  }


  public NfeSefazICMS70 pICMS(@javax.annotation.Nullable BigDecimal pICMS) {
    this.pICMS = pICMS;
    return this;
  }

  /**
   * Alíquota do ICMS.
   * minimum: 0
   * @return pICMS
   */
  @javax.annotation.Nullable
  public BigDecimal getpICMS() {
    return pICMS;
  }

  public void setpICMS(@javax.annotation.Nullable BigDecimal pICMS) {
    this.pICMS = pICMS;
  }


  public NfeSefazICMS70 vICMS(@javax.annotation.Nullable BigDecimal vICMS) {
    this.vICMS = vICMS;
    return this;
  }

  /**
   * Valor do ICMS.
   * minimum: 0
   * @return vICMS
   */
  @javax.annotation.Nullable
  public BigDecimal getvICMS() {
    return vICMS;
  }

  public void setvICMS(@javax.annotation.Nullable BigDecimal vICMS) {
    this.vICMS = vICMS;
  }


  public NfeSefazICMS70 vBCFCP(@javax.annotation.Nullable BigDecimal vBCFCP) {
    this.vBCFCP = vBCFCP;
    return this;
  }

  /**
   * Valor da Base de cálculo do FCP.
   * minimum: 0
   * @return vBCFCP
   */
  @javax.annotation.Nullable
  public BigDecimal getvBCFCP() {
    return vBCFCP;
  }

  public void setvBCFCP(@javax.annotation.Nullable BigDecimal vBCFCP) {
    this.vBCFCP = vBCFCP;
  }


  public NfeSefazICMS70 pFCP(@javax.annotation.Nullable BigDecimal pFCP) {
    this.pFCP = pFCP;
    return this;
  }

  /**
   * Percentual de ICMS relativo ao Fundo de Combate à Pobreza (FCP).
   * minimum: 0
   * @return pFCP
   */
  @javax.annotation.Nullable
  public BigDecimal getpFCP() {
    return pFCP;
  }

  public void setpFCP(@javax.annotation.Nullable BigDecimal pFCP) {
    this.pFCP = pFCP;
  }


  public NfeSefazICMS70 vFCP(@javax.annotation.Nullable BigDecimal vFCP) {
    this.vFCP = vFCP;
    return this;
  }

  /**
   * Valor do ICMS relativo ao Fundo de Combate à Pobreza (FCP).
   * minimum: 0
   * @return vFCP
   */
  @javax.annotation.Nullable
  public BigDecimal getvFCP() {
    return vFCP;
  }

  public void setvFCP(@javax.annotation.Nullable BigDecimal vFCP) {
    this.vFCP = vFCP;
  }


  public NfeSefazICMS70 modBCST(@javax.annotation.Nullable Integer modBCST) {
    this.modBCST = modBCST;
    return this;
  }

  /**
   * Modalidade de determinação da BC do ICMS ST:  * 0 - Preço tabelado ou máximo  sugerido  * 1 - Lista Negativa (valor)  * 2 - Lista Positiva (valor)  * 3 - Lista Neutra (valor)  * 4 - Margem Valor Agregado (%%)  * 5 - Pauta (valor)  * 6 - Valor da Operação
   * @return modBCST
   */
  @javax.annotation.Nullable
  public Integer getModBCST() {
    return modBCST;
  }

  public void setModBCST(@javax.annotation.Nullable Integer modBCST) {
    this.modBCST = modBCST;
  }


  public NfeSefazICMS70 pMVAST(@javax.annotation.Nullable BigDecimal pMVAST) {
    this.pMVAST = pMVAST;
    return this;
  }

  /**
   * Percentual da Margem de Valor Adicionado ICMS ST.
   * minimum: 0
   * @return pMVAST
   */
  @javax.annotation.Nullable
  public BigDecimal getpMVAST() {
    return pMVAST;
  }

  public void setpMVAST(@javax.annotation.Nullable BigDecimal pMVAST) {
    this.pMVAST = pMVAST;
  }


  public NfeSefazICMS70 pRedBCST(@javax.annotation.Nullable BigDecimal pRedBCST) {
    this.pRedBCST = pRedBCST;
    return this;
  }

  /**
   * Percentual de redução da BC ICMS ST.
   * minimum: 0
   * @return pRedBCST
   */
  @javax.annotation.Nullable
  public BigDecimal getpRedBCST() {
    return pRedBCST;
  }

  public void setpRedBCST(@javax.annotation.Nullable BigDecimal pRedBCST) {
    this.pRedBCST = pRedBCST;
  }


  public NfeSefazICMS70 vBCST(@javax.annotation.Nullable BigDecimal vBCST) {
    this.vBCST = vBCST;
    return this;
  }

  /**
   * Valor da BC do ICMS ST.
   * minimum: 0
   * @return vBCST
   */
  @javax.annotation.Nullable
  public BigDecimal getvBCST() {
    return vBCST;
  }

  public void setvBCST(@javax.annotation.Nullable BigDecimal vBCST) {
    this.vBCST = vBCST;
  }


  public NfeSefazICMS70 pICMSST(@javax.annotation.Nullable BigDecimal pICMSST) {
    this.pICMSST = pICMSST;
    return this;
  }

  /**
   * Alíquota do ICMS ST.
   * minimum: 0
   * @return pICMSST
   */
  @javax.annotation.Nullable
  public BigDecimal getpICMSST() {
    return pICMSST;
  }

  public void setpICMSST(@javax.annotation.Nullable BigDecimal pICMSST) {
    this.pICMSST = pICMSST;
  }


  public NfeSefazICMS70 vICMSST(@javax.annotation.Nullable BigDecimal vICMSST) {
    this.vICMSST = vICMSST;
    return this;
  }

  /**
   * Valor do ICMS ST.
   * minimum: 0
   * @return vICMSST
   */
  @javax.annotation.Nullable
  public BigDecimal getvICMSST() {
    return vICMSST;
  }

  public void setvICMSST(@javax.annotation.Nullable BigDecimal vICMSST) {
    this.vICMSST = vICMSST;
  }


  public NfeSefazICMS70 vBCFCPST(@javax.annotation.Nullable BigDecimal vBCFCPST) {
    this.vBCFCPST = vBCFCPST;
    return this;
  }

  /**
   * Valor da Base de cálculo do FCP retido por substituição tributária.
   * minimum: 0
   * @return vBCFCPST
   */
  @javax.annotation.Nullable
  public BigDecimal getvBCFCPST() {
    return vBCFCPST;
  }

  public void setvBCFCPST(@javax.annotation.Nullable BigDecimal vBCFCPST) {
    this.vBCFCPST = vBCFCPST;
  }


  public NfeSefazICMS70 pFCPST(@javax.annotation.Nullable BigDecimal pFCPST) {
    this.pFCPST = pFCPST;
    return this;
  }

  /**
   * Percentual de FCP retido por substituição tributária.
   * minimum: 0
   * @return pFCPST
   */
  @javax.annotation.Nullable
  public BigDecimal getpFCPST() {
    return pFCPST;
  }

  public void setpFCPST(@javax.annotation.Nullable BigDecimal pFCPST) {
    this.pFCPST = pFCPST;
  }


  public NfeSefazICMS70 vFCPST(@javax.annotation.Nullable BigDecimal vFCPST) {
    this.vFCPST = vFCPST;
    return this;
  }

  /**
   * Valor do FCP retido por substituição tributária.
   * minimum: 0
   * @return vFCPST
   */
  @javax.annotation.Nullable
  public BigDecimal getvFCPST() {
    return vFCPST;
  }

  public void setvFCPST(@javax.annotation.Nullable BigDecimal vFCPST) {
    this.vFCPST = vFCPST;
  }


  public NfeSefazICMS70 vICMSDeson(@javax.annotation.Nullable BigDecimal vICMSDeson) {
    this.vICMSDeson = vICMSDeson;
    return this;
  }

  /**
   * Valor do ICMS de desoneração.
   * minimum: 0
   * @return vICMSDeson
   */
  @javax.annotation.Nullable
  public BigDecimal getvICMSDeson() {
    return vICMSDeson;
  }

  public void setvICMSDeson(@javax.annotation.Nullable BigDecimal vICMSDeson) {
    this.vICMSDeson = vICMSDeson;
  }


  public NfeSefazICMS70 motDesICMS(@javax.annotation.Nullable Integer motDesICMS) {
    this.motDesICMS = motDesICMS;
    return this;
  }

  /**
   * Motivo da desoneração do ICMS:3-Uso na agropecuária  * 9 - Outros  * 12 - Fomento agropecuário
   * @return motDesICMS
   */
  @javax.annotation.Nullable
  public Integer getMotDesICMS() {
    return motDesICMS;
  }

  public void setMotDesICMS(@javax.annotation.Nullable Integer motDesICMS) {
    this.motDesICMS = motDesICMS;
  }


  public NfeSefazICMS70 indDeduzDeson(@javax.annotation.Nullable Integer indDeduzDeson) {
    this.indDeduzDeson = indDeduzDeson;
    return this;
  }

  /**
   * Indica se o valor do ICMS desonerado (vICMSDeson) deduz do valor do item (vProd):  * 0 - Valor do ICMS desonerado (vICMSDeson) não deduz do valor do item (vProd) / total da NF-e  * 1 - Valor do ICMS desonerado (vICMSDeson) deduz do valor do item (vProd) / total da NF-e
   * @return indDeduzDeson
   */
  @javax.annotation.Nullable
  public Integer getIndDeduzDeson() {
    return indDeduzDeson;
  }

  public void setIndDeduzDeson(@javax.annotation.Nullable Integer indDeduzDeson) {
    this.indDeduzDeson = indDeduzDeson;
  }


  public NfeSefazICMS70 vICMSSTDeson(@javax.annotation.Nullable BigDecimal vICMSSTDeson) {
    this.vICMSSTDeson = vICMSSTDeson;
    return this;
  }

  /**
   * Valor do ICMS-ST desonerado.
   * minimum: 0
   * @return vICMSSTDeson
   */
  @javax.annotation.Nullable
  public BigDecimal getvICMSSTDeson() {
    return vICMSSTDeson;
  }

  public void setvICMSSTDeson(@javax.annotation.Nullable BigDecimal vICMSSTDeson) {
    this.vICMSSTDeson = vICMSSTDeson;
  }


  public NfeSefazICMS70 motDesICMSST(@javax.annotation.Nullable Integer motDesICMSST) {
    this.motDesICMSST = motDesICMSST;
    return this;
  }

  /**
   * Motivo da desoneração do ICMS-ST: 3-Uso na agropecuária  * 9 - Outros  * 12 - Fomento agropecuário
   * @return motDesICMSST
   */
  @javax.annotation.Nullable
  public Integer getMotDesICMSST() {
    return motDesICMSST;
  }

  public void setMotDesICMSST(@javax.annotation.Nullable Integer motDesICMSST) {
    this.motDesICMSST = motDesICMSST;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazICMS70 nfeSefazICMS70 = (NfeSefazICMS70) o;
    return Objects.equals(this.orig, nfeSefazICMS70.orig) &&
        Objects.equals(this.CST, nfeSefazICMS70.CST) &&
        Objects.equals(this.modBC, nfeSefazICMS70.modBC) &&
        Objects.equals(this.pRedBC, nfeSefazICMS70.pRedBC) &&
        Objects.equals(this.vBC, nfeSefazICMS70.vBC) &&
        Objects.equals(this.pICMS, nfeSefazICMS70.pICMS) &&
        Objects.equals(this.vICMS, nfeSefazICMS70.vICMS) &&
        Objects.equals(this.vBCFCP, nfeSefazICMS70.vBCFCP) &&
        Objects.equals(this.pFCP, nfeSefazICMS70.pFCP) &&
        Objects.equals(this.vFCP, nfeSefazICMS70.vFCP) &&
        Objects.equals(this.modBCST, nfeSefazICMS70.modBCST) &&
        Objects.equals(this.pMVAST, nfeSefazICMS70.pMVAST) &&
        Objects.equals(this.pRedBCST, nfeSefazICMS70.pRedBCST) &&
        Objects.equals(this.vBCST, nfeSefazICMS70.vBCST) &&
        Objects.equals(this.pICMSST, nfeSefazICMS70.pICMSST) &&
        Objects.equals(this.vICMSST, nfeSefazICMS70.vICMSST) &&
        Objects.equals(this.vBCFCPST, nfeSefazICMS70.vBCFCPST) &&
        Objects.equals(this.pFCPST, nfeSefazICMS70.pFCPST) &&
        Objects.equals(this.vFCPST, nfeSefazICMS70.vFCPST) &&
        Objects.equals(this.vICMSDeson, nfeSefazICMS70.vICMSDeson) &&
        Objects.equals(this.motDesICMS, nfeSefazICMS70.motDesICMS) &&
        Objects.equals(this.indDeduzDeson, nfeSefazICMS70.indDeduzDeson) &&
        Objects.equals(this.vICMSSTDeson, nfeSefazICMS70.vICMSSTDeson) &&
        Objects.equals(this.motDesICMSST, nfeSefazICMS70.motDesICMSST);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(orig, CST, modBC, pRedBC, vBC, pICMS, vICMS, vBCFCP, pFCP, vFCP, modBCST, pMVAST, pRedBCST, vBCST, pICMSST, vICMSST, vBCFCPST, pFCPST, vFCPST, vICMSDeson, motDesICMS, indDeduzDeson, vICMSSTDeson, motDesICMSST);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazICMS70 {\n");
    sb.append("    orig: ").append(toIndentedString(orig)).append("\n");
    sb.append("    CST: ").append(toIndentedString(CST)).append("\n");
    sb.append("    modBC: ").append(toIndentedString(modBC)).append("\n");
    sb.append("    pRedBC: ").append(toIndentedString(pRedBC)).append("\n");
    sb.append("    vBC: ").append(toIndentedString(vBC)).append("\n");
    sb.append("    pICMS: ").append(toIndentedString(pICMS)).append("\n");
    sb.append("    vICMS: ").append(toIndentedString(vICMS)).append("\n");
    sb.append("    vBCFCP: ").append(toIndentedString(vBCFCP)).append("\n");
    sb.append("    pFCP: ").append(toIndentedString(pFCP)).append("\n");
    sb.append("    vFCP: ").append(toIndentedString(vFCP)).append("\n");
    sb.append("    modBCST: ").append(toIndentedString(modBCST)).append("\n");
    sb.append("    pMVAST: ").append(toIndentedString(pMVAST)).append("\n");
    sb.append("    pRedBCST: ").append(toIndentedString(pRedBCST)).append("\n");
    sb.append("    vBCST: ").append(toIndentedString(vBCST)).append("\n");
    sb.append("    pICMSST: ").append(toIndentedString(pICMSST)).append("\n");
    sb.append("    vICMSST: ").append(toIndentedString(vICMSST)).append("\n");
    sb.append("    vBCFCPST: ").append(toIndentedString(vBCFCPST)).append("\n");
    sb.append("    pFCPST: ").append(toIndentedString(pFCPST)).append("\n");
    sb.append("    vFCPST: ").append(toIndentedString(vFCPST)).append("\n");
    sb.append("    vICMSDeson: ").append(toIndentedString(vICMSDeson)).append("\n");
    sb.append("    motDesICMS: ").append(toIndentedString(motDesICMS)).append("\n");
    sb.append("    indDeduzDeson: ").append(toIndentedString(indDeduzDeson)).append("\n");
    sb.append("    vICMSSTDeson: ").append(toIndentedString(vICMSSTDeson)).append("\n");
    sb.append("    motDesICMSST: ").append(toIndentedString(motDesICMSST)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orig");
    openapiFields.add("CST");
    openapiFields.add("modBC");
    openapiFields.add("pRedBC");
    openapiFields.add("vBC");
    openapiFields.add("pICMS");
    openapiFields.add("vICMS");
    openapiFields.add("vBCFCP");
    openapiFields.add("pFCP");
    openapiFields.add("vFCP");
    openapiFields.add("modBCST");
    openapiFields.add("pMVAST");
    openapiFields.add("pRedBCST");
    openapiFields.add("vBCST");
    openapiFields.add("pICMSST");
    openapiFields.add("vICMSST");
    openapiFields.add("vBCFCPST");
    openapiFields.add("pFCPST");
    openapiFields.add("vFCPST");
    openapiFields.add("vICMSDeson");
    openapiFields.add("motDesICMS");
    openapiFields.add("indDeduzDeson");
    openapiFields.add("vICMSSTDeson");
    openapiFields.add("motDesICMSST");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("orig");
    openapiRequiredFields.add("CST");
    openapiRequiredFields.add("modBC");
    openapiRequiredFields.add("pRedBC");
    openapiRequiredFields.add("vBC");
    openapiRequiredFields.add("pICMS");
    openapiRequiredFields.add("vICMS");
    openapiRequiredFields.add("modBCST");
    openapiRequiredFields.add("vBCST");
    openapiRequiredFields.add("pICMSST");
    openapiRequiredFields.add("vICMSST");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazICMS70
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazICMS70.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazICMS70 is not found in the empty JSON string", NfeSefazICMS70.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazICMS70.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazICMS70` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfeSefazICMS70.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CST") != null && !jsonObj.get("CST").isJsonNull()) && !jsonObj.get("CST").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CST` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CST").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazICMS70.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazICMS70' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazICMS70> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazICMS70.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazICMS70>() {
           @Override
           public void write(JsonWriter out, NfeSefazICMS70 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazICMS70 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazICMS70 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazICMS70
   * @throws IOException if the JSON string is invalid with respect to NfeSefazICMS70
   */
  public static NfeSefazICMS70 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazICMS70.class);
  }

  /**
   * Convert an instance of NfeSefazICMS70 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

