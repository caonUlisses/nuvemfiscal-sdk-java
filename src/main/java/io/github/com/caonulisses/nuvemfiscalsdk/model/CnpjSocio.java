/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CnpjFaixaEtaria;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CnpjIdentificadorSocio;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CnpjPais;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CnpjQualificacaoSocio;
import io.github.com.caonulisses.nuvemfiscalsdk.model.CnpjRepresentanteLegal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Quadro Societário.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CnpjSocio {
  public static final String SERIALIZED_NAME_IDENTIFICADOR_SOCIO = "identificador_socio";
  @SerializedName(SERIALIZED_NAME_IDENTIFICADOR_SOCIO)
  @javax.annotation.Nullable
  private CnpjIdentificadorSocio identificadorSocio;

  public static final String SERIALIZED_NAME_NOME = "nome";
  @SerializedName(SERIALIZED_NAME_NOME)
  @javax.annotation.Nullable
  private String nome;

  public static final String SERIALIZED_NAME_CPF_CNPJ = "cpf_cnpj";
  @SerializedName(SERIALIZED_NAME_CPF_CNPJ)
  @javax.annotation.Nullable
  private String cpfCnpj;

  public static final String SERIALIZED_NAME_QUALIFICACAO = "qualificacao";
  @SerializedName(SERIALIZED_NAME_QUALIFICACAO)
  @javax.annotation.Nullable
  private CnpjQualificacaoSocio qualificacao;

  public static final String SERIALIZED_NAME_DATA_ENTRADA_SOCIEDADE = "data_entrada_sociedade";
  @SerializedName(SERIALIZED_NAME_DATA_ENTRADA_SOCIEDADE)
  @javax.annotation.Nullable
  private LocalDate dataEntradaSociedade;

  public static final String SERIALIZED_NAME_PAIS = "pais";
  @SerializedName(SERIALIZED_NAME_PAIS)
  @javax.annotation.Nullable
  private CnpjPais pais;

  public static final String SERIALIZED_NAME_REPRESENTANTE_LEGAL = "representante_legal";
  @SerializedName(SERIALIZED_NAME_REPRESENTANTE_LEGAL)
  @javax.annotation.Nullable
  private CnpjRepresentanteLegal representanteLegal;

  public static final String SERIALIZED_NAME_FAIXA_ETARIA = "faixa_etaria";
  @SerializedName(SERIALIZED_NAME_FAIXA_ETARIA)
  @javax.annotation.Nullable
  private CnpjFaixaEtaria faixaEtaria;

  public CnpjSocio() {
  }

  public CnpjSocio identificadorSocio(@javax.annotation.Nullable CnpjIdentificadorSocio identificadorSocio) {
    this.identificadorSocio = identificadorSocio;
    return this;
  }

  /**
   * Get identificadorSocio
   * @return identificadorSocio
   */
  @javax.annotation.Nullable
  public CnpjIdentificadorSocio getIdentificadorSocio() {
    return identificadorSocio;
  }

  public void setIdentificadorSocio(@javax.annotation.Nullable CnpjIdentificadorSocio identificadorSocio) {
    this.identificadorSocio = identificadorSocio;
  }


  public CnpjSocio nome(@javax.annotation.Nullable String nome) {
    this.nome = nome;
    return this;
  }

  /**
   * Nome do sócio pessoa física ou a razão social e/ou nome empresarial da  pessoa jurídica e/ou nome do sócio/razão social do sócio estrangeiro.
   * @return nome
   */
  @javax.annotation.Nullable
  public String getNome() {
    return nome;
  }

  public void setNome(@javax.annotation.Nullable String nome) {
    this.nome = nome;
  }


  public CnpjSocio cpfCnpj(@javax.annotation.Nullable String cpfCnpj) {
    this.cpfCnpj = cpfCnpj;
    return this;
  }

  /**
   * CPF ou CNPJ do sócio (sócio estrangeiro não tem esta informação).
   * @return cpfCnpj
   */
  @javax.annotation.Nullable
  public String getCpfCnpj() {
    return cpfCnpj;
  }

  public void setCpfCnpj(@javax.annotation.Nullable String cpfCnpj) {
    this.cpfCnpj = cpfCnpj;
  }


  public CnpjSocio qualificacao(@javax.annotation.Nullable CnpjQualificacaoSocio qualificacao) {
    this.qualificacao = qualificacao;
    return this;
  }

  /**
   * Get qualificacao
   * @return qualificacao
   */
  @javax.annotation.Nullable
  public CnpjQualificacaoSocio getQualificacao() {
    return qualificacao;
  }

  public void setQualificacao(@javax.annotation.Nullable CnpjQualificacaoSocio qualificacao) {
    this.qualificacao = qualificacao;
  }


  public CnpjSocio dataEntradaSociedade(@javax.annotation.Nullable LocalDate dataEntradaSociedade) {
    this.dataEntradaSociedade = dataEntradaSociedade;
    return this;
  }

  /**
   * Data de entrada na sociedade.
   * @return dataEntradaSociedade
   */
  @javax.annotation.Nullable
  public LocalDate getDataEntradaSociedade() {
    return dataEntradaSociedade;
  }

  public void setDataEntradaSociedade(@javax.annotation.Nullable LocalDate dataEntradaSociedade) {
    this.dataEntradaSociedade = dataEntradaSociedade;
  }


  public CnpjSocio pais(@javax.annotation.Nullable CnpjPais pais) {
    this.pais = pais;
    return this;
  }

  /**
   * Get pais
   * @return pais
   */
  @javax.annotation.Nullable
  public CnpjPais getPais() {
    return pais;
  }

  public void setPais(@javax.annotation.Nullable CnpjPais pais) {
    this.pais = pais;
  }


  public CnpjSocio representanteLegal(@javax.annotation.Nullable CnpjRepresentanteLegal representanteLegal) {
    this.representanteLegal = representanteLegal;
    return this;
  }

  /**
   * Get representanteLegal
   * @return representanteLegal
   */
  @javax.annotation.Nullable
  public CnpjRepresentanteLegal getRepresentanteLegal() {
    return representanteLegal;
  }

  public void setRepresentanteLegal(@javax.annotation.Nullable CnpjRepresentanteLegal representanteLegal) {
    this.representanteLegal = representanteLegal;
  }


  public CnpjSocio faixaEtaria(@javax.annotation.Nullable CnpjFaixaEtaria faixaEtaria) {
    this.faixaEtaria = faixaEtaria;
    return this;
  }

  /**
   * Get faixaEtaria
   * @return faixaEtaria
   */
  @javax.annotation.Nullable
  public CnpjFaixaEtaria getFaixaEtaria() {
    return faixaEtaria;
  }

  public void setFaixaEtaria(@javax.annotation.Nullable CnpjFaixaEtaria faixaEtaria) {
    this.faixaEtaria = faixaEtaria;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CnpjSocio cnpjSocio = (CnpjSocio) o;
    return Objects.equals(this.identificadorSocio, cnpjSocio.identificadorSocio) &&
        Objects.equals(this.nome, cnpjSocio.nome) &&
        Objects.equals(this.cpfCnpj, cnpjSocio.cpfCnpj) &&
        Objects.equals(this.qualificacao, cnpjSocio.qualificacao) &&
        Objects.equals(this.dataEntradaSociedade, cnpjSocio.dataEntradaSociedade) &&
        Objects.equals(this.pais, cnpjSocio.pais) &&
        Objects.equals(this.representanteLegal, cnpjSocio.representanteLegal) &&
        Objects.equals(this.faixaEtaria, cnpjSocio.faixaEtaria);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identificadorSocio, nome, cpfCnpj, qualificacao, dataEntradaSociedade, pais, representanteLegal, faixaEtaria);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CnpjSocio {\n");
    sb.append("    identificadorSocio: ").append(toIndentedString(identificadorSocio)).append("\n");
    sb.append("    nome: ").append(toIndentedString(nome)).append("\n");
    sb.append("    cpfCnpj: ").append(toIndentedString(cpfCnpj)).append("\n");
    sb.append("    qualificacao: ").append(toIndentedString(qualificacao)).append("\n");
    sb.append("    dataEntradaSociedade: ").append(toIndentedString(dataEntradaSociedade)).append("\n");
    sb.append("    pais: ").append(toIndentedString(pais)).append("\n");
    sb.append("    representanteLegal: ").append(toIndentedString(representanteLegal)).append("\n");
    sb.append("    faixaEtaria: ").append(toIndentedString(faixaEtaria)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("identificador_socio");
    openapiFields.add("nome");
    openapiFields.add("cpf_cnpj");
    openapiFields.add("qualificacao");
    openapiFields.add("data_entrada_sociedade");
    openapiFields.add("pais");
    openapiFields.add("representante_legal");
    openapiFields.add("faixa_etaria");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CnpjSocio
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CnpjSocio.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CnpjSocio is not found in the empty JSON string", CnpjSocio.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CnpjSocio.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CnpjSocio` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `identificador_socio`
      if (jsonObj.get("identificador_socio") != null && !jsonObj.get("identificador_socio").isJsonNull()) {
        CnpjIdentificadorSocio.validateJsonElement(jsonObj.get("identificador_socio"));
      }
      if ((jsonObj.get("nome") != null && !jsonObj.get("nome").isJsonNull()) && !jsonObj.get("nome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nome").toString()));
      }
      if ((jsonObj.get("cpf_cnpj") != null && !jsonObj.get("cpf_cnpj").isJsonNull()) && !jsonObj.get("cpf_cnpj").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpf_cnpj` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpf_cnpj").toString()));
      }
      // validate the optional field `qualificacao`
      if (jsonObj.get("qualificacao") != null && !jsonObj.get("qualificacao").isJsonNull()) {
        CnpjQualificacaoSocio.validateJsonElement(jsonObj.get("qualificacao"));
      }
      // validate the optional field `pais`
      if (jsonObj.get("pais") != null && !jsonObj.get("pais").isJsonNull()) {
        CnpjPais.validateJsonElement(jsonObj.get("pais"));
      }
      // validate the optional field `representante_legal`
      if (jsonObj.get("representante_legal") != null && !jsonObj.get("representante_legal").isJsonNull()) {
        CnpjRepresentanteLegal.validateJsonElement(jsonObj.get("representante_legal"));
      }
      // validate the optional field `faixa_etaria`
      if (jsonObj.get("faixa_etaria") != null && !jsonObj.get("faixa_etaria").isJsonNull()) {
        CnpjFaixaEtaria.validateJsonElement(jsonObj.get("faixa_etaria"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CnpjSocio.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CnpjSocio' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CnpjSocio> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CnpjSocio.class));

       return (TypeAdapter<T>) new TypeAdapter<CnpjSocio>() {
           @Override
           public void write(JsonWriter out, CnpjSocio value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CnpjSocio read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CnpjSocio given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CnpjSocio
   * @throws IOException if the JSON string is invalid with respect to CnpjSocio
   */
  public static CnpjSocio fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CnpjSocio.class);
  }

  /**
   * Convert an instance of CnpjSocio to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

