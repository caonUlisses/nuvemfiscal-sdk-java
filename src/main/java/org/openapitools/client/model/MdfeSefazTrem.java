/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Informações da composição do trem.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class MdfeSefazTrem {
  public static final String SERIALIZED_NAME_X_PREF = "xPref";
  @SerializedName(SERIALIZED_NAME_X_PREF)
  @javax.annotation.Nullable
  private String xPref;

  public static final String SERIALIZED_NAME_DH_TREM = "dhTrem";
  @SerializedName(SERIALIZED_NAME_DH_TREM)
  @javax.annotation.Nullable
  private OffsetDateTime dhTrem;

  public static final String SERIALIZED_NAME_X_ORI = "xOri";
  @SerializedName(SERIALIZED_NAME_X_ORI)
  @javax.annotation.Nullable
  private String xOri;

  public static final String SERIALIZED_NAME_X_DEST = "xDest";
  @SerializedName(SERIALIZED_NAME_X_DEST)
  @javax.annotation.Nullable
  private String xDest;

  public static final String SERIALIZED_NAME_Q_VAG = "qVag";
  @SerializedName(SERIALIZED_NAME_Q_VAG)
  @javax.annotation.Nullable
  private Integer qVag;

  public MdfeSefazTrem() {
  }

  public MdfeSefazTrem xPref(@javax.annotation.Nullable String xPref) {
    this.xPref = xPref;
    return this;
  }

  /**
   * Prefixo do Trem.
   * @return xPref
   */
  @javax.annotation.Nullable
  public String getxPref() {
    return xPref;
  }

  public void setxPref(@javax.annotation.Nullable String xPref) {
    this.xPref = xPref;
  }


  public MdfeSefazTrem dhTrem(@javax.annotation.Nullable OffsetDateTime dhTrem) {
    this.dhTrem = dhTrem;
    return this;
  }

  /**
   * Data e hora de liberação do trem na origem.
   * @return dhTrem
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDhTrem() {
    return dhTrem;
  }

  public void setDhTrem(@javax.annotation.Nullable OffsetDateTime dhTrem) {
    this.dhTrem = dhTrem;
  }


  public MdfeSefazTrem xOri(@javax.annotation.Nullable String xOri) {
    this.xOri = xOri;
    return this;
  }

  /**
   * Origem do Trem.  Sigla da estação de origem.
   * @return xOri
   */
  @javax.annotation.Nullable
  public String getxOri() {
    return xOri;
  }

  public void setxOri(@javax.annotation.Nullable String xOri) {
    this.xOri = xOri;
  }


  public MdfeSefazTrem xDest(@javax.annotation.Nullable String xDest) {
    this.xDest = xDest;
    return this;
  }

  /**
   * Destino do Trem.  Sigla da estação de destino.
   * @return xDest
   */
  @javax.annotation.Nullable
  public String getxDest() {
    return xDest;
  }

  public void setxDest(@javax.annotation.Nullable String xDest) {
    this.xDest = xDest;
  }


  public MdfeSefazTrem qVag(@javax.annotation.Nullable Integer qVag) {
    this.qVag = qVag;
    return this;
  }

  /**
   * Quantidade de vagões carregados.
   * minimum: 1
   * maximum: 999
   * @return qVag
   */
  @javax.annotation.Nullable
  public Integer getqVag() {
    return qVag;
  }

  public void setqVag(@javax.annotation.Nullable Integer qVag) {
    this.qVag = qVag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MdfeSefazTrem mdfeSefazTrem = (MdfeSefazTrem) o;
    return Objects.equals(this.xPref, mdfeSefazTrem.xPref) &&
        Objects.equals(this.dhTrem, mdfeSefazTrem.dhTrem) &&
        Objects.equals(this.xOri, mdfeSefazTrem.xOri) &&
        Objects.equals(this.xDest, mdfeSefazTrem.xDest) &&
        Objects.equals(this.qVag, mdfeSefazTrem.qVag);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(xPref, dhTrem, xOri, xDest, qVag);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MdfeSefazTrem {\n");
    sb.append("    xPref: ").append(toIndentedString(xPref)).append("\n");
    sb.append("    dhTrem: ").append(toIndentedString(dhTrem)).append("\n");
    sb.append("    xOri: ").append(toIndentedString(xOri)).append("\n");
    sb.append("    xDest: ").append(toIndentedString(xDest)).append("\n");
    sb.append("    qVag: ").append(toIndentedString(qVag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("xPref");
    openapiFields.add("dhTrem");
    openapiFields.add("xOri");
    openapiFields.add("xDest");
    openapiFields.add("qVag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("xPref");
    openapiRequiredFields.add("xOri");
    openapiRequiredFields.add("xDest");
    openapiRequiredFields.add("qVag");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MdfeSefazTrem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MdfeSefazTrem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MdfeSefazTrem is not found in the empty JSON string", MdfeSefazTrem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MdfeSefazTrem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MdfeSefazTrem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MdfeSefazTrem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("xPref") != null && !jsonObj.get("xPref").isJsonNull()) && !jsonObj.get("xPref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xPref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xPref").toString()));
      }
      if ((jsonObj.get("xOri") != null && !jsonObj.get("xOri").isJsonNull()) && !jsonObj.get("xOri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xOri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xOri").toString()));
      }
      if ((jsonObj.get("xDest") != null && !jsonObj.get("xDest").isJsonNull()) && !jsonObj.get("xDest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xDest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xDest").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MdfeSefazTrem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MdfeSefazTrem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MdfeSefazTrem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MdfeSefazTrem.class));

       return (TypeAdapter<T>) new TypeAdapter<MdfeSefazTrem>() {
           @Override
           public void write(JsonWriter out, MdfeSefazTrem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MdfeSefazTrem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MdfeSefazTrem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MdfeSefazTrem
   * @throws IOException if the JSON string is invalid with respect to MdfeSefazTrem
   */
  public static MdfeSefazTrem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MdfeSefazTrem.class);
  }

  /**
   * Convert an instance of MdfeSefazTrem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

