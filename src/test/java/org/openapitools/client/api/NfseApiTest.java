/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.api;

import io.github.com.caonulisses.nuvemfiscalsdk.ApiException;
import java.io.File;
import io.github.com.caonulisses.nuvemfiscalsdk.model.Nfse;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfseCancelamento;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfseCidadeMetadados;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfseCidadesAtendidas;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfseDpsPedidoEmissao;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfseListagem;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfseLoteDpsPedidoEmissao;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfsePedidoCancelamento;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfsePedidoEmissao;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfsePedidoSincronizacao;
import io.github.com.caonulisses.nuvemfiscalsdk.model.NfseSincronizacao;
import io.github.com.caonulisses.nuvemfiscalsdk.model.RpsLote;
import io.github.com.caonulisses.nuvemfiscalsdk.model.RpsLoteListagem;
import io.github.com.caonulisses.nuvemfiscalsdk.model.RpsPedidoEmissaoLote;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NfseApi
 */
@Disabled
public class NfseApiTest {

    private final NfseApi api = new NfseApi();

    /**
     * Baixar PDF do DANFSE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarPdfNfseTest() throws ApiException {
        String id = null;
        Boolean logotipo = null;
        String mensagemRodape = null;
        File response = api.baixarPdfNfse(id, logotipo, mensagemRodape);
        // TODO: test validations
    }

    /**
     * Baixar XML do evento de cancelamento
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarXmlCancelamentoNfseTest() throws ApiException {
        String id = null;
        File response = api.baixarXmlCancelamentoNfse(id);
        // TODO: test validations
    }

    /**
     * Baixar XML da DPS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarXmlDpsTest() throws ApiException {
        String id = null;
        File response = api.baixarXmlDps(id);
        // TODO: test validations
    }

    /**
     * Baixar XML da NFS-e processada
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baixarXmlNfseTest() throws ApiException {
        String id = null;
        File response = api.baixarXmlNfse(id);
        // TODO: test validations
    }

    /**
     * Cancelar uma NFS-e autorizada
     *
     * **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelarNfseTest() throws ApiException {
        String id = null;
        NfsePedidoCancelamento body = null;
        NfseCancelamento response = api.cancelarNfse(id, body);
        // TODO: test validations
    }

    /**
     * Cidades atendidas
     *
     * Fornece uma relação completa de todos os municípios atendidos pela Nuvem Fiscal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cidadesAtendidasTest() throws ApiException {
        NfseCidadesAtendidas response = api.cidadesAtendidas();
        // TODO: test validations
    }

    /**
     * Consultar o cancelamento da NFS-e
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarCancelamentoNfseTest() throws ApiException {
        String id = null;
        NfseCancelamento response = api.consultarCancelamentoNfse(id);
        // TODO: test validations
    }

    /**
     * Consultar lote de NFS-e
     *
     * Consulta os detalhes de um lote já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de lotes e a Nuvem Fiscal irá retornar as informações do lote correspondente.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarLoteNfseTest() throws ApiException {
        String id = null;
        RpsLote response = api.consultarLoteNfse(id);
        // TODO: test validations
    }

    /**
     * Consultar metadados
     *
     * Consulta a disponibilidade de emissão e alguns metadados de um município.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarMetadadosTest() throws ApiException {
        String codigoIbge = null;
        NfseCidadeMetadados response = api.consultarMetadados(codigoIbge);
        // TODO: test validations
    }

    /**
     * Consultar NFS-e
     *
     * Consulta os detalhes de uma NFS-e já existente. Forneça o ID único obtido de uma requisição de criação ou de listagem de notas e a Nuvem Fiscal irá retornar as informações da nota correspondente.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consultarNfseTest() throws ApiException {
        String id = null;
        Nfse response = api.consultarNfse(id);
        // TODO: test validations
    }

    /**
     * Emitir lote de NFS-e
     *
     * **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por NFS-e.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void emitirLoteNfseTest() throws ApiException {
        RpsPedidoEmissaoLote body = null;
        RpsLote response = api.emitirLoteNfse(body);
        // TODO: test validations
    }

    /**
     * Emitir lote de NFS-e
     *
     * **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por NFS-e.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void emitirLoteNfseDpsTest() throws ApiException {
        NfseLoteDpsPedidoEmissao body = null;
        RpsLote response = api.emitirLoteNfseDps(body);
        // TODO: test validations
    }

    /**
     * Emitir NFS-e
     *
     * **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void emitirNfseTest() throws ApiException {
        NfsePedidoEmissao body = null;
        Nfse response = api.emitirNfse(body);
        // TODO: test validations
    }

    /**
     * Emitir NFS-e
     *
     * **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void emitirNfseDpsTest() throws ApiException {
        NfseDpsPedidoEmissao body = null;
        Nfse response = api.emitirNfseDps(body);
        // TODO: test validations
    }

    /**
     * Listar lotes de NFS-e
     *
     * Retorna a lista dos lotes de acordo com os critérios de busca utilizados. Os lotes são retornados ordenados pela data da criação, com os mais recentes aparecendo primeiro.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listarLotesNfseTest() throws ApiException {
        String cpfCnpj = null;
        String ambiente = null;
        Integer $top = null;
        Integer $skip = null;
        Boolean $inlinecount = null;
        String referencia = null;
        RpsLoteListagem response = api.listarLotesNfse(cpfCnpj, ambiente, $top, $skip, $inlinecount, referencia);
        // TODO: test validations
    }

    /**
     * Listar NFS-e
     *
     * Retorna a lista de notas de acordo com os critérios de busca utilizados. As notas são retornadas ordenadas pela data da criação, com as mais recentes aparecendo primeiro.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listarNfseTest() throws ApiException {
        String cpfCnpj = null;
        String ambiente = null;
        Integer $top = null;
        Integer $skip = null;
        Boolean $inlinecount = null;
        String referencia = null;
        String chave = null;
        String serie = null;
        NfseListagem response = api.listarNfse(cpfCnpj, ambiente, $top, $skip, $inlinecount, referencia, chave, serie);
        // TODO: test validations
    }

    /**
     * Sincroniza dados na NFS-e a partir da Prefeitura
     *
     * Realiza a sincronização dos dados a partir da consulta da situação atual da NFS-e na prefeitura.    **Cenários de uso**:  * Sincronizar uma nota que se encontra com o status &#x60;processando&#x60; na Nuvem Fiscal, mas está autorizada na prefeitura;  * Sincronizar uma nota que se encontra com o status &#x60;erro&#x60; na Nuvem Fiscal, mas está autorizada na prefeitura (útil em casos de erros de transmissão, como instabilidades e timeouts);  * Sincronizar uma nota que se encontra com o status &#x60;autorizada&#x60;na Nuvem Fiscal, mas está cancelada na prefeitura.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por evento sincronizado ou requisição.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sincronizarNfseTest() throws ApiException {
        String id = null;
        NfsePedidoSincronizacao body = null;
        NfseSincronizacao response = api.sincronizarNfse(id, body);
        // TODO: test validations
    }

}
