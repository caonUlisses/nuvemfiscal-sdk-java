/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CteSefazDetContInfDoc;
import org.openapitools.client.model.CteSefazLacre;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Grupo de informações de detalhamento dos conteiners  (Somente para Redespacho Intermediário e Serviço Vinculado a Multimodal).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazDetCont {
  public static final String SERIALIZED_NAME_N_CONT = "nCont";
  @SerializedName(SERIALIZED_NAME_N_CONT)
  @javax.annotation.Nullable
  private String nCont;

  public static final String SERIALIZED_NAME_LACRE = "lacre";
  @SerializedName(SERIALIZED_NAME_LACRE)
  @javax.annotation.Nullable
  private List<CteSefazLacre> lacre = new ArrayList<>();

  public static final String SERIALIZED_NAME_INF_DOC = "infDoc";
  @SerializedName(SERIALIZED_NAME_INF_DOC)
  @javax.annotation.Nullable
  private CteSefazDetContInfDoc infDoc;

  public CteSefazDetCont() {
  }

  public CteSefazDetCont nCont(@javax.annotation.Nullable String nCont) {
    this.nCont = nCont;
    return this;
  }

  /**
   * Identificação do Container.
   * @return nCont
   */
  @javax.annotation.Nullable
  public String getnCont() {
    return nCont;
  }

  public void setnCont(@javax.annotation.Nullable String nCont) {
    this.nCont = nCont;
  }


  public CteSefazDetCont lacre(@javax.annotation.Nullable List<CteSefazLacre> lacre) {
    this.lacre = lacre;
    return this;
  }

  public CteSefazDetCont addLacreItem(CteSefazLacre lacreItem) {
    if (this.lacre == null) {
      this.lacre = new ArrayList<>();
    }
    this.lacre.add(lacreItem);
    return this;
  }

  /**
   * Get lacre
   * @return lacre
   */
  @javax.annotation.Nullable
  public List<CteSefazLacre> getLacre() {
    return lacre;
  }

  public void setLacre(@javax.annotation.Nullable List<CteSefazLacre> lacre) {
    this.lacre = lacre;
  }


  public CteSefazDetCont infDoc(@javax.annotation.Nullable CteSefazDetContInfDoc infDoc) {
    this.infDoc = infDoc;
    return this;
  }

  /**
   * Get infDoc
   * @return infDoc
   */
  @javax.annotation.Nullable
  public CteSefazDetContInfDoc getInfDoc() {
    return infDoc;
  }

  public void setInfDoc(@javax.annotation.Nullable CteSefazDetContInfDoc infDoc) {
    this.infDoc = infDoc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazDetCont cteSefazDetCont = (CteSefazDetCont) o;
    return Objects.equals(this.nCont, cteSefazDetCont.nCont) &&
        Objects.equals(this.lacre, cteSefazDetCont.lacre) &&
        Objects.equals(this.infDoc, cteSefazDetCont.infDoc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nCont, lacre, infDoc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazDetCont {\n");
    sb.append("    nCont: ").append(toIndentedString(nCont)).append("\n");
    sb.append("    lacre: ").append(toIndentedString(lacre)).append("\n");
    sb.append("    infDoc: ").append(toIndentedString(infDoc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nCont");
    openapiFields.add("lacre");
    openapiFields.add("infDoc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nCont");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazDetCont
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazDetCont.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazDetCont is not found in the empty JSON string", CteSefazDetCont.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazDetCont.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazDetCont` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CteSefazDetCont.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nCont") != null && !jsonObj.get("nCont").isJsonNull()) && !jsonObj.get("nCont").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nCont` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nCont").toString()));
      }
      if (jsonObj.get("lacre") != null && !jsonObj.get("lacre").isJsonNull()) {
        JsonArray jsonArraylacre = jsonObj.getAsJsonArray("lacre");
        if (jsonArraylacre != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lacre").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lacre` to be an array in the JSON string but got `%s`", jsonObj.get("lacre").toString()));
          }

          // validate the optional field `lacre` (array)
          for (int i = 0; i < jsonArraylacre.size(); i++) {
            CteSefazLacre.validateJsonElement(jsonArraylacre.get(i));
          };
        }
      }
      // validate the optional field `infDoc`
      if (jsonObj.get("infDoc") != null && !jsonObj.get("infDoc").isJsonNull()) {
        CteSefazDetContInfDoc.validateJsonElement(jsonObj.get("infDoc"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazDetCont.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazDetCont' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazDetCont> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazDetCont.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazDetCont>() {
           @Override
           public void write(JsonWriter out, CteSefazDetCont value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazDetCont read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazDetCont given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazDetCont
   * @throws IOException if the JSON string is invalid with respect to CteSefazDetCont
   */
  public static CteSefazDetCont fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazDetCont.class);
  }

  /**
   * Convert an instance of CteSefazDetCont to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

