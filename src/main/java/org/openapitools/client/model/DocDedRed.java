/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.DocNFNFS;
import org.openapitools.client.model.DocOutNFSe;
import org.openapitools.client.model.InfoFornecDocDedRed;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Grupo de informações de documento utilizado para Dedução/Redução do valor do serviço.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class DocDedRed {
  public static final String SERIALIZED_NAME_CH_N_F_SE = "chNFSe";
  @SerializedName(SERIALIZED_NAME_CH_N_F_SE)
  @javax.annotation.Nullable
  private String chNFSe;

  public static final String SERIALIZED_NAME_CH_N_FE = "chNFe";
  @SerializedName(SERIALIZED_NAME_CH_N_FE)
  @javax.annotation.Nullable
  private String chNFe;

  public static final String SERIALIZED_NAME_NF_SE_MUN = "NFSeMun";
  @SerializedName(SERIALIZED_NAME_NF_SE_MUN)
  @javax.annotation.Nullable
  private DocOutNFSe nfSeMun;

  public static final String SERIALIZED_NAME_N_F_N_F_S = "NFNFS";
  @SerializedName(SERIALIZED_NAME_N_F_N_F_S)
  @javax.annotation.Nullable
  private DocNFNFS NFNFS;

  public static final String SERIALIZED_NAME_N_DOC_FISC = "nDocFisc";
  @SerializedName(SERIALIZED_NAME_N_DOC_FISC)
  @javax.annotation.Nullable
  private String nDocFisc;

  public static final String SERIALIZED_NAME_N_DOC = "nDoc";
  @SerializedName(SERIALIZED_NAME_N_DOC)
  @javax.annotation.Nullable
  private String nDoc;

  public static final String SERIALIZED_NAME_TP_DED_RED = "tpDedRed";
  @SerializedName(SERIALIZED_NAME_TP_DED_RED)
  @javax.annotation.Nullable
  private Integer tpDedRed;

  public static final String SERIALIZED_NAME_X_DESC_OUT_DED = "xDescOutDed";
  @SerializedName(SERIALIZED_NAME_X_DESC_OUT_DED)
  @javax.annotation.Nullable
  private String xDescOutDed;

  public static final String SERIALIZED_NAME_DT_EMI_DOC = "dtEmiDoc";
  @SerializedName(SERIALIZED_NAME_DT_EMI_DOC)
  @javax.annotation.Nullable
  private LocalDate dtEmiDoc;

  public static final String SERIALIZED_NAME_V_DEDUTIVEL_REDUTIVEL = "vDedutivelRedutivel";
  @SerializedName(SERIALIZED_NAME_V_DEDUTIVEL_REDUTIVEL)
  @javax.annotation.Nullable
  private BigDecimal vDedutivelRedutivel;

  public static final String SERIALIZED_NAME_V_DEDUCAO_REDUCAO = "vDeducaoReducao";
  @SerializedName(SERIALIZED_NAME_V_DEDUCAO_REDUCAO)
  @javax.annotation.Nullable
  private BigDecimal vDeducaoReducao;

  public static final String SERIALIZED_NAME_FORNEC = "fornec";
  @SerializedName(SERIALIZED_NAME_FORNEC)
  @javax.annotation.Nullable
  private InfoFornecDocDedRed fornec;

  public DocDedRed() {
  }

  public DocDedRed chNFSe(@javax.annotation.Nullable String chNFSe) {
    this.chNFSe = chNFSe;
    return this;
  }

  /**
   * Chave de Acesso da NFS-e (Padrão Nacional).
   * @return chNFSe
   */
  @javax.annotation.Nullable
  public String getChNFSe() {
    return chNFSe;
  }

  public void setChNFSe(@javax.annotation.Nullable String chNFSe) {
    this.chNFSe = chNFSe;
  }


  public DocDedRed chNFe(@javax.annotation.Nullable String chNFe) {
    this.chNFe = chNFe;
    return this;
  }

  /**
   * Chave de Acesso da NF-e.
   * @return chNFe
   */
  @javax.annotation.Nullable
  public String getChNFe() {
    return chNFe;
  }

  public void setChNFe(@javax.annotation.Nullable String chNFe) {
    this.chNFe = chNFe;
  }


  public DocDedRed nfSeMun(@javax.annotation.Nullable DocOutNFSe nfSeMun) {
    this.nfSeMun = nfSeMun;
    return this;
  }

  /**
   * Get nfSeMun
   * @return nfSeMun
   */
  @javax.annotation.Nullable
  public DocOutNFSe getNfSeMun() {
    return nfSeMun;
  }

  public void setNfSeMun(@javax.annotation.Nullable DocOutNFSe nfSeMun) {
    this.nfSeMun = nfSeMun;
  }


  public DocDedRed NFNFS(@javax.annotation.Nullable DocNFNFS NFNFS) {
    this.NFNFS = NFNFS;
    return this;
  }

  /**
   * Get NFNFS
   * @return NFNFS
   */
  @javax.annotation.Nullable
  public DocNFNFS getNFNFS() {
    return NFNFS;
  }

  public void setNFNFS(@javax.annotation.Nullable DocNFNFS NFNFS) {
    this.NFNFS = NFNFS;
  }


  public DocDedRed nDocFisc(@javax.annotation.Nullable String nDocFisc) {
    this.nDocFisc = nDocFisc;
    return this;
  }

  /**
   * Número de documento fiscal.
   * @return nDocFisc
   */
  @javax.annotation.Nullable
  public String getnDocFisc() {
    return nDocFisc;
  }

  public void setnDocFisc(@javax.annotation.Nullable String nDocFisc) {
    this.nDocFisc = nDocFisc;
  }


  public DocDedRed nDoc(@javax.annotation.Nullable String nDoc) {
    this.nDoc = nDoc;
    return this;
  }

  /**
   * Número de documento não fiscal.
   * @return nDoc
   */
  @javax.annotation.Nullable
  public String getnDoc() {
    return nDoc;
  }

  public void setnDoc(@javax.annotation.Nullable String nDoc) {
    this.nDoc = nDoc;
  }


  public DocDedRed tpDedRed(@javax.annotation.Nullable Integer tpDedRed) {
    this.tpDedRed = tpDedRed;
    return this;
  }

  /**
   * Identificação da Dedução/Redução:  * 1 - Alimentação e bebidas/frigobar  * 2 - Materiais  * 3 - Produção externa  * 4 - Reembolso de despesas  * 5 - Repasse consorciado  * 6 - Repasse plano de saúde  * 7 - Serviços  * 8 - Subempreitada de mão de obra  * 99 - Outras deduções
   * @return tpDedRed
   */
  @javax.annotation.Nullable
  public Integer getTpDedRed() {
    return tpDedRed;
  }

  public void setTpDedRed(@javax.annotation.Nullable Integer tpDedRed) {
    this.tpDedRed = tpDedRed;
  }


  public DocDedRed xDescOutDed(@javax.annotation.Nullable String xDescOutDed) {
    this.xDescOutDed = xDescOutDed;
    return this;
  }

  /**
   * Descrição da Dedução/Redução quando a opção é \&quot;99 - Outras Deduções\&quot;.
   * @return xDescOutDed
   */
  @javax.annotation.Nullable
  public String getxDescOutDed() {
    return xDescOutDed;
  }

  public void setxDescOutDed(@javax.annotation.Nullable String xDescOutDed) {
    this.xDescOutDed = xDescOutDed;
  }


  public DocDedRed dtEmiDoc(@javax.annotation.Nullable LocalDate dtEmiDoc) {
    this.dtEmiDoc = dtEmiDoc;
    return this;
  }

  /**
   * Data da emissão do documento dedutível. Ano, mês e dia (AAAA-MM-DD).
   * @return dtEmiDoc
   */
  @javax.annotation.Nullable
  public LocalDate getDtEmiDoc() {
    return dtEmiDoc;
  }

  public void setDtEmiDoc(@javax.annotation.Nullable LocalDate dtEmiDoc) {
    this.dtEmiDoc = dtEmiDoc;
  }


  public DocDedRed vDedutivelRedutivel(@javax.annotation.Nullable BigDecimal vDedutivelRedutivel) {
    this.vDedutivelRedutivel = vDedutivelRedutivel;
    return this;
  }

  /**
   * Valor monetário total dedutível/redutível no documento informado (R$).  Este é o valor total no documento informado que é passível de dedução/redução.
   * minimum: 0
   * @return vDedutivelRedutivel
   */
  @javax.annotation.Nullable
  public BigDecimal getvDedutivelRedutivel() {
    return vDedutivelRedutivel;
  }

  public void setvDedutivelRedutivel(@javax.annotation.Nullable BigDecimal vDedutivelRedutivel) {
    this.vDedutivelRedutivel = vDedutivelRedutivel;
  }


  public DocDedRed vDeducaoReducao(@javax.annotation.Nullable BigDecimal vDeducaoReducao) {
    this.vDeducaoReducao = vDeducaoReducao;
    return this;
  }

  /**
   * Valor monetário utilizado para dedução/redução do valor do serviço da NFS-e que está sendo emitida (R$).  Deve ser menor ou igual ao valor deduzível/redutível (vDedutivelRedutivel).
   * minimum: 0
   * @return vDeducaoReducao
   */
  @javax.annotation.Nullable
  public BigDecimal getvDeducaoReducao() {
    return vDeducaoReducao;
  }

  public void setvDeducaoReducao(@javax.annotation.Nullable BigDecimal vDeducaoReducao) {
    this.vDeducaoReducao = vDeducaoReducao;
  }


  public DocDedRed fornec(@javax.annotation.Nullable InfoFornecDocDedRed fornec) {
    this.fornec = fornec;
    return this;
  }

  /**
   * Get fornec
   * @return fornec
   */
  @javax.annotation.Nullable
  public InfoFornecDocDedRed getFornec() {
    return fornec;
  }

  public void setFornec(@javax.annotation.Nullable InfoFornecDocDedRed fornec) {
    this.fornec = fornec;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocDedRed docDedRed = (DocDedRed) o;
    return Objects.equals(this.chNFSe, docDedRed.chNFSe) &&
        Objects.equals(this.chNFe, docDedRed.chNFe) &&
        Objects.equals(this.nfSeMun, docDedRed.nfSeMun) &&
        Objects.equals(this.NFNFS, docDedRed.NFNFS) &&
        Objects.equals(this.nDocFisc, docDedRed.nDocFisc) &&
        Objects.equals(this.nDoc, docDedRed.nDoc) &&
        Objects.equals(this.tpDedRed, docDedRed.tpDedRed) &&
        Objects.equals(this.xDescOutDed, docDedRed.xDescOutDed) &&
        Objects.equals(this.dtEmiDoc, docDedRed.dtEmiDoc) &&
        Objects.equals(this.vDedutivelRedutivel, docDedRed.vDedutivelRedutivel) &&
        Objects.equals(this.vDeducaoReducao, docDedRed.vDeducaoReducao) &&
        Objects.equals(this.fornec, docDedRed.fornec);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(chNFSe, chNFe, nfSeMun, NFNFS, nDocFisc, nDoc, tpDedRed, xDescOutDed, dtEmiDoc, vDedutivelRedutivel, vDeducaoReducao, fornec);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocDedRed {\n");
    sb.append("    chNFSe: ").append(toIndentedString(chNFSe)).append("\n");
    sb.append("    chNFe: ").append(toIndentedString(chNFe)).append("\n");
    sb.append("    nfSeMun: ").append(toIndentedString(nfSeMun)).append("\n");
    sb.append("    NFNFS: ").append(toIndentedString(NFNFS)).append("\n");
    sb.append("    nDocFisc: ").append(toIndentedString(nDocFisc)).append("\n");
    sb.append("    nDoc: ").append(toIndentedString(nDoc)).append("\n");
    sb.append("    tpDedRed: ").append(toIndentedString(tpDedRed)).append("\n");
    sb.append("    xDescOutDed: ").append(toIndentedString(xDescOutDed)).append("\n");
    sb.append("    dtEmiDoc: ").append(toIndentedString(dtEmiDoc)).append("\n");
    sb.append("    vDedutivelRedutivel: ").append(toIndentedString(vDedutivelRedutivel)).append("\n");
    sb.append("    vDeducaoReducao: ").append(toIndentedString(vDeducaoReducao)).append("\n");
    sb.append("    fornec: ").append(toIndentedString(fornec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chNFSe");
    openapiFields.add("chNFe");
    openapiFields.add("NFSeMun");
    openapiFields.add("NFNFS");
    openapiFields.add("nDocFisc");
    openapiFields.add("nDoc");
    openapiFields.add("tpDedRed");
    openapiFields.add("xDescOutDed");
    openapiFields.add("dtEmiDoc");
    openapiFields.add("vDedutivelRedutivel");
    openapiFields.add("vDeducaoReducao");
    openapiFields.add("fornec");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tpDedRed");
    openapiRequiredFields.add("dtEmiDoc");
    openapiRequiredFields.add("vDedutivelRedutivel");
    openapiRequiredFields.add("vDeducaoReducao");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocDedRed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocDedRed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocDedRed is not found in the empty JSON string", DocDedRed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocDedRed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocDedRed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocDedRed.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chNFSe") != null && !jsonObj.get("chNFSe").isJsonNull()) && !jsonObj.get("chNFSe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chNFSe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chNFSe").toString()));
      }
      if ((jsonObj.get("chNFe") != null && !jsonObj.get("chNFe").isJsonNull()) && !jsonObj.get("chNFe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chNFe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chNFe").toString()));
      }
      // validate the optional field `NFSeMun`
      if (jsonObj.get("NFSeMun") != null && !jsonObj.get("NFSeMun").isJsonNull()) {
        DocOutNFSe.validateJsonElement(jsonObj.get("NFSeMun"));
      }
      // validate the optional field `NFNFS`
      if (jsonObj.get("NFNFS") != null && !jsonObj.get("NFNFS").isJsonNull()) {
        DocNFNFS.validateJsonElement(jsonObj.get("NFNFS"));
      }
      if ((jsonObj.get("nDocFisc") != null && !jsonObj.get("nDocFisc").isJsonNull()) && !jsonObj.get("nDocFisc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nDocFisc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nDocFisc").toString()));
      }
      if ((jsonObj.get("nDoc") != null && !jsonObj.get("nDoc").isJsonNull()) && !jsonObj.get("nDoc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nDoc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nDoc").toString()));
      }
      if ((jsonObj.get("xDescOutDed") != null && !jsonObj.get("xDescOutDed").isJsonNull()) && !jsonObj.get("xDescOutDed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xDescOutDed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xDescOutDed").toString()));
      }
      // validate the optional field `fornec`
      if (jsonObj.get("fornec") != null && !jsonObj.get("fornec").isJsonNull()) {
        InfoFornecDocDedRed.validateJsonElement(jsonObj.get("fornec"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocDedRed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocDedRed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocDedRed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocDedRed.class));

       return (TypeAdapter<T>) new TypeAdapter<DocDedRed>() {
           @Override
           public void write(JsonWriter out, DocDedRed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocDedRed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocDedRed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocDedRed
   * @throws IOException if the JSON string is invalid with respect to DocDedRed
   */
  public static DocDedRed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocDedRed.class);
  }

  /**
   * Convert an instance of DocDedRed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

