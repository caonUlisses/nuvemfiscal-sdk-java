/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Grupo de informações das quantidades totais de artigos perigosos.  Preencher conforme a legislação de transporte de produtos perigosos aplicada ao modal.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class CteSefazInfTotAP {
  public static final String SERIALIZED_NAME_Q_TOT_PROD = "qTotProd";
  @SerializedName(SERIALIZED_NAME_Q_TOT_PROD)
  @javax.annotation.Nullable
  private BigDecimal qTotProd;

  public static final String SERIALIZED_NAME_UNI_A_P = "uniAP";
  @SerializedName(SERIALIZED_NAME_UNI_A_P)
  @javax.annotation.Nullable
  private Integer uniAP;

  public CteSefazInfTotAP() {
  }

  public CteSefazInfTotAP qTotProd(@javax.annotation.Nullable BigDecimal qTotProd) {
    this.qTotProd = qTotProd;
    return this;
  }

  /**
   * Quantidade total de artigos perigosos.  15 posições, sendo 11 inteiras e 4 decimais.  Deve indicar a quantidade total do artigo perigoso, tendo como base a unidade referenciada na Tabela 3-1 do Doc 9284, por exemplo: litros  quilogramas  quilograma bruto etc. O preenchimento não deve, entretanto, incluir a unidade de medida. No caso de transporte de material radioativo, deve-se indicar o somatório dos Índices de Transporte (TI). Não indicar a quantidade do artigo perigoso por embalagem.
   * minimum: 0
   * @return qTotProd
   */
  @javax.annotation.Nullable
  public BigDecimal getqTotProd() {
    return qTotProd;
  }

  public void setqTotProd(@javax.annotation.Nullable BigDecimal qTotProd) {
    this.qTotProd = qTotProd;
  }


  public CteSefazInfTotAP uniAP(@javax.annotation.Nullable Integer uniAP) {
    this.uniAP = uniAP;
    return this;
  }

  /**
   * Unidade de medida.  * 1 - KG  * 2 - KG G (quilograma bruto)  * 3 - LITROS  * 4 - TI (índice de transporte para radioativos)  * 5 - Unidades (apenas para artigos perigosos medidos em unidades que não se enquadram nos itens acima. Exemplo: baterias, celulares, equipamentos, veículos, dentre outros)
   * @return uniAP
   */
  @javax.annotation.Nullable
  public Integer getUniAP() {
    return uniAP;
  }

  public void setUniAP(@javax.annotation.Nullable Integer uniAP) {
    this.uniAP = uniAP;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CteSefazInfTotAP cteSefazInfTotAP = (CteSefazInfTotAP) o;
    return Objects.equals(this.qTotProd, cteSefazInfTotAP.qTotProd) &&
        Objects.equals(this.uniAP, cteSefazInfTotAP.uniAP);
  }

  @Override
  public int hashCode() {
    return Objects.hash(qTotProd, uniAP);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CteSefazInfTotAP {\n");
    sb.append("    qTotProd: ").append(toIndentedString(qTotProd)).append("\n");
    sb.append("    uniAP: ").append(toIndentedString(uniAP)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("qTotProd");
    openapiFields.add("uniAP");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("qTotProd");
    openapiRequiredFields.add("uniAP");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CteSefazInfTotAP
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CteSefazInfTotAP.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CteSefazInfTotAP is not found in the empty JSON string", CteSefazInfTotAP.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CteSefazInfTotAP.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CteSefazInfTotAP` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CteSefazInfTotAP.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CteSefazInfTotAP.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CteSefazInfTotAP' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CteSefazInfTotAP> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CteSefazInfTotAP.class));

       return (TypeAdapter<T>) new TypeAdapter<CteSefazInfTotAP>() {
           @Override
           public void write(JsonWriter out, CteSefazInfTotAP value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CteSefazInfTotAP read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CteSefazInfTotAP given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CteSefazInfTotAP
   * @throws IOException if the JSON string is invalid with respect to CteSefazInfTotAP
   */
  public static CteSefazInfTotAP fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CteSefazInfTotAP.class);
  }

  /**
   * Convert an instance of CteSefazInfTotAP to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

