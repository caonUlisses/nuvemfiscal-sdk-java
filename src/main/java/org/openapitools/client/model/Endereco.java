/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EnderExt;
import org.openapitools.client.model.EnderNac;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dados de endereço do prestador.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class Endereco {
  public static final String SERIALIZED_NAME_END_NAC = "endNac";
  @SerializedName(SERIALIZED_NAME_END_NAC)
  @javax.annotation.Nullable
  private EnderNac endNac;

  public static final String SERIALIZED_NAME_END_EXT = "endExt";
  @SerializedName(SERIALIZED_NAME_END_EXT)
  @javax.annotation.Nullable
  private EnderExt endExt;

  public static final String SERIALIZED_NAME_X_LGR = "xLgr";
  @SerializedName(SERIALIZED_NAME_X_LGR)
  @javax.annotation.Nullable
  private String xLgr;

  public static final String SERIALIZED_NAME_NRO = "nro";
  @SerializedName(SERIALIZED_NAME_NRO)
  @javax.annotation.Nullable
  private String nro;

  public static final String SERIALIZED_NAME_X_CPL = "xCpl";
  @SerializedName(SERIALIZED_NAME_X_CPL)
  @javax.annotation.Nullable
  private String xCpl;

  public static final String SERIALIZED_NAME_X_BAIRRO = "xBairro";
  @SerializedName(SERIALIZED_NAME_X_BAIRRO)
  @javax.annotation.Nullable
  private String xBairro;

  public Endereco() {
  }

  public Endereco endNac(@javax.annotation.Nullable EnderNac endNac) {
    this.endNac = endNac;
    return this;
  }

  /**
   * Get endNac
   * @return endNac
   */
  @javax.annotation.Nullable
  public EnderNac getEndNac() {
    return endNac;
  }

  public void setEndNac(@javax.annotation.Nullable EnderNac endNac) {
    this.endNac = endNac;
  }


  public Endereco endExt(@javax.annotation.Nullable EnderExt endExt) {
    this.endExt = endExt;
    return this;
  }

  /**
   * Get endExt
   * @return endExt
   */
  @javax.annotation.Nullable
  public EnderExt getEndExt() {
    return endExt;
  }

  public void setEndExt(@javax.annotation.Nullable EnderExt endExt) {
    this.endExt = endExt;
  }


  public Endereco xLgr(@javax.annotation.Nullable String xLgr) {
    this.xLgr = xLgr;
    return this;
  }

  /**
   * Tipo e nome do logradouro da localização do imóvel.
   * @return xLgr
   */
  @javax.annotation.Nullable
  public String getxLgr() {
    return xLgr;
  }

  public void setxLgr(@javax.annotation.Nullable String xLgr) {
    this.xLgr = xLgr;
  }


  public Endereco nro(@javax.annotation.Nullable String nro) {
    this.nro = nro;
    return this;
  }

  /**
   * Número do imóvel.
   * @return nro
   */
  @javax.annotation.Nullable
  public String getNro() {
    return nro;
  }

  public void setNro(@javax.annotation.Nullable String nro) {
    this.nro = nro;
  }


  public Endereco xCpl(@javax.annotation.Nullable String xCpl) {
    this.xCpl = xCpl;
    return this;
  }

  /**
   * Complemento do endereço.
   * @return xCpl
   */
  @javax.annotation.Nullable
  public String getxCpl() {
    return xCpl;
  }

  public void setxCpl(@javax.annotation.Nullable String xCpl) {
    this.xCpl = xCpl;
  }


  public Endereco xBairro(@javax.annotation.Nullable String xBairro) {
    this.xBairro = xBairro;
    return this;
  }

  /**
   * Bairro.
   * @return xBairro
   */
  @javax.annotation.Nullable
  public String getxBairro() {
    return xBairro;
  }

  public void setxBairro(@javax.annotation.Nullable String xBairro) {
    this.xBairro = xBairro;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Endereco endereco = (Endereco) o;
    return Objects.equals(this.endNac, endereco.endNac) &&
        Objects.equals(this.endExt, endereco.endExt) &&
        Objects.equals(this.xLgr, endereco.xLgr) &&
        Objects.equals(this.nro, endereco.nro) &&
        Objects.equals(this.xCpl, endereco.xCpl) &&
        Objects.equals(this.xBairro, endereco.xBairro);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(endNac, endExt, xLgr, nro, xCpl, xBairro);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Endereco {\n");
    sb.append("    endNac: ").append(toIndentedString(endNac)).append("\n");
    sb.append("    endExt: ").append(toIndentedString(endExt)).append("\n");
    sb.append("    xLgr: ").append(toIndentedString(xLgr)).append("\n");
    sb.append("    nro: ").append(toIndentedString(nro)).append("\n");
    sb.append("    xCpl: ").append(toIndentedString(xCpl)).append("\n");
    sb.append("    xBairro: ").append(toIndentedString(xBairro)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endNac");
    openapiFields.add("endExt");
    openapiFields.add("xLgr");
    openapiFields.add("nro");
    openapiFields.add("xCpl");
    openapiFields.add("xBairro");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Endereco
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Endereco.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Endereco is not found in the empty JSON string", Endereco.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Endereco.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Endereco` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `endNac`
      if (jsonObj.get("endNac") != null && !jsonObj.get("endNac").isJsonNull()) {
        EnderNac.validateJsonElement(jsonObj.get("endNac"));
      }
      // validate the optional field `endExt`
      if (jsonObj.get("endExt") != null && !jsonObj.get("endExt").isJsonNull()) {
        EnderExt.validateJsonElement(jsonObj.get("endExt"));
      }
      if ((jsonObj.get("xLgr") != null && !jsonObj.get("xLgr").isJsonNull()) && !jsonObj.get("xLgr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xLgr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xLgr").toString()));
      }
      if ((jsonObj.get("nro") != null && !jsonObj.get("nro").isJsonNull()) && !jsonObj.get("nro").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nro` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nro").toString()));
      }
      if ((jsonObj.get("xCpl") != null && !jsonObj.get("xCpl").isJsonNull()) && !jsonObj.get("xCpl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xCpl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xCpl").toString()));
      }
      if ((jsonObj.get("xBairro") != null && !jsonObj.get("xBairro").isJsonNull()) && !jsonObj.get("xBairro").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xBairro` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xBairro").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Endereco.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Endereco' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Endereco> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Endereco.class));

       return (TypeAdapter<T>) new TypeAdapter<Endereco>() {
           @Override
           public void write(JsonWriter out, Endereco value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Endereco read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Endereco given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Endereco
   * @throws IOException if the JSON string is invalid with respect to Endereco
   */
  public static Endereco fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Endereco.class);
  }

  /**
   * Convert an instance of Endereco to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

