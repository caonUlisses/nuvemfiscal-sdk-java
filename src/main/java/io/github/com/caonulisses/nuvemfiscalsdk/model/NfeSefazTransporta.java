/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Dados do transportador.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazTransporta {
  public static final String SERIALIZED_NAME_C_N_P_J = "CNPJ";
  @SerializedName(SERIALIZED_NAME_C_N_P_J)
  @javax.annotation.Nullable
  private String CNPJ;

  public static final String SERIALIZED_NAME_C_P_F = "CPF";
  @SerializedName(SERIALIZED_NAME_C_P_F)
  @javax.annotation.Nullable
  private String CPF;

  public static final String SERIALIZED_NAME_X_NOME = "xNome";
  @SerializedName(SERIALIZED_NAME_X_NOME)
  @javax.annotation.Nullable
  private String xNome;

  public static final String SERIALIZED_NAME_I_E = "IE";
  @SerializedName(SERIALIZED_NAME_I_E)
  @javax.annotation.Nullable
  private String IE;

  public static final String SERIALIZED_NAME_X_ENDER = "xEnder";
  @SerializedName(SERIALIZED_NAME_X_ENDER)
  @javax.annotation.Nullable
  private String xEnder;

  public static final String SERIALIZED_NAME_X_MUN = "xMun";
  @SerializedName(SERIALIZED_NAME_X_MUN)
  @javax.annotation.Nullable
  private String xMun;

  public static final String SERIALIZED_NAME_U_F = "UF";
  @SerializedName(SERIALIZED_NAME_U_F)
  @javax.annotation.Nullable
  private String UF;

  public NfeSefazTransporta() {
  }

  public NfeSefazTransporta CNPJ(@javax.annotation.Nullable String CNPJ) {
    this.CNPJ = CNPJ;
    return this;
  }

  /**
   * CNPJ do transportador.
   * @return CNPJ
   */
  @javax.annotation.Nullable
  public String getCNPJ() {
    return CNPJ;
  }

  public void setCNPJ(@javax.annotation.Nullable String CNPJ) {
    this.CNPJ = CNPJ;
  }


  public NfeSefazTransporta CPF(@javax.annotation.Nullable String CPF) {
    this.CPF = CPF;
    return this;
  }

  /**
   * CPF do transportador.
   * @return CPF
   */
  @javax.annotation.Nullable
  public String getCPF() {
    return CPF;
  }

  public void setCPF(@javax.annotation.Nullable String CPF) {
    this.CPF = CPF;
  }


  public NfeSefazTransporta xNome(@javax.annotation.Nullable String xNome) {
    this.xNome = xNome;
    return this;
  }

  /**
   * Razão Social ou nome do transportador.
   * @return xNome
   */
  @javax.annotation.Nullable
  public String getxNome() {
    return xNome;
  }

  public void setxNome(@javax.annotation.Nullable String xNome) {
    this.xNome = xNome;
  }


  public NfeSefazTransporta IE(@javax.annotation.Nullable String IE) {
    this.IE = IE;
    return this;
  }

  /**
   * Inscrição Estadual (v2.0).
   * @return IE
   */
  @javax.annotation.Nullable
  public String getIE() {
    return IE;
  }

  public void setIE(@javax.annotation.Nullable String IE) {
    this.IE = IE;
  }


  public NfeSefazTransporta xEnder(@javax.annotation.Nullable String xEnder) {
    this.xEnder = xEnder;
    return this;
  }

  /**
   * Endereço completo.
   * @return xEnder
   */
  @javax.annotation.Nullable
  public String getxEnder() {
    return xEnder;
  }

  public void setxEnder(@javax.annotation.Nullable String xEnder) {
    this.xEnder = xEnder;
  }


  public NfeSefazTransporta xMun(@javax.annotation.Nullable String xMun) {
    this.xMun = xMun;
    return this;
  }

  /**
   * Nome do munícipio.
   * @return xMun
   */
  @javax.annotation.Nullable
  public String getxMun() {
    return xMun;
  }

  public void setxMun(@javax.annotation.Nullable String xMun) {
    this.xMun = xMun;
  }


  public NfeSefazTransporta UF(@javax.annotation.Nullable String UF) {
    this.UF = UF;
    return this;
  }

  /**
   * Sigla da UF.
   * @return UF
   */
  @javax.annotation.Nullable
  public String getUF() {
    return UF;
  }

  public void setUF(@javax.annotation.Nullable String UF) {
    this.UF = UF;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazTransporta nfeSefazTransporta = (NfeSefazTransporta) o;
    return Objects.equals(this.CNPJ, nfeSefazTransporta.CNPJ) &&
        Objects.equals(this.CPF, nfeSefazTransporta.CPF) &&
        Objects.equals(this.xNome, nfeSefazTransporta.xNome) &&
        Objects.equals(this.IE, nfeSefazTransporta.IE) &&
        Objects.equals(this.xEnder, nfeSefazTransporta.xEnder) &&
        Objects.equals(this.xMun, nfeSefazTransporta.xMun) &&
        Objects.equals(this.UF, nfeSefazTransporta.UF);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(CNPJ, CPF, xNome, IE, xEnder, xMun, UF);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazTransporta {\n");
    sb.append("    CNPJ: ").append(toIndentedString(CNPJ)).append("\n");
    sb.append("    CPF: ").append(toIndentedString(CPF)).append("\n");
    sb.append("    xNome: ").append(toIndentedString(xNome)).append("\n");
    sb.append("    IE: ").append(toIndentedString(IE)).append("\n");
    sb.append("    xEnder: ").append(toIndentedString(xEnder)).append("\n");
    sb.append("    xMun: ").append(toIndentedString(xMun)).append("\n");
    sb.append("    UF: ").append(toIndentedString(UF)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CNPJ");
    openapiFields.add("CPF");
    openapiFields.add("xNome");
    openapiFields.add("IE");
    openapiFields.add("xEnder");
    openapiFields.add("xMun");
    openapiFields.add("UF");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazTransporta
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazTransporta.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazTransporta is not found in the empty JSON string", NfeSefazTransporta.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazTransporta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazTransporta` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CNPJ") != null && !jsonObj.get("CNPJ").isJsonNull()) && !jsonObj.get("CNPJ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CNPJ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CNPJ").toString()));
      }
      if ((jsonObj.get("CPF") != null && !jsonObj.get("CPF").isJsonNull()) && !jsonObj.get("CPF").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CPF` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CPF").toString()));
      }
      if ((jsonObj.get("xNome") != null && !jsonObj.get("xNome").isJsonNull()) && !jsonObj.get("xNome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xNome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xNome").toString()));
      }
      if ((jsonObj.get("IE") != null && !jsonObj.get("IE").isJsonNull()) && !jsonObj.get("IE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IE").toString()));
      }
      if ((jsonObj.get("xEnder") != null && !jsonObj.get("xEnder").isJsonNull()) && !jsonObj.get("xEnder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xEnder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xEnder").toString()));
      }
      if ((jsonObj.get("xMun") != null && !jsonObj.get("xMun").isJsonNull()) && !jsonObj.get("xMun").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xMun` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xMun").toString()));
      }
      if ((jsonObj.get("UF") != null && !jsonObj.get("UF").isJsonNull()) && !jsonObj.get("UF").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UF` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UF").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazTransporta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazTransporta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazTransporta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazTransporta.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazTransporta>() {
           @Override
           public void write(JsonWriter out, NfeSefazTransporta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazTransporta read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazTransporta given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazTransporta
   * @throws IOException if the JSON string is invalid with respect to NfeSefazTransporta
   */
  public static NfeSefazTransporta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazTransporta.class);
  }

  /**
   * Convert an instance of NfeSefazTransporta to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

