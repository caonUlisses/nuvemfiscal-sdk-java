/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RpsDadosTomadorEndereco;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RpsDadosTomador
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class RpsDadosTomador {
  public static final String SERIALIZED_NAME_CPF_CNPJ = "cpf_cnpj";
  @SerializedName(SERIALIZED_NAME_CPF_CNPJ)
  @javax.annotation.Nullable
  private String cpfCnpj;

  public static final String SERIALIZED_NAME_INSCRICAO_MUNICIPAL = "inscricao_municipal";
  @SerializedName(SERIALIZED_NAME_INSCRICAO_MUNICIPAL)
  @javax.annotation.Nullable
  private String inscricaoMunicipal;

  public static final String SERIALIZED_NAME_NOME_RAZAO_SOCIAL = "nome_razao_social";
  @SerializedName(SERIALIZED_NAME_NOME_RAZAO_SOCIAL)
  @javax.annotation.Nonnull
  private String nomeRazaoSocial;

  public static final String SERIALIZED_NAME_FONE = "fone";
  @SerializedName(SERIALIZED_NAME_FONE)
  @javax.annotation.Nullable
  private String fone;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_ENDERECO = "endereco";
  @SerializedName(SERIALIZED_NAME_ENDERECO)
  @javax.annotation.Nullable
  private RpsDadosTomadorEndereco endereco;

  public RpsDadosTomador() {
  }

  public RpsDadosTomador cpfCnpj(@javax.annotation.Nullable String cpfCnpj) {
    this.cpfCnpj = cpfCnpj;
    return this;
  }

  /**
   * CPF ou CNPJ do tomador/destinatário.
   * @return cpfCnpj
   */
  @javax.annotation.Nullable
  public String getCpfCnpj() {
    return cpfCnpj;
  }

  public void setCpfCnpj(@javax.annotation.Nullable String cpfCnpj) {
    this.cpfCnpj = cpfCnpj;
  }


  public RpsDadosTomador inscricaoMunicipal(@javax.annotation.Nullable String inscricaoMunicipal) {
    this.inscricaoMunicipal = inscricaoMunicipal;
    return this;
  }

  /**
   * Inscrição Municipal do tomador/destinatário.
   * @return inscricaoMunicipal
   */
  @javax.annotation.Nullable
  public String getInscricaoMunicipal() {
    return inscricaoMunicipal;
  }

  public void setInscricaoMunicipal(@javax.annotation.Nullable String inscricaoMunicipal) {
    this.inscricaoMunicipal = inscricaoMunicipal;
  }


  public RpsDadosTomador nomeRazaoSocial(@javax.annotation.Nonnull String nomeRazaoSocial) {
    this.nomeRazaoSocial = nomeRazaoSocial;
    return this;
  }

  /**
   * Nome ou Razão Social do tomador/destinatário.
   * @return nomeRazaoSocial
   */
  @javax.annotation.Nonnull
  public String getNomeRazaoSocial() {
    return nomeRazaoSocial;
  }

  public void setNomeRazaoSocial(@javax.annotation.Nonnull String nomeRazaoSocial) {
    this.nomeRazaoSocial = nomeRazaoSocial;
  }


  public RpsDadosTomador fone(@javax.annotation.Nullable String fone) {
    this.fone = fone;
    return this;
  }

  /**
   * Telefone do tomador/destinatário.
   * @return fone
   */
  @javax.annotation.Nullable
  public String getFone() {
    return fone;
  }

  public void setFone(@javax.annotation.Nullable String fone) {
    this.fone = fone;
  }


  public RpsDadosTomador email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * Email do tomador/destinatário.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public RpsDadosTomador endereco(@javax.annotation.Nullable RpsDadosTomadorEndereco endereco) {
    this.endereco = endereco;
    return this;
  }

  /**
   * Get endereco
   * @return endereco
   */
  @javax.annotation.Nullable
  public RpsDadosTomadorEndereco getEndereco() {
    return endereco;
  }

  public void setEndereco(@javax.annotation.Nullable RpsDadosTomadorEndereco endereco) {
    this.endereco = endereco;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RpsDadosTomador rpsDadosTomador = (RpsDadosTomador) o;
    return Objects.equals(this.cpfCnpj, rpsDadosTomador.cpfCnpj) &&
        Objects.equals(this.inscricaoMunicipal, rpsDadosTomador.inscricaoMunicipal) &&
        Objects.equals(this.nomeRazaoSocial, rpsDadosTomador.nomeRazaoSocial) &&
        Objects.equals(this.fone, rpsDadosTomador.fone) &&
        Objects.equals(this.email, rpsDadosTomador.email) &&
        Objects.equals(this.endereco, rpsDadosTomador.endereco);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpfCnpj, inscricaoMunicipal, nomeRazaoSocial, fone, email, endereco);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RpsDadosTomador {\n");
    sb.append("    cpfCnpj: ").append(toIndentedString(cpfCnpj)).append("\n");
    sb.append("    inscricaoMunicipal: ").append(toIndentedString(inscricaoMunicipal)).append("\n");
    sb.append("    nomeRazaoSocial: ").append(toIndentedString(nomeRazaoSocial)).append("\n");
    sb.append("    fone: ").append(toIndentedString(fone)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    endereco: ").append(toIndentedString(endereco)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cpf_cnpj");
    openapiFields.add("inscricao_municipal");
    openapiFields.add("nome_razao_social");
    openapiFields.add("fone");
    openapiFields.add("email");
    openapiFields.add("endereco");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nome_razao_social");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RpsDadosTomador
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RpsDadosTomador.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RpsDadosTomador is not found in the empty JSON string", RpsDadosTomador.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RpsDadosTomador.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RpsDadosTomador` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RpsDadosTomador.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cpf_cnpj") != null && !jsonObj.get("cpf_cnpj").isJsonNull()) && !jsonObj.get("cpf_cnpj").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpf_cnpj` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpf_cnpj").toString()));
      }
      if ((jsonObj.get("inscricao_municipal") != null && !jsonObj.get("inscricao_municipal").isJsonNull()) && !jsonObj.get("inscricao_municipal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inscricao_municipal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inscricao_municipal").toString()));
      }
      if (!jsonObj.get("nome_razao_social").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nome_razao_social` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nome_razao_social").toString()));
      }
      if ((jsonObj.get("fone") != null && !jsonObj.get("fone").isJsonNull()) && !jsonObj.get("fone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fone").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // validate the optional field `endereco`
      if (jsonObj.get("endereco") != null && !jsonObj.get("endereco").isJsonNull()) {
        RpsDadosTomadorEndereco.validateJsonElement(jsonObj.get("endereco"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RpsDadosTomador.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RpsDadosTomador' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RpsDadosTomador> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RpsDadosTomador.class));

       return (TypeAdapter<T>) new TypeAdapter<RpsDadosTomador>() {
           @Override
           public void write(JsonWriter out, RpsDadosTomador value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RpsDadosTomador read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RpsDadosTomador given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RpsDadosTomador
   * @throws IOException if the JSON string is invalid with respect to RpsDadosTomador
   */
  public static RpsDadosTomador fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RpsDadosTomador.class);
  }

  /**
   * Convert an instance of RpsDadosTomador to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

