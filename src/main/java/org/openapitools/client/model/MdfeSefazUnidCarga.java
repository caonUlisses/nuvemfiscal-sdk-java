/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MdfeSefazLacUnidCarga;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Informações das Unidades de Carga (Containeres/ULD/Outros).  Dispositivo de carga utilizada (Unit Load Device - ULD) significa todo tipo de contêiner de carga, vagão, contêiner de avião, palete de aeronave com rede ou palete de aeronave com rede sobre um iglu.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class MdfeSefazUnidCarga {
  public static final String SERIALIZED_NAME_TP_UNID_CARGA = "tpUnidCarga";
  @SerializedName(SERIALIZED_NAME_TP_UNID_CARGA)
  @javax.annotation.Nullable
  private Integer tpUnidCarga;

  public static final String SERIALIZED_NAME_ID_UNID_CARGA = "idUnidCarga";
  @SerializedName(SERIALIZED_NAME_ID_UNID_CARGA)
  @javax.annotation.Nullable
  private String idUnidCarga;

  public static final String SERIALIZED_NAME_LAC_UNID_CARGA = "lacUnidCarga";
  @SerializedName(SERIALIZED_NAME_LAC_UNID_CARGA)
  @javax.annotation.Nullable
  private List<MdfeSefazLacUnidCarga> lacUnidCarga = new ArrayList<>();

  public static final String SERIALIZED_NAME_QTD_RAT = "qtdRat";
  @SerializedName(SERIALIZED_NAME_QTD_RAT)
  @javax.annotation.Nullable
  private BigDecimal qtdRat;

  public MdfeSefazUnidCarga() {
  }

  public MdfeSefazUnidCarga tpUnidCarga(@javax.annotation.Nullable Integer tpUnidCarga) {
    this.tpUnidCarga = tpUnidCarga;
    return this;
  }

  /**
   * Tipo da Unidade de Carga.  * 1 - Container  * 2 - ULD  * 3 - Pallet  * 4 - Outros
   * @return tpUnidCarga
   */
  @javax.annotation.Nullable
  public Integer getTpUnidCarga() {
    return tpUnidCarga;
  }

  public void setTpUnidCarga(@javax.annotation.Nullable Integer tpUnidCarga) {
    this.tpUnidCarga = tpUnidCarga;
  }


  public MdfeSefazUnidCarga idUnidCarga(@javax.annotation.Nullable String idUnidCarga) {
    this.idUnidCarga = idUnidCarga;
    return this;
  }

  /**
   * Identificação da Unidade de Carga.  Informar a identificação da unidade de carga, por exemplo: número do container.
   * @return idUnidCarga
   */
  @javax.annotation.Nullable
  public String getIdUnidCarga() {
    return idUnidCarga;
  }

  public void setIdUnidCarga(@javax.annotation.Nullable String idUnidCarga) {
    this.idUnidCarga = idUnidCarga;
  }


  public MdfeSefazUnidCarga lacUnidCarga(@javax.annotation.Nullable List<MdfeSefazLacUnidCarga> lacUnidCarga) {
    this.lacUnidCarga = lacUnidCarga;
    return this;
  }

  public MdfeSefazUnidCarga addLacUnidCargaItem(MdfeSefazLacUnidCarga lacUnidCargaItem) {
    if (this.lacUnidCarga == null) {
      this.lacUnidCarga = new ArrayList<>();
    }
    this.lacUnidCarga.add(lacUnidCargaItem);
    return this;
  }

  /**
   * Get lacUnidCarga
   * @return lacUnidCarga
   */
  @javax.annotation.Nullable
  public List<MdfeSefazLacUnidCarga> getLacUnidCarga() {
    return lacUnidCarga;
  }

  public void setLacUnidCarga(@javax.annotation.Nullable List<MdfeSefazLacUnidCarga> lacUnidCarga) {
    this.lacUnidCarga = lacUnidCarga;
  }


  public MdfeSefazUnidCarga qtdRat(@javax.annotation.Nullable BigDecimal qtdRat) {
    this.qtdRat = qtdRat;
    return this;
  }

  /**
   * Quantidade rateada (Peso,Volume).
   * @return qtdRat
   */
  @javax.annotation.Nullable
  public BigDecimal getQtdRat() {
    return qtdRat;
  }

  public void setQtdRat(@javax.annotation.Nullable BigDecimal qtdRat) {
    this.qtdRat = qtdRat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MdfeSefazUnidCarga mdfeSefazUnidCarga = (MdfeSefazUnidCarga) o;
    return Objects.equals(this.tpUnidCarga, mdfeSefazUnidCarga.tpUnidCarga) &&
        Objects.equals(this.idUnidCarga, mdfeSefazUnidCarga.idUnidCarga) &&
        Objects.equals(this.lacUnidCarga, mdfeSefazUnidCarga.lacUnidCarga) &&
        Objects.equals(this.qtdRat, mdfeSefazUnidCarga.qtdRat);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tpUnidCarga, idUnidCarga, lacUnidCarga, qtdRat);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MdfeSefazUnidCarga {\n");
    sb.append("    tpUnidCarga: ").append(toIndentedString(tpUnidCarga)).append("\n");
    sb.append("    idUnidCarga: ").append(toIndentedString(idUnidCarga)).append("\n");
    sb.append("    lacUnidCarga: ").append(toIndentedString(lacUnidCarga)).append("\n");
    sb.append("    qtdRat: ").append(toIndentedString(qtdRat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tpUnidCarga");
    openapiFields.add("idUnidCarga");
    openapiFields.add("lacUnidCarga");
    openapiFields.add("qtdRat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tpUnidCarga");
    openapiRequiredFields.add("idUnidCarga");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MdfeSefazUnidCarga
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MdfeSefazUnidCarga.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MdfeSefazUnidCarga is not found in the empty JSON string", MdfeSefazUnidCarga.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MdfeSefazUnidCarga.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MdfeSefazUnidCarga` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MdfeSefazUnidCarga.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("idUnidCarga") != null && !jsonObj.get("idUnidCarga").isJsonNull()) && !jsonObj.get("idUnidCarga").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idUnidCarga` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idUnidCarga").toString()));
      }
      if (jsonObj.get("lacUnidCarga") != null && !jsonObj.get("lacUnidCarga").isJsonNull()) {
        JsonArray jsonArraylacUnidCarga = jsonObj.getAsJsonArray("lacUnidCarga");
        if (jsonArraylacUnidCarga != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lacUnidCarga").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lacUnidCarga` to be an array in the JSON string but got `%s`", jsonObj.get("lacUnidCarga").toString()));
          }

          // validate the optional field `lacUnidCarga` (array)
          for (int i = 0; i < jsonArraylacUnidCarga.size(); i++) {
            MdfeSefazLacUnidCarga.validateJsonElement(jsonArraylacUnidCarga.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MdfeSefazUnidCarga.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MdfeSefazUnidCarga' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MdfeSefazUnidCarga> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MdfeSefazUnidCarga.class));

       return (TypeAdapter<T>) new TypeAdapter<MdfeSefazUnidCarga>() {
           @Override
           public void write(JsonWriter out, MdfeSefazUnidCarga value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MdfeSefazUnidCarga read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MdfeSefazUnidCarga given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MdfeSefazUnidCarga
   * @throws IOException if the JSON string is invalid with respect to MdfeSefazUnidCarga
   */
  public static MdfeSefazUnidCarga fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MdfeSefazUnidCarga.class);
  }

  /**
   * Convert an instance of MdfeSefazUnidCarga to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

