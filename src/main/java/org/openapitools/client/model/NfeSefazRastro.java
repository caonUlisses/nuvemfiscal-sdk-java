/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NfeSefazRastro
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazRastro {
  public static final String SERIALIZED_NAME_N_LOTE = "nLote";
  @SerializedName(SERIALIZED_NAME_N_LOTE)
  @javax.annotation.Nullable
  private String nLote;

  public static final String SERIALIZED_NAME_Q_LOTE = "qLote";
  @SerializedName(SERIALIZED_NAME_Q_LOTE)
  @javax.annotation.Nullable
  private BigDecimal qLote;

  public static final String SERIALIZED_NAME_D_FAB = "dFab";
  @SerializedName(SERIALIZED_NAME_D_FAB)
  @javax.annotation.Nullable
  private LocalDate dFab;

  public static final String SERIALIZED_NAME_D_VAL = "dVal";
  @SerializedName(SERIALIZED_NAME_D_VAL)
  @javax.annotation.Nullable
  private LocalDate dVal;

  public static final String SERIALIZED_NAME_C_AGREG = "cAgreg";
  @SerializedName(SERIALIZED_NAME_C_AGREG)
  @javax.annotation.Nullable
  private String cAgreg;

  public NfeSefazRastro() {
  }

  public NfeSefazRastro nLote(@javax.annotation.Nullable String nLote) {
    this.nLote = nLote;
    return this;
  }

  /**
   * Número do lote do produto.
   * @return nLote
   */
  @javax.annotation.Nullable
  public String getnLote() {
    return nLote;
  }

  public void setnLote(@javax.annotation.Nullable String nLote) {
    this.nLote = nLote;
  }


  public NfeSefazRastro qLote(@javax.annotation.Nullable BigDecimal qLote) {
    this.qLote = qLote;
    return this;
  }

  /**
   * Quantidade de produto no lote.
   * minimum: 0
   * @return qLote
   */
  @javax.annotation.Nullable
  public BigDecimal getqLote() {
    return qLote;
  }

  public void setqLote(@javax.annotation.Nullable BigDecimal qLote) {
    this.qLote = qLote;
  }


  public NfeSefazRastro dFab(@javax.annotation.Nullable LocalDate dFab) {
    this.dFab = dFab;
    return this;
  }

  /**
   * Data de fabricação/produção. Formato \&quot;AAAA-MM-DD\&quot;.
   * @return dFab
   */
  @javax.annotation.Nullable
  public LocalDate getdFab() {
    return dFab;
  }

  public void setdFab(@javax.annotation.Nullable LocalDate dFab) {
    this.dFab = dFab;
  }


  public NfeSefazRastro dVal(@javax.annotation.Nullable LocalDate dVal) {
    this.dVal = dVal;
    return this;
  }

  /**
   * Data de validade. Informar o último dia do mês caso a validade não especifique o dia. Formato \&quot;AAAA-MM-DD\&quot;.
   * @return dVal
   */
  @javax.annotation.Nullable
  public LocalDate getdVal() {
    return dVal;
  }

  public void setdVal(@javax.annotation.Nullable LocalDate dVal) {
    this.dVal = dVal;
  }


  public NfeSefazRastro cAgreg(@javax.annotation.Nullable String cAgreg) {
    this.cAgreg = cAgreg;
    return this;
  }

  /**
   * Get cAgreg
   * @return cAgreg
   */
  @javax.annotation.Nullable
  public String getcAgreg() {
    return cAgreg;
  }

  public void setcAgreg(@javax.annotation.Nullable String cAgreg) {
    this.cAgreg = cAgreg;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazRastro nfeSefazRastro = (NfeSefazRastro) o;
    return Objects.equals(this.nLote, nfeSefazRastro.nLote) &&
        Objects.equals(this.qLote, nfeSefazRastro.qLote) &&
        Objects.equals(this.dFab, nfeSefazRastro.dFab) &&
        Objects.equals(this.dVal, nfeSefazRastro.dVal) &&
        Objects.equals(this.cAgreg, nfeSefazRastro.cAgreg);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(nLote, qLote, dFab, dVal, cAgreg);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazRastro {\n");
    sb.append("    nLote: ").append(toIndentedString(nLote)).append("\n");
    sb.append("    qLote: ").append(toIndentedString(qLote)).append("\n");
    sb.append("    dFab: ").append(toIndentedString(dFab)).append("\n");
    sb.append("    dVal: ").append(toIndentedString(dVal)).append("\n");
    sb.append("    cAgreg: ").append(toIndentedString(cAgreg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nLote");
    openapiFields.add("qLote");
    openapiFields.add("dFab");
    openapiFields.add("dVal");
    openapiFields.add("cAgreg");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nLote");
    openapiRequiredFields.add("qLote");
    openapiRequiredFields.add("dFab");
    openapiRequiredFields.add("dVal");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazRastro
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazRastro.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazRastro is not found in the empty JSON string", NfeSefazRastro.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazRastro.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazRastro` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfeSefazRastro.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nLote") != null && !jsonObj.get("nLote").isJsonNull()) && !jsonObj.get("nLote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nLote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nLote").toString()));
      }
      if ((jsonObj.get("cAgreg") != null && !jsonObj.get("cAgreg").isJsonNull()) && !jsonObj.get("cAgreg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cAgreg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cAgreg").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazRastro.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazRastro' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazRastro> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazRastro.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazRastro>() {
           @Override
           public void write(JsonWriter out, NfeSefazRastro value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazRastro read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazRastro given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazRastro
   * @throws IOException if the JSON string is invalid with respect to NfeSefazRastro
   */
  public static NfeSefazRastro fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazRastro.class);
  }

  /**
   * Convert an instance of NfeSefazRastro to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

