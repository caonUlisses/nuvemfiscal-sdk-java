/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Valor percentual total aproximado dos tributos, em conformidade com o artigo 1o da Lei no 12.741/2012.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class TribTotalPercent {
  public static final String SERIALIZED_NAME_P_TOT_TRIB_FED = "pTotTribFed";
  @SerializedName(SERIALIZED_NAME_P_TOT_TRIB_FED)
  @javax.annotation.Nullable
  private BigDecimal pTotTribFed;

  public static final String SERIALIZED_NAME_P_TOT_TRIB_EST = "pTotTribEst";
  @SerializedName(SERIALIZED_NAME_P_TOT_TRIB_EST)
  @javax.annotation.Nullable
  private BigDecimal pTotTribEst;

  public static final String SERIALIZED_NAME_P_TOT_TRIB_MUN = "pTotTribMun";
  @SerializedName(SERIALIZED_NAME_P_TOT_TRIB_MUN)
  @javax.annotation.Nullable
  private BigDecimal pTotTribMun;

  public TribTotalPercent() {
  }

  public TribTotalPercent pTotTribFed(@javax.annotation.Nullable BigDecimal pTotTribFed) {
    this.pTotTribFed = pTotTribFed;
    return this;
  }

  /**
   * Valor percentual total aproximado dos tributos federais (%%).
   * minimum: 0
   * @return pTotTribFed
   */
  @javax.annotation.Nullable
  public BigDecimal getpTotTribFed() {
    return pTotTribFed;
  }

  public void setpTotTribFed(@javax.annotation.Nullable BigDecimal pTotTribFed) {
    this.pTotTribFed = pTotTribFed;
  }


  public TribTotalPercent pTotTribEst(@javax.annotation.Nullable BigDecimal pTotTribEst) {
    this.pTotTribEst = pTotTribEst;
    return this;
  }

  /**
   * Valor percentual total aproximado dos tributos estaduais (%%).
   * minimum: 0
   * @return pTotTribEst
   */
  @javax.annotation.Nullable
  public BigDecimal getpTotTribEst() {
    return pTotTribEst;
  }

  public void setpTotTribEst(@javax.annotation.Nullable BigDecimal pTotTribEst) {
    this.pTotTribEst = pTotTribEst;
  }


  public TribTotalPercent pTotTribMun(@javax.annotation.Nullable BigDecimal pTotTribMun) {
    this.pTotTribMun = pTotTribMun;
    return this;
  }

  /**
   * Valor percentual total aproximado dos tributos municipais (%%).
   * minimum: 0
   * @return pTotTribMun
   */
  @javax.annotation.Nullable
  public BigDecimal getpTotTribMun() {
    return pTotTribMun;
  }

  public void setpTotTribMun(@javax.annotation.Nullable BigDecimal pTotTribMun) {
    this.pTotTribMun = pTotTribMun;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TribTotalPercent tribTotalPercent = (TribTotalPercent) o;
    return Objects.equals(this.pTotTribFed, tribTotalPercent.pTotTribFed) &&
        Objects.equals(this.pTotTribEst, tribTotalPercent.pTotTribEst) &&
        Objects.equals(this.pTotTribMun, tribTotalPercent.pTotTribMun);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pTotTribFed, pTotTribEst, pTotTribMun);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TribTotalPercent {\n");
    sb.append("    pTotTribFed: ").append(toIndentedString(pTotTribFed)).append("\n");
    sb.append("    pTotTribEst: ").append(toIndentedString(pTotTribEst)).append("\n");
    sb.append("    pTotTribMun: ").append(toIndentedString(pTotTribMun)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pTotTribFed");
    openapiFields.add("pTotTribEst");
    openapiFields.add("pTotTribMun");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pTotTribFed");
    openapiRequiredFields.add("pTotTribEst");
    openapiRequiredFields.add("pTotTribMun");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TribTotalPercent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TribTotalPercent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TribTotalPercent is not found in the empty JSON string", TribTotalPercent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TribTotalPercent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TribTotalPercent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TribTotalPercent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TribTotalPercent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TribTotalPercent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TribTotalPercent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TribTotalPercent.class));

       return (TypeAdapter<T>) new TypeAdapter<TribTotalPercent>() {
           @Override
           public void write(JsonWriter out, TribTotalPercent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TribTotalPercent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TribTotalPercent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TribTotalPercent
   * @throws IOException if the JSON string is invalid with respect to TribTotalPercent
   */
  public static TribTotalPercent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TribTotalPercent.class);
  }

  /**
   * Convert an instance of TribTotalPercent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

