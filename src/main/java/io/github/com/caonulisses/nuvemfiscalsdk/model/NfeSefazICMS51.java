/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Tributção pelo ICMS 51 - Diferimento. A exigência do preenchimento das informações do ICMS diferido fica à critério de cada UF.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class NfeSefazICMS51 {
  public static final String SERIALIZED_NAME_ORIG = "orig";
  @SerializedName(SERIALIZED_NAME_ORIG)
  @javax.annotation.Nullable
  private Integer orig;

  public static final String SERIALIZED_NAME_C_S_T = "CST";
  @SerializedName(SERIALIZED_NAME_C_S_T)
  @javax.annotation.Nullable
  private String CST;

  public static final String SERIALIZED_NAME_MOD_B_C = "modBC";
  @SerializedName(SERIALIZED_NAME_MOD_B_C)
  @javax.annotation.Nullable
  private Integer modBC;

  public static final String SERIALIZED_NAME_P_RED_B_C = "pRedBC";
  @SerializedName(SERIALIZED_NAME_P_RED_B_C)
  @javax.annotation.Nullable
  private BigDecimal pRedBC;

  public static final String SERIALIZED_NAME_C_BENEF_R_B_C = "cBenefRBC";
  @SerializedName(SERIALIZED_NAME_C_BENEF_R_B_C)
  @javax.annotation.Nullable
  private String cBenefRBC;

  public static final String SERIALIZED_NAME_V_B_C = "vBC";
  @SerializedName(SERIALIZED_NAME_V_B_C)
  @javax.annotation.Nullable
  private BigDecimal vBC;

  public static final String SERIALIZED_NAME_P_I_C_M_S = "pICMS";
  @SerializedName(SERIALIZED_NAME_P_I_C_M_S)
  @javax.annotation.Nullable
  private BigDecimal pICMS;

  public static final String SERIALIZED_NAME_V_I_C_M_S_OP = "vICMSOp";
  @SerializedName(SERIALIZED_NAME_V_I_C_M_S_OP)
  @javax.annotation.Nullable
  private BigDecimal vICMSOp;

  public static final String SERIALIZED_NAME_P_DIF = "pDif";
  @SerializedName(SERIALIZED_NAME_P_DIF)
  @javax.annotation.Nullable
  private BigDecimal pDif;

  public static final String SERIALIZED_NAME_V_I_C_M_S_DIF = "vICMSDif";
  @SerializedName(SERIALIZED_NAME_V_I_C_M_S_DIF)
  @javax.annotation.Nullable
  private BigDecimal vICMSDif;

  public static final String SERIALIZED_NAME_V_I_C_M_S = "vICMS";
  @SerializedName(SERIALIZED_NAME_V_I_C_M_S)
  @javax.annotation.Nullable
  private BigDecimal vICMS;

  public static final String SERIALIZED_NAME_V_B_C_F_C_P = "vBCFCP";
  @SerializedName(SERIALIZED_NAME_V_B_C_F_C_P)
  @javax.annotation.Nullable
  private BigDecimal vBCFCP;

  public static final String SERIALIZED_NAME_P_F_C_P = "pFCP";
  @SerializedName(SERIALIZED_NAME_P_F_C_P)
  @javax.annotation.Nullable
  private BigDecimal pFCP;

  public static final String SERIALIZED_NAME_V_F_C_P = "vFCP";
  @SerializedName(SERIALIZED_NAME_V_F_C_P)
  @javax.annotation.Nullable
  private BigDecimal vFCP;

  public static final String SERIALIZED_NAME_P_F_C_P_DIF = "pFCPDif";
  @SerializedName(SERIALIZED_NAME_P_F_C_P_DIF)
  @javax.annotation.Nullable
  private BigDecimal pFCPDif;

  public static final String SERIALIZED_NAME_V_F_C_P_DIF = "vFCPDif";
  @SerializedName(SERIALIZED_NAME_V_F_C_P_DIF)
  @javax.annotation.Nullable
  private BigDecimal vFCPDif;

  public static final String SERIALIZED_NAME_V_F_C_P_EFET = "vFCPEfet";
  @SerializedName(SERIALIZED_NAME_V_F_C_P_EFET)
  @javax.annotation.Nullable
  private BigDecimal vFCPEfet;

  public NfeSefazICMS51() {
  }

  public NfeSefazICMS51 orig(@javax.annotation.Nullable Integer orig) {
    this.orig = orig;
    return this;
  }

  /**
   * Origem da mercadoria:  * 0 - Nacional, exceto as indicadas nos códigos 3, 4, 5 e 8;  * 1 - Estrangeira - Importação direta, exceto a indicada no código 6;  * 2 - Estrangeira - Adquirida no mercado interno, exceto a indicada no código 7;  * 3 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 40%% e inferior ou igual a 70%%;  * 4 - Nacional, cuja produção tenha sido feita em conformidade com os processos produtivos básicos de que tratam as legislações citadas nos Ajustes;  * 5 - Nacional, mercadoria ou bem com Conteúdo de Importação inferior ou igual a 40%%;  * 6 - Estrangeira - Importação direta, sem similar nacional, constante em lista da CAMEX e gás natural;  * 7 - Estrangeira - Adquirida no mercado interno, sem similar nacional, constante lista CAMEX e gás natural;  * 8 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 70%%.
   * @return orig
   */
  @javax.annotation.Nullable
  public Integer getOrig() {
    return orig;
  }

  public void setOrig(@javax.annotation.Nullable Integer orig) {
    this.orig = orig;
  }


  public NfeSefazICMS51 CST(@javax.annotation.Nullable String CST) {
    this.CST = CST;
    return this;
  }

  /**
   * Tributação pelo ICMS 51 - Tributação com Diferimento.
   * @return CST
   */
  @javax.annotation.Nullable
  public String getCST() {
    return CST;
  }

  public void setCST(@javax.annotation.Nullable String CST) {
    this.CST = CST;
  }


  public NfeSefazICMS51 modBC(@javax.annotation.Nullable Integer modBC) {
    this.modBC = modBC;
    return this;
  }

  /**
   * Modalidade de determinação da BC do ICMS:  * 0 - Margem Valor Agregado (%%)  * 1 - Pauta (valor)  * 2 - Preço Tabelado Máximo (valor)  * 3 - Valor da Operação
   * @return modBC
   */
  @javax.annotation.Nullable
  public Integer getModBC() {
    return modBC;
  }

  public void setModBC(@javax.annotation.Nullable Integer modBC) {
    this.modBC = modBC;
  }


  public NfeSefazICMS51 pRedBC(@javax.annotation.Nullable BigDecimal pRedBC) {
    this.pRedBC = pRedBC;
    return this;
  }

  /**
   * Percentual de redução da BC.
   * minimum: 0
   * @return pRedBC
   */
  @javax.annotation.Nullable
  public BigDecimal getpRedBC() {
    return pRedBC;
  }

  public void setpRedBC(@javax.annotation.Nullable BigDecimal pRedBC) {
    this.pRedBC = pRedBC;
  }


  public NfeSefazICMS51 cBenefRBC(@javax.annotation.Nullable String cBenefRBC) {
    this.cBenefRBC = cBenefRBC;
    return this;
  }

  /**
   * Código de Benefício Fiscal na UF aplicado ao item quando houver RBC.
   * @return cBenefRBC
   */
  @javax.annotation.Nullable
  public String getcBenefRBC() {
    return cBenefRBC;
  }

  public void setcBenefRBC(@javax.annotation.Nullable String cBenefRBC) {
    this.cBenefRBC = cBenefRBC;
  }


  public NfeSefazICMS51 vBC(@javax.annotation.Nullable BigDecimal vBC) {
    this.vBC = vBC;
    return this;
  }

  /**
   * Valor da BC do ICMS.
   * minimum: 0
   * @return vBC
   */
  @javax.annotation.Nullable
  public BigDecimal getvBC() {
    return vBC;
  }

  public void setvBC(@javax.annotation.Nullable BigDecimal vBC) {
    this.vBC = vBC;
  }


  public NfeSefazICMS51 pICMS(@javax.annotation.Nullable BigDecimal pICMS) {
    this.pICMS = pICMS;
    return this;
  }

  /**
   * Alíquota do imposto.
   * minimum: 0
   * @return pICMS
   */
  @javax.annotation.Nullable
  public BigDecimal getpICMS() {
    return pICMS;
  }

  public void setpICMS(@javax.annotation.Nullable BigDecimal pICMS) {
    this.pICMS = pICMS;
  }


  public NfeSefazICMS51 vICMSOp(@javax.annotation.Nullable BigDecimal vICMSOp) {
    this.vICMSOp = vICMSOp;
    return this;
  }

  /**
   * Valor do ICMS da Operação.
   * minimum: 0
   * @return vICMSOp
   */
  @javax.annotation.Nullable
  public BigDecimal getvICMSOp() {
    return vICMSOp;
  }

  public void setvICMSOp(@javax.annotation.Nullable BigDecimal vICMSOp) {
    this.vICMSOp = vICMSOp;
  }


  public NfeSefazICMS51 pDif(@javax.annotation.Nullable BigDecimal pDif) {
    this.pDif = pDif;
    return this;
  }

  /**
   * Percentual do diferemento.
   * minimum: 0
   * maximum: 1E+2
   * @return pDif
   */
  @javax.annotation.Nullable
  public BigDecimal getpDif() {
    return pDif;
  }

  public void setpDif(@javax.annotation.Nullable BigDecimal pDif) {
    this.pDif = pDif;
  }


  public NfeSefazICMS51 vICMSDif(@javax.annotation.Nullable BigDecimal vICMSDif) {
    this.vICMSDif = vICMSDif;
    return this;
  }

  /**
   * Valor do ICMS da diferido.
   * minimum: 0
   * @return vICMSDif
   */
  @javax.annotation.Nullable
  public BigDecimal getvICMSDif() {
    return vICMSDif;
  }

  public void setvICMSDif(@javax.annotation.Nullable BigDecimal vICMSDif) {
    this.vICMSDif = vICMSDif;
  }


  public NfeSefazICMS51 vICMS(@javax.annotation.Nullable BigDecimal vICMS) {
    this.vICMS = vICMS;
    return this;
  }

  /**
   * Valor do ICMS.
   * minimum: 0
   * @return vICMS
   */
  @javax.annotation.Nullable
  public BigDecimal getvICMS() {
    return vICMS;
  }

  public void setvICMS(@javax.annotation.Nullable BigDecimal vICMS) {
    this.vICMS = vICMS;
  }


  public NfeSefazICMS51 vBCFCP(@javax.annotation.Nullable BigDecimal vBCFCP) {
    this.vBCFCP = vBCFCP;
    return this;
  }

  /**
   * Valor da Base de cálculo do FCP.
   * minimum: 0
   * @return vBCFCP
   */
  @javax.annotation.Nullable
  public BigDecimal getvBCFCP() {
    return vBCFCP;
  }

  public void setvBCFCP(@javax.annotation.Nullable BigDecimal vBCFCP) {
    this.vBCFCP = vBCFCP;
  }


  public NfeSefazICMS51 pFCP(@javax.annotation.Nullable BigDecimal pFCP) {
    this.pFCP = pFCP;
    return this;
  }

  /**
   * Percentual de ICMS relativo ao Fundo de Combate à Pobreza (FCP).
   * minimum: 0
   * @return pFCP
   */
  @javax.annotation.Nullable
  public BigDecimal getpFCP() {
    return pFCP;
  }

  public void setpFCP(@javax.annotation.Nullable BigDecimal pFCP) {
    this.pFCP = pFCP;
  }


  public NfeSefazICMS51 vFCP(@javax.annotation.Nullable BigDecimal vFCP) {
    this.vFCP = vFCP;
    return this;
  }

  /**
   * Valor do ICMS relativo ao Fundo de Combate à Pobreza (FCP).
   * minimum: 0
   * @return vFCP
   */
  @javax.annotation.Nullable
  public BigDecimal getvFCP() {
    return vFCP;
  }

  public void setvFCP(@javax.annotation.Nullable BigDecimal vFCP) {
    this.vFCP = vFCP;
  }


  public NfeSefazICMS51 pFCPDif(@javax.annotation.Nullable BigDecimal pFCPDif) {
    this.pFCPDif = pFCPDif;
    return this;
  }

  /**
   * Percentual do diferimento do ICMS relativo ao Fundo de Combate à Pobreza (FCP).
   * minimum: 0
   * @return pFCPDif
   */
  @javax.annotation.Nullable
  public BigDecimal getpFCPDif() {
    return pFCPDif;
  }

  public void setpFCPDif(@javax.annotation.Nullable BigDecimal pFCPDif) {
    this.pFCPDif = pFCPDif;
  }


  public NfeSefazICMS51 vFCPDif(@javax.annotation.Nullable BigDecimal vFCPDif) {
    this.vFCPDif = vFCPDif;
    return this;
  }

  /**
   * Valor do ICMS relativo ao Fundo de Combate à Pobreza (FCP) diferido.
   * minimum: 0
   * @return vFCPDif
   */
  @javax.annotation.Nullable
  public BigDecimal getvFCPDif() {
    return vFCPDif;
  }

  public void setvFCPDif(@javax.annotation.Nullable BigDecimal vFCPDif) {
    this.vFCPDif = vFCPDif;
  }


  public NfeSefazICMS51 vFCPEfet(@javax.annotation.Nullable BigDecimal vFCPEfet) {
    this.vFCPEfet = vFCPEfet;
    return this;
  }

  /**
   * Valor efetivo do ICMS relativo ao Fundo de Combate à Pobreza (FCP).
   * minimum: 0
   * @return vFCPEfet
   */
  @javax.annotation.Nullable
  public BigDecimal getvFCPEfet() {
    return vFCPEfet;
  }

  public void setvFCPEfet(@javax.annotation.Nullable BigDecimal vFCPEfet) {
    this.vFCPEfet = vFCPEfet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfeSefazICMS51 nfeSefazICMS51 = (NfeSefazICMS51) o;
    return Objects.equals(this.orig, nfeSefazICMS51.orig) &&
        Objects.equals(this.CST, nfeSefazICMS51.CST) &&
        Objects.equals(this.modBC, nfeSefazICMS51.modBC) &&
        Objects.equals(this.pRedBC, nfeSefazICMS51.pRedBC) &&
        Objects.equals(this.cBenefRBC, nfeSefazICMS51.cBenefRBC) &&
        Objects.equals(this.vBC, nfeSefazICMS51.vBC) &&
        Objects.equals(this.pICMS, nfeSefazICMS51.pICMS) &&
        Objects.equals(this.vICMSOp, nfeSefazICMS51.vICMSOp) &&
        Objects.equals(this.pDif, nfeSefazICMS51.pDif) &&
        Objects.equals(this.vICMSDif, nfeSefazICMS51.vICMSDif) &&
        Objects.equals(this.vICMS, nfeSefazICMS51.vICMS) &&
        Objects.equals(this.vBCFCP, nfeSefazICMS51.vBCFCP) &&
        Objects.equals(this.pFCP, nfeSefazICMS51.pFCP) &&
        Objects.equals(this.vFCP, nfeSefazICMS51.vFCP) &&
        Objects.equals(this.pFCPDif, nfeSefazICMS51.pFCPDif) &&
        Objects.equals(this.vFCPDif, nfeSefazICMS51.vFCPDif) &&
        Objects.equals(this.vFCPEfet, nfeSefazICMS51.vFCPEfet);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(orig, CST, modBC, pRedBC, cBenefRBC, vBC, pICMS, vICMSOp, pDif, vICMSDif, vICMS, vBCFCP, pFCP, vFCP, pFCPDif, vFCPDif, vFCPEfet);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfeSefazICMS51 {\n");
    sb.append("    orig: ").append(toIndentedString(orig)).append("\n");
    sb.append("    CST: ").append(toIndentedString(CST)).append("\n");
    sb.append("    modBC: ").append(toIndentedString(modBC)).append("\n");
    sb.append("    pRedBC: ").append(toIndentedString(pRedBC)).append("\n");
    sb.append("    cBenefRBC: ").append(toIndentedString(cBenefRBC)).append("\n");
    sb.append("    vBC: ").append(toIndentedString(vBC)).append("\n");
    sb.append("    pICMS: ").append(toIndentedString(pICMS)).append("\n");
    sb.append("    vICMSOp: ").append(toIndentedString(vICMSOp)).append("\n");
    sb.append("    pDif: ").append(toIndentedString(pDif)).append("\n");
    sb.append("    vICMSDif: ").append(toIndentedString(vICMSDif)).append("\n");
    sb.append("    vICMS: ").append(toIndentedString(vICMS)).append("\n");
    sb.append("    vBCFCP: ").append(toIndentedString(vBCFCP)).append("\n");
    sb.append("    pFCP: ").append(toIndentedString(pFCP)).append("\n");
    sb.append("    vFCP: ").append(toIndentedString(vFCP)).append("\n");
    sb.append("    pFCPDif: ").append(toIndentedString(pFCPDif)).append("\n");
    sb.append("    vFCPDif: ").append(toIndentedString(vFCPDif)).append("\n");
    sb.append("    vFCPEfet: ").append(toIndentedString(vFCPEfet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orig");
    openapiFields.add("CST");
    openapiFields.add("modBC");
    openapiFields.add("pRedBC");
    openapiFields.add("cBenefRBC");
    openapiFields.add("vBC");
    openapiFields.add("pICMS");
    openapiFields.add("vICMSOp");
    openapiFields.add("pDif");
    openapiFields.add("vICMSDif");
    openapiFields.add("vICMS");
    openapiFields.add("vBCFCP");
    openapiFields.add("pFCP");
    openapiFields.add("vFCP");
    openapiFields.add("pFCPDif");
    openapiFields.add("vFCPDif");
    openapiFields.add("vFCPEfet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("orig");
    openapiRequiredFields.add("CST");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfeSefazICMS51
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfeSefazICMS51.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfeSefazICMS51 is not found in the empty JSON string", NfeSefazICMS51.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfeSefazICMS51.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfeSefazICMS51` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NfeSefazICMS51.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CST") != null && !jsonObj.get("CST").isJsonNull()) && !jsonObj.get("CST").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CST` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CST").toString()));
      }
      if ((jsonObj.get("cBenefRBC") != null && !jsonObj.get("cBenefRBC").isJsonNull()) && !jsonObj.get("cBenefRBC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cBenefRBC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cBenefRBC").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfeSefazICMS51.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfeSefazICMS51' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfeSefazICMS51> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfeSefazICMS51.class));

       return (TypeAdapter<T>) new TypeAdapter<NfeSefazICMS51>() {
           @Override
           public void write(JsonWriter out, NfeSefazICMS51 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfeSefazICMS51 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfeSefazICMS51 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfeSefazICMS51
   * @throws IOException if the JSON string is invalid with respect to NfeSefazICMS51
   */
  public static NfeSefazICMS51 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfeSefazICMS51.class);
  }

  /**
   * Convert an instance of NfeSefazICMS51 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

