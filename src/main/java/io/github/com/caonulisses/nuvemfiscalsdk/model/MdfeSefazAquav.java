/*
 * API Nuvem Fiscal
 * API para automação comercial e documentos fiscais.
 *
 * The version of the OpenAPI document: 2.44.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.com.caonulisses.nuvemfiscalsdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazInfEmbComb;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazInfTermCarreg;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazInfTermDescarreg;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazInfUnidCargaVazia;
import io.github.com.caonulisses.nuvemfiscalsdk.model.MdfeSefazInfUnidTranspVazia;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.com.caonulisses.nuvemfiscalsdk.JSON;

/**
 * Informações do modal Aquaviário.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-30T14:00:11.942973268-03:00[America/Sao_Paulo]", comments = "Generator version: 7.10.0")
public class MdfeSefazAquav {
  public static final String SERIALIZED_NAME_IRIN = "irin";
  @SerializedName(SERIALIZED_NAME_IRIN)
  @javax.annotation.Nullable
  private String irin;

  public static final String SERIALIZED_NAME_TP_EMB = "tpEmb";
  @SerializedName(SERIALIZED_NAME_TP_EMB)
  @javax.annotation.Nullable
  private String tpEmb;

  public static final String SERIALIZED_NAME_C_EMBAR = "cEmbar";
  @SerializedName(SERIALIZED_NAME_C_EMBAR)
  @javax.annotation.Nullable
  private String cEmbar;

  public static final String SERIALIZED_NAME_X_EMBAR = "xEmbar";
  @SerializedName(SERIALIZED_NAME_X_EMBAR)
  @javax.annotation.Nullable
  private String xEmbar;

  public static final String SERIALIZED_NAME_N_VIAG = "nViag";
  @SerializedName(SERIALIZED_NAME_N_VIAG)
  @javax.annotation.Nullable
  private String nViag;

  public static final String SERIALIZED_NAME_C_PRT_EMB = "cPrtEmb";
  @SerializedName(SERIALIZED_NAME_C_PRT_EMB)
  @javax.annotation.Nullable
  private String cPrtEmb;

  public static final String SERIALIZED_NAME_C_PRT_DEST = "cPrtDest";
  @SerializedName(SERIALIZED_NAME_C_PRT_DEST)
  @javax.annotation.Nullable
  private String cPrtDest;

  public static final String SERIALIZED_NAME_PRT_TRANS = "prtTrans";
  @SerializedName(SERIALIZED_NAME_PRT_TRANS)
  @javax.annotation.Nullable
  private String prtTrans;

  public static final String SERIALIZED_NAME_TP_NAV = "tpNav";
  @SerializedName(SERIALIZED_NAME_TP_NAV)
  @javax.annotation.Nullable
  private Integer tpNav;

  public static final String SERIALIZED_NAME_INF_TERM_CARREG = "infTermCarreg";
  @SerializedName(SERIALIZED_NAME_INF_TERM_CARREG)
  @javax.annotation.Nullable
  private List<MdfeSefazInfTermCarreg> infTermCarreg = new ArrayList<>();

  public static final String SERIALIZED_NAME_INF_TERM_DESCARREG = "infTermDescarreg";
  @SerializedName(SERIALIZED_NAME_INF_TERM_DESCARREG)
  @javax.annotation.Nullable
  private List<MdfeSefazInfTermDescarreg> infTermDescarreg = new ArrayList<>();

  public static final String SERIALIZED_NAME_INF_EMB_COMB = "infEmbComb";
  @SerializedName(SERIALIZED_NAME_INF_EMB_COMB)
  @javax.annotation.Nullable
  private List<MdfeSefazInfEmbComb> infEmbComb = new ArrayList<>();

  public static final String SERIALIZED_NAME_INF_UNID_CARGA_VAZIA = "infUnidCargaVazia";
  @SerializedName(SERIALIZED_NAME_INF_UNID_CARGA_VAZIA)
  @javax.annotation.Nullable
  private List<MdfeSefazInfUnidCargaVazia> infUnidCargaVazia = new ArrayList<>();

  public static final String SERIALIZED_NAME_INF_UNID_TRANSP_VAZIA = "infUnidTranspVazia";
  @SerializedName(SERIALIZED_NAME_INF_UNID_TRANSP_VAZIA)
  @javax.annotation.Nullable
  private List<MdfeSefazInfUnidTranspVazia> infUnidTranspVazia = new ArrayList<>();

  public MdfeSefazAquav() {
  }

  public MdfeSefazAquav irin(@javax.annotation.Nullable String irin) {
    this.irin = irin;
    return this;
  }

  /**
   * Irin do navio sempre deverá ser informado.
   * @return irin
   */
  @javax.annotation.Nullable
  public String getIrin() {
    return irin;
  }

  public void setIrin(@javax.annotation.Nullable String irin) {
    this.irin = irin;
  }


  public MdfeSefazAquav tpEmb(@javax.annotation.Nullable String tpEmb) {
    this.tpEmb = tpEmb;
    return this;
  }

  /**
   * Código do tipo de embarcação.  Preencher com código da Tabela de Tipo de Embarcação definida no Ministério dos Transportes.
   * @return tpEmb
   */
  @javax.annotation.Nullable
  public String getTpEmb() {
    return tpEmb;
  }

  public void setTpEmb(@javax.annotation.Nullable String tpEmb) {
    this.tpEmb = tpEmb;
  }


  public MdfeSefazAquav cEmbar(@javax.annotation.Nullable String cEmbar) {
    this.cEmbar = cEmbar;
    return this;
  }

  /**
   * Código da embarcação.
   * @return cEmbar
   */
  @javax.annotation.Nullable
  public String getcEmbar() {
    return cEmbar;
  }

  public void setcEmbar(@javax.annotation.Nullable String cEmbar) {
    this.cEmbar = cEmbar;
  }


  public MdfeSefazAquav xEmbar(@javax.annotation.Nullable String xEmbar) {
    this.xEmbar = xEmbar;
    return this;
  }

  /**
   * Nome da embarcação.
   * @return xEmbar
   */
  @javax.annotation.Nullable
  public String getxEmbar() {
    return xEmbar;
  }

  public void setxEmbar(@javax.annotation.Nullable String xEmbar) {
    this.xEmbar = xEmbar;
  }


  public MdfeSefazAquav nViag(@javax.annotation.Nullable String nViag) {
    this.nViag = nViag;
    return this;
  }

  /**
   * Número da Viagem.
   * @return nViag
   */
  @javax.annotation.Nullable
  public String getnViag() {
    return nViag;
  }

  public void setnViag(@javax.annotation.Nullable String nViag) {
    this.nViag = nViag;
  }


  public MdfeSefazAquav cPrtEmb(@javax.annotation.Nullable String cPrtEmb) {
    this.cPrtEmb = cPrtEmb;
    return this;
  }

  /**
   * Código do Porto de Embarque.  Preencher de acordo com Tabela de Portos definida no Ministério dos Transportes.
   * @return cPrtEmb
   */
  @javax.annotation.Nullable
  public String getcPrtEmb() {
    return cPrtEmb;
  }

  public void setcPrtEmb(@javax.annotation.Nullable String cPrtEmb) {
    this.cPrtEmb = cPrtEmb;
  }


  public MdfeSefazAquav cPrtDest(@javax.annotation.Nullable String cPrtDest) {
    this.cPrtDest = cPrtDest;
    return this;
  }

  /**
   * Código do Porto de Destino.  Preencher de acordo com Tabela de Portos definida no Ministério dos Transportes.
   * @return cPrtDest
   */
  @javax.annotation.Nullable
  public String getcPrtDest() {
    return cPrtDest;
  }

  public void setcPrtDest(@javax.annotation.Nullable String cPrtDest) {
    this.cPrtDest = cPrtDest;
  }


  public MdfeSefazAquav prtTrans(@javax.annotation.Nullable String prtTrans) {
    this.prtTrans = prtTrans;
    return this;
  }

  /**
   * Porto de Transbordo.
   * @return prtTrans
   */
  @javax.annotation.Nullable
  public String getPrtTrans() {
    return prtTrans;
  }

  public void setPrtTrans(@javax.annotation.Nullable String prtTrans) {
    this.prtTrans = prtTrans;
  }


  public MdfeSefazAquav tpNav(@javax.annotation.Nullable Integer tpNav) {
    this.tpNav = tpNav;
    return this;
  }

  /**
   * Tipo de Navegação.  Preencher com:  * 0 - Interior  * 1 - Cabotagem
   * @return tpNav
   */
  @javax.annotation.Nullable
  public Integer getTpNav() {
    return tpNav;
  }

  public void setTpNav(@javax.annotation.Nullable Integer tpNav) {
    this.tpNav = tpNav;
  }


  public MdfeSefazAquav infTermCarreg(@javax.annotation.Nullable List<MdfeSefazInfTermCarreg> infTermCarreg) {
    this.infTermCarreg = infTermCarreg;
    return this;
  }

  public MdfeSefazAquav addInfTermCarregItem(MdfeSefazInfTermCarreg infTermCarregItem) {
    if (this.infTermCarreg == null) {
      this.infTermCarreg = new ArrayList<>();
    }
    this.infTermCarreg.add(infTermCarregItem);
    return this;
  }

  /**
   * Get infTermCarreg
   * @return infTermCarreg
   */
  @javax.annotation.Nullable
  public List<MdfeSefazInfTermCarreg> getInfTermCarreg() {
    return infTermCarreg;
  }

  public void setInfTermCarreg(@javax.annotation.Nullable List<MdfeSefazInfTermCarreg> infTermCarreg) {
    this.infTermCarreg = infTermCarreg;
  }


  public MdfeSefazAquav infTermDescarreg(@javax.annotation.Nullable List<MdfeSefazInfTermDescarreg> infTermDescarreg) {
    this.infTermDescarreg = infTermDescarreg;
    return this;
  }

  public MdfeSefazAquav addInfTermDescarregItem(MdfeSefazInfTermDescarreg infTermDescarregItem) {
    if (this.infTermDescarreg == null) {
      this.infTermDescarreg = new ArrayList<>();
    }
    this.infTermDescarreg.add(infTermDescarregItem);
    return this;
  }

  /**
   * Get infTermDescarreg
   * @return infTermDescarreg
   */
  @javax.annotation.Nullable
  public List<MdfeSefazInfTermDescarreg> getInfTermDescarreg() {
    return infTermDescarreg;
  }

  public void setInfTermDescarreg(@javax.annotation.Nullable List<MdfeSefazInfTermDescarreg> infTermDescarreg) {
    this.infTermDescarreg = infTermDescarreg;
  }


  public MdfeSefazAquav infEmbComb(@javax.annotation.Nullable List<MdfeSefazInfEmbComb> infEmbComb) {
    this.infEmbComb = infEmbComb;
    return this;
  }

  public MdfeSefazAquav addInfEmbCombItem(MdfeSefazInfEmbComb infEmbCombItem) {
    if (this.infEmbComb == null) {
      this.infEmbComb = new ArrayList<>();
    }
    this.infEmbComb.add(infEmbCombItem);
    return this;
  }

  /**
   * Get infEmbComb
   * @return infEmbComb
   */
  @javax.annotation.Nullable
  public List<MdfeSefazInfEmbComb> getInfEmbComb() {
    return infEmbComb;
  }

  public void setInfEmbComb(@javax.annotation.Nullable List<MdfeSefazInfEmbComb> infEmbComb) {
    this.infEmbComb = infEmbComb;
  }


  public MdfeSefazAquav infUnidCargaVazia(@javax.annotation.Nullable List<MdfeSefazInfUnidCargaVazia> infUnidCargaVazia) {
    this.infUnidCargaVazia = infUnidCargaVazia;
    return this;
  }

  public MdfeSefazAquav addInfUnidCargaVaziaItem(MdfeSefazInfUnidCargaVazia infUnidCargaVaziaItem) {
    if (this.infUnidCargaVazia == null) {
      this.infUnidCargaVazia = new ArrayList<>();
    }
    this.infUnidCargaVazia.add(infUnidCargaVaziaItem);
    return this;
  }

  /**
   * Get infUnidCargaVazia
   * @return infUnidCargaVazia
   */
  @javax.annotation.Nullable
  public List<MdfeSefazInfUnidCargaVazia> getInfUnidCargaVazia() {
    return infUnidCargaVazia;
  }

  public void setInfUnidCargaVazia(@javax.annotation.Nullable List<MdfeSefazInfUnidCargaVazia> infUnidCargaVazia) {
    this.infUnidCargaVazia = infUnidCargaVazia;
  }


  public MdfeSefazAquav infUnidTranspVazia(@javax.annotation.Nullable List<MdfeSefazInfUnidTranspVazia> infUnidTranspVazia) {
    this.infUnidTranspVazia = infUnidTranspVazia;
    return this;
  }

  public MdfeSefazAquav addInfUnidTranspVaziaItem(MdfeSefazInfUnidTranspVazia infUnidTranspVaziaItem) {
    if (this.infUnidTranspVazia == null) {
      this.infUnidTranspVazia = new ArrayList<>();
    }
    this.infUnidTranspVazia.add(infUnidTranspVaziaItem);
    return this;
  }

  /**
   * Get infUnidTranspVazia
   * @return infUnidTranspVazia
   */
  @javax.annotation.Nullable
  public List<MdfeSefazInfUnidTranspVazia> getInfUnidTranspVazia() {
    return infUnidTranspVazia;
  }

  public void setInfUnidTranspVazia(@javax.annotation.Nullable List<MdfeSefazInfUnidTranspVazia> infUnidTranspVazia) {
    this.infUnidTranspVazia = infUnidTranspVazia;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MdfeSefazAquav mdfeSefazAquav = (MdfeSefazAquav) o;
    return Objects.equals(this.irin, mdfeSefazAquav.irin) &&
        Objects.equals(this.tpEmb, mdfeSefazAquav.tpEmb) &&
        Objects.equals(this.cEmbar, mdfeSefazAquav.cEmbar) &&
        Objects.equals(this.xEmbar, mdfeSefazAquav.xEmbar) &&
        Objects.equals(this.nViag, mdfeSefazAquav.nViag) &&
        Objects.equals(this.cPrtEmb, mdfeSefazAquav.cPrtEmb) &&
        Objects.equals(this.cPrtDest, mdfeSefazAquav.cPrtDest) &&
        Objects.equals(this.prtTrans, mdfeSefazAquav.prtTrans) &&
        Objects.equals(this.tpNav, mdfeSefazAquav.tpNav) &&
        Objects.equals(this.infTermCarreg, mdfeSefazAquav.infTermCarreg) &&
        Objects.equals(this.infTermDescarreg, mdfeSefazAquav.infTermDescarreg) &&
        Objects.equals(this.infEmbComb, mdfeSefazAquav.infEmbComb) &&
        Objects.equals(this.infUnidCargaVazia, mdfeSefazAquav.infUnidCargaVazia) &&
        Objects.equals(this.infUnidTranspVazia, mdfeSefazAquav.infUnidTranspVazia);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(irin, tpEmb, cEmbar, xEmbar, nViag, cPrtEmb, cPrtDest, prtTrans, tpNav, infTermCarreg, infTermDescarreg, infEmbComb, infUnidCargaVazia, infUnidTranspVazia);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MdfeSefazAquav {\n");
    sb.append("    irin: ").append(toIndentedString(irin)).append("\n");
    sb.append("    tpEmb: ").append(toIndentedString(tpEmb)).append("\n");
    sb.append("    cEmbar: ").append(toIndentedString(cEmbar)).append("\n");
    sb.append("    xEmbar: ").append(toIndentedString(xEmbar)).append("\n");
    sb.append("    nViag: ").append(toIndentedString(nViag)).append("\n");
    sb.append("    cPrtEmb: ").append(toIndentedString(cPrtEmb)).append("\n");
    sb.append("    cPrtDest: ").append(toIndentedString(cPrtDest)).append("\n");
    sb.append("    prtTrans: ").append(toIndentedString(prtTrans)).append("\n");
    sb.append("    tpNav: ").append(toIndentedString(tpNav)).append("\n");
    sb.append("    infTermCarreg: ").append(toIndentedString(infTermCarreg)).append("\n");
    sb.append("    infTermDescarreg: ").append(toIndentedString(infTermDescarreg)).append("\n");
    sb.append("    infEmbComb: ").append(toIndentedString(infEmbComb)).append("\n");
    sb.append("    infUnidCargaVazia: ").append(toIndentedString(infUnidCargaVazia)).append("\n");
    sb.append("    infUnidTranspVazia: ").append(toIndentedString(infUnidTranspVazia)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("irin");
    openapiFields.add("tpEmb");
    openapiFields.add("cEmbar");
    openapiFields.add("xEmbar");
    openapiFields.add("nViag");
    openapiFields.add("cPrtEmb");
    openapiFields.add("cPrtDest");
    openapiFields.add("prtTrans");
    openapiFields.add("tpNav");
    openapiFields.add("infTermCarreg");
    openapiFields.add("infTermDescarreg");
    openapiFields.add("infEmbComb");
    openapiFields.add("infUnidCargaVazia");
    openapiFields.add("infUnidTranspVazia");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("irin");
    openapiRequiredFields.add("tpEmb");
    openapiRequiredFields.add("cEmbar");
    openapiRequiredFields.add("xEmbar");
    openapiRequiredFields.add("nViag");
    openapiRequiredFields.add("cPrtEmb");
    openapiRequiredFields.add("cPrtDest");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MdfeSefazAquav
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MdfeSefazAquav.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MdfeSefazAquav is not found in the empty JSON string", MdfeSefazAquav.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MdfeSefazAquav.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MdfeSefazAquav` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MdfeSefazAquav.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("irin") != null && !jsonObj.get("irin").isJsonNull()) && !jsonObj.get("irin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `irin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("irin").toString()));
      }
      if ((jsonObj.get("tpEmb") != null && !jsonObj.get("tpEmb").isJsonNull()) && !jsonObj.get("tpEmb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tpEmb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tpEmb").toString()));
      }
      if ((jsonObj.get("cEmbar") != null && !jsonObj.get("cEmbar").isJsonNull()) && !jsonObj.get("cEmbar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cEmbar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cEmbar").toString()));
      }
      if ((jsonObj.get("xEmbar") != null && !jsonObj.get("xEmbar").isJsonNull()) && !jsonObj.get("xEmbar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xEmbar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xEmbar").toString()));
      }
      if ((jsonObj.get("nViag") != null && !jsonObj.get("nViag").isJsonNull()) && !jsonObj.get("nViag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nViag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nViag").toString()));
      }
      if ((jsonObj.get("cPrtEmb") != null && !jsonObj.get("cPrtEmb").isJsonNull()) && !jsonObj.get("cPrtEmb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cPrtEmb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cPrtEmb").toString()));
      }
      if ((jsonObj.get("cPrtDest") != null && !jsonObj.get("cPrtDest").isJsonNull()) && !jsonObj.get("cPrtDest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cPrtDest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cPrtDest").toString()));
      }
      if ((jsonObj.get("prtTrans") != null && !jsonObj.get("prtTrans").isJsonNull()) && !jsonObj.get("prtTrans").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prtTrans` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prtTrans").toString()));
      }
      if (jsonObj.get("infTermCarreg") != null && !jsonObj.get("infTermCarreg").isJsonNull()) {
        JsonArray jsonArrayinfTermCarreg = jsonObj.getAsJsonArray("infTermCarreg");
        if (jsonArrayinfTermCarreg != null) {
          // ensure the json data is an array
          if (!jsonObj.get("infTermCarreg").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `infTermCarreg` to be an array in the JSON string but got `%s`", jsonObj.get("infTermCarreg").toString()));
          }

          // validate the optional field `infTermCarreg` (array)
          for (int i = 0; i < jsonArrayinfTermCarreg.size(); i++) {
            MdfeSefazInfTermCarreg.validateJsonElement(jsonArrayinfTermCarreg.get(i));
          };
        }
      }
      if (jsonObj.get("infTermDescarreg") != null && !jsonObj.get("infTermDescarreg").isJsonNull()) {
        JsonArray jsonArrayinfTermDescarreg = jsonObj.getAsJsonArray("infTermDescarreg");
        if (jsonArrayinfTermDescarreg != null) {
          // ensure the json data is an array
          if (!jsonObj.get("infTermDescarreg").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `infTermDescarreg` to be an array in the JSON string but got `%s`", jsonObj.get("infTermDescarreg").toString()));
          }

          // validate the optional field `infTermDescarreg` (array)
          for (int i = 0; i < jsonArrayinfTermDescarreg.size(); i++) {
            MdfeSefazInfTermDescarreg.validateJsonElement(jsonArrayinfTermDescarreg.get(i));
          };
        }
      }
      if (jsonObj.get("infEmbComb") != null && !jsonObj.get("infEmbComb").isJsonNull()) {
        JsonArray jsonArrayinfEmbComb = jsonObj.getAsJsonArray("infEmbComb");
        if (jsonArrayinfEmbComb != null) {
          // ensure the json data is an array
          if (!jsonObj.get("infEmbComb").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `infEmbComb` to be an array in the JSON string but got `%s`", jsonObj.get("infEmbComb").toString()));
          }

          // validate the optional field `infEmbComb` (array)
          for (int i = 0; i < jsonArrayinfEmbComb.size(); i++) {
            MdfeSefazInfEmbComb.validateJsonElement(jsonArrayinfEmbComb.get(i));
          };
        }
      }
      if (jsonObj.get("infUnidCargaVazia") != null && !jsonObj.get("infUnidCargaVazia").isJsonNull()) {
        JsonArray jsonArrayinfUnidCargaVazia = jsonObj.getAsJsonArray("infUnidCargaVazia");
        if (jsonArrayinfUnidCargaVazia != null) {
          // ensure the json data is an array
          if (!jsonObj.get("infUnidCargaVazia").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `infUnidCargaVazia` to be an array in the JSON string but got `%s`", jsonObj.get("infUnidCargaVazia").toString()));
          }

          // validate the optional field `infUnidCargaVazia` (array)
          for (int i = 0; i < jsonArrayinfUnidCargaVazia.size(); i++) {
            MdfeSefazInfUnidCargaVazia.validateJsonElement(jsonArrayinfUnidCargaVazia.get(i));
          };
        }
      }
      if (jsonObj.get("infUnidTranspVazia") != null && !jsonObj.get("infUnidTranspVazia").isJsonNull()) {
        JsonArray jsonArrayinfUnidTranspVazia = jsonObj.getAsJsonArray("infUnidTranspVazia");
        if (jsonArrayinfUnidTranspVazia != null) {
          // ensure the json data is an array
          if (!jsonObj.get("infUnidTranspVazia").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `infUnidTranspVazia` to be an array in the JSON string but got `%s`", jsonObj.get("infUnidTranspVazia").toString()));
          }

          // validate the optional field `infUnidTranspVazia` (array)
          for (int i = 0; i < jsonArrayinfUnidTranspVazia.size(); i++) {
            MdfeSefazInfUnidTranspVazia.validateJsonElement(jsonArrayinfUnidTranspVazia.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MdfeSefazAquav.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MdfeSefazAquav' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MdfeSefazAquav> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MdfeSefazAquav.class));

       return (TypeAdapter<T>) new TypeAdapter<MdfeSefazAquav>() {
           @Override
           public void write(JsonWriter out, MdfeSefazAquav value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MdfeSefazAquav read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MdfeSefazAquav given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MdfeSefazAquav
   * @throws IOException if the JSON string is invalid with respect to MdfeSefazAquav
   */
  public static MdfeSefazAquav fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MdfeSefazAquav.class);
  }

  /**
   * Convert an instance of MdfeSefazAquav to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

